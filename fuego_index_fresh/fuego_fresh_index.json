{
  "metadata": {
    "indexedAt": "2025-07-02T03:04:46.400Z",
    "sourceRepository": "https://github.com/usexfg/fuego",
    "indexVersion": "2.0.0-fresh",
    "totalFiles": 474,
    "facts": {
      "MAX_SUPPLY": 80000088000008,
      "DECIMAL_PLACES": 7,
      "COIN_UNIT": 10000000,
      "ACTUAL_MAX_SUPPLY_XFG": 8000008.8000008,
      "HASH_FUNCTIONS": [
        "blake256",
        "blake256",
        "chacha8",
        "chacha8",
        "groestl",
        "groestl",
        "jh",
        "jh",
        "keccak",
        "keccak",
        "skein",
        "skein"
      ],
      "P2P_PORT": 10808,
      "RPC_PORT": 18180,
      "BLOCK_TARGET": 480,
      "ADDRESS_PREFIX": 1753191
    }
  },
  "files": {
    "src/BlockchainExplorer/BlockchainExplorer.cpp": {
      "path": "src/BlockchainExplorer/BlockchainExplorer.cpp",
      "size": 24401,
      "lines": 771,
      "hash": "1c7557d65fa66083",
      "functions": [
        {
          "name": "performAsync",
          "line": 57,
          "signature": "void performAsync(BlockchainExplorer::AsyncContextCounter& asyncContextCounter, const INode::Callback& callback) {"
        },
        {
          "name": "blockingCompleteionCallback",
          "line": 63,
          "signature": "void blockingCompleteionCallback(std::promise<std::error_code> promise, std::error_code ec) {"
        },
        {
          "name": "asyncCompleteionCallback",
          "line": 67,
          "signature": "static void asyncCompleteionCallback(const INode::Callback& callback, BlockchainExplorer::AsyncContextCounter& asyncContextCounter, std::error_code ec) {"
        },
        {
          "name": "counterHolder",
          "line": 68,
          "signature": "ContextCounterHolder counterHolder(asyncContextCounter);"
        },
        {
          "name": "reset",
          "line": 133,
          "signature": "void reset() {"
        },
        {
          "name": "getTransactions",
          "line": 464,
          "signature": "return getTransactions(newTransactionsHashes, newTransactions);"
        }
      ],
      "constants": []
    },
    "src/BlockchainExplorer/BlockchainExplorer.h": {
      "path": "src/BlockchainExplorer/BlockchainExplorer.h",
      "size": 4114,
      "lines": 118,
      "hash": "3a41e3203c8cca73",
      "functions": [
        {
          "name": "poolUpdateEndHandler",
          "line": 76,
          "signature": "void poolUpdateEndHandler();"
        },
        {
          "name": "beginUpdate",
          "line": 82,
          "signature": "bool beginUpdate();"
        },
        {
          "name": "endUpdate",
          "line": 83,
          "signature": "bool endUpdate();"
        }
      ],
      "constants": []
    },
    "src/BlockchainExplorer/BlockchainExplorerDataBuilder.cpp": {
      "path": "src/BlockchainExplorer/BlockchainExplorerDataBuilder.cpp",
      "size": 13514,
      "lines": 347,
      "hash": "7bebee1a338909e8",
      "functions": [
        {
          "name": "getPaymentIdFromTransactionExtraNonce",
          "line": 57,
          "signature": "return getPaymentIdFromTransactionExtraNonce(extraNonce.nonce, paymentId);"
        }
      ],
      "constants": []
    },
    "src/BlockchainExplorer/BlockchainExplorerDataBuilder.h": {
      "path": "src/BlockchainExplorer/BlockchainExplorerDataBuilder.h",
      "size": 1996,
      "lines": 53,
      "hash": "014f87333d6c642b",
      "functions": [
        {
          "name": "fillBlockDetails",
          "line": 39,
          "signature": "bool fillBlockDetails(const Block& block, BlockDetails& blockDetails);"
        },
        {
          "name": "fillTransactionDetails",
          "line": 40,
          "signature": "bool fillTransactionDetails(const Transaction &tx, TransactionDetails& txRpcInfo, uint64_t timestamp = 0);"
        },
        {
          "name": "getPaymentId",
          "line": 42,
          "signature": "static bool getPaymentId(const Transaction& transaction, Crypto::Hash& paymentId);"
        },
        {
          "name": "getMixin",
          "line": 45,
          "signature": "bool getMixin(const Transaction& transaction, uint64_t& mixin);"
        },
        {
          "name": "fillTxExtra",
          "line": 46,
          "signature": "bool fillTxExtra(const std::vector<uint8_t>& rawExtra, TransactionExtraDetails& extraDetails);"
        },
        {
          "name": "median",
          "line": 47,
          "signature": "size_t median(std::vector<size_t>& v);"
        }
      ],
      "constants": []
    },
    "src/BlockchainExplorer/BlockchainExplorerErrors.cpp": {
      "path": "src/BlockchainExplorer/BlockchainExplorerErrors.cpp",
      "size": 945,
      "lines": 27,
      "hash": "081fb26e07f7e965",
      "functions": [],
      "constants": []
    },
    "src/BlockchainExplorer/BlockchainExplorerErrors.h": {
      "path": "src/BlockchainExplorer/BlockchainExplorerErrors.h",
      "size": 2303,
      "lines": 66,
      "hash": "aa10a2cd639a39a0",
      "functions": [],
      "constants": []
    },
    "src/Common/ArrayRef.h": {
      "path": "src/Common/ArrayRef.h",
      "size": 14003,
      "lines": 443,
      "hash": "763581eaf699fa73",
      "functions": [
        {
          "name": "ArrayRef",
          "line": 366,
          "signature": "return ArrayRef(data, headSize);"
        },
        {
          "name": "ArrayRef",
          "line": 382,
          "signature": "return ArrayRef(data + headSize, size - headSize);"
        },
        {
          "name": "ArrayRef",
          "line": 390,
          "signature": "return ArrayRef(data, size - tailSize);"
        },
        {
          "name": "ArrayRef",
          "line": 398,
          "signature": "return ArrayRef(data + startIndex, endIndex - startIndex);"
        },
        {
          "name": "ArrayRef",
          "line": 406,
          "signature": "return ArrayRef(data + startIndex, sliceSize);"
        }
      ],
      "constants": []
    },
    "src/Common/ArrayView.h": {
      "path": "src/Common/ArrayView.h",
      "size": 13546,
      "lines": 423,
      "hash": "522375ec642fb506",
      "functions": [
        {
          "name": "ArrayView",
          "line": 370,
          "signature": "return ArrayView(data, headSize);"
        },
        {
          "name": "ArrayView",
          "line": 386,
          "signature": "return ArrayView(data + headSize, size - headSize);"
        },
        {
          "name": "ArrayView",
          "line": 394,
          "signature": "return ArrayView(data, size - tailSize);"
        },
        {
          "name": "ArrayView",
          "line": 402,
          "signature": "return ArrayView(data + startIndex, endIndex - startIndex);"
        },
        {
          "name": "ArrayView",
          "line": 410,
          "signature": "return ArrayView(data + startIndex, sliceSize);"
        }
      ],
      "constants": []
    },
    "src/Common/Base58.cpp": {
      "path": "src/Common/Base58.cpp",
      "size": 8436,
      "lines": 259,
      "hash": "0aaaaaa35986a145",
      "functions": [
        {
          "name": "encode",
          "line": 233,
          "signature": "return encode(buf);"
        }
      ],
      "constants": [
        {
          "name": "alphabet_size",
          "line": 35,
          "value": "sizeof(alphabet) - 1"
        },
        {
          "name": "full_block_size",
          "line": 37,
          "value": "sizeof(encoded_block_sizes) / sizeof(encoded_block_sizes[0]) - 1"
        },
        {
          "name": "full_encoded_block_size",
          "line": 38,
          "value": "encoded_block_sizes[full_block_size]"
        },
        {
          "name": "addr_checksum_size",
          "line": 39,
          "value": "4"
        }
      ]
    },
    "src/Common/Base58.h": {
      "path": "src/Common/Base58.h",
      "size": 1205,
      "lines": 34,
      "hash": "dd03f0fd76d7d715",
      "functions": [
        {
          "name": "decode",
          "line": 28,
          "signature": "bool decode(const std::string& enc, std::string& data);"
        },
        {
          "name": "decode_addr",
          "line": 31,
          "signature": "bool decode_addr(std::string addr, uint64_t& tag, std::string& data);"
        }
      ],
      "constants": []
    },
    "src/Common/Base64.cpp": {
      "path": "src/Common/Base64.cpp",
      "size": 1925,
      "lines": 53,
      "hash": "f270a895a36afda5",
      "functions": [],
      "constants": [
        {
          "name": "resultSize",
          "line": 26,
          "value": "4 * ((data.size() + 2) / 3)"
        }
      ]
    },
    "src/Common/Base64.h": {
      "path": "src/Common/Base64.h",
      "size": 1002,
      "lines": 30,
      "hash": "98c950c3d48734db",
      "functions": [],
      "constants": []
    },
    "src/Common/BinaryArray.hpp": {
      "path": "src/Common/BinaryArray.hpp",
      "size": 1486,
      "lines": 45,
      "hash": "d838a83e2285477b",
      "functions": [],
      "constants": []
    },
    "src/Common/BlockingQueue.cpp": {
      "path": "src/Common/BlockingQueue.cpp",
      "size": 929,
      "lines": 23,
      "hash": "d9ca64d3cdddb533",
      "functions": [],
      "constants": []
    },
    "src/Common/BlockingQueue.h": {
      "path": "src/Common/BlockingQueue.h",
      "size": 2954,
      "lines": 128,
      "hash": "48d0ef42cc6d90d2",
      "functions": [
        {
          "name": "push",
          "line": 36,
          "signature": "bool push(TT&& v) {"
        },
        {
          "name": "pop",
          "line": 52,
          "signature": "bool pop(T& v) {"
        },
        {
          "name": "close",
          "line": 75,
          "signature": "void close(bool wait = false) {"
        },
        {
          "name": "size",
          "line": 88,
          "signature": "size_t size() {"
        },
        {
          "name": "close",
          "line": 115,
          "signature": "void close() {"
        }
      ],
      "constants": []
    },
    "src/Common/CommandLine.cpp": {
      "path": "src/Common/CommandLine.cpp",
      "size": 1156,
      "lines": 26,
      "hash": "86e41dd26359d20f",
      "functions": [],
      "constants": []
    },
    "src/Common/CommandLine.h": {
      "path": "src/Common/CommandLine.h",
      "size": 5792,
      "lines": 190,
      "hash": "deddf5a4cc0f45b3",
      "functions": [
        {
          "name": "parser",
          "line": 149,
          "signature": "return parser();"
        }
      ],
      "constants": []
    },
    "src/Common/ConsoleHandler.cpp": {
      "path": "src/Common/ConsoleHandler.cpp",
      "size": 6093,
      "lines": 277,
      "hash": "b76dc11a6e971923",
      "functions": [],
      "constants": []
    },
    "src/Common/ConsoleHandler.h": {
      "path": "src/Common/ConsoleHandler.h",
      "size": 2286,
      "lines": 87,
      "hash": "9e9b5af5c1912b7e",
      "functions": [
        {
          "name": "start",
          "line": 39,
          "signature": "void start();"
        },
        {
          "name": "getline",
          "line": 40,
          "signature": "bool getline(std::string& line);"
        },
        {
          "name": "stop",
          "line": 41,
          "signature": "void stop();"
        },
        {
          "name": "consoleThread",
          "line": 46,
          "signature": "void consoleThread();"
        },
        {
          "name": "waitInput",
          "line": 47,
          "signature": "bool waitInput();"
        },
        {
          "name": "setHandler",
          "line": 63,
          "signature": "void setHandler(const std::string& command, const ConsoleCommandHandler& handler, const std::string& usage = \"\");"
        },
        {
          "name": "requestStop",
          "line": 64,
          "signature": "void requestStop();"
        },
        {
          "name": "runCommand",
          "line": 65,
          "signature": "bool runCommand(const std::vector<std::string>& cmdAndArgs);"
        },
        {
          "name": "start",
          "line": 67,
          "signature": "void start(bool startThread = true, const std::string& prompt = \"\", Console::Color promptColor = Console::Color::Default);"
        },
        {
          "name": "stop",
          "line": 68,
          "signature": "void stop();"
        },
        {
          "name": "wait",
          "line": 69,
          "signature": "void wait();"
        },
        {
          "name": "handleCommand",
          "line": 75,
          "signature": "virtual void handleCommand(const std::string& cmd);"
        },
        {
          "name": "handlerThread",
          "line": 77,
          "signature": "void handlerThread();"
        }
      ],
      "constants": []
    },
    "src/Common/ConsoleTools.cpp": {
      "path": "src/Common/ConsoleTools.cpp",
      "size": 2681,
      "lines": 105,
      "hash": "bf1d7108ce8cc7b0",
      "functions": [
        {
          "name": "isConsoleTty",
          "line": 32,
          "signature": "bool isConsoleTty() {"
        },
        {
          "name": "setTextColor",
          "line": 41,
          "signature": "void setTextColor(Color color) {"
        }
      ],
      "constants": []
    },
    "src/Common/ConsoleTools.h": {
      "path": "src/Common/ConsoleTools.h",
      "size": 1196,
      "lines": 48,
      "hash": "804aac139caa24c5",
      "functions": [
        {
          "name": "setTextColor",
          "line": 44,
          "signature": "void setTextColor(Color color);"
        },
        {
          "name": "isConsoleTty",
          "line": 45,
          "signature": "bool isConsoleTty();"
        }
      ],
      "constants": []
    },
    "src/Common/DnsTools.cpp": {
      "path": "src/Common/DnsTools.cpp",
      "size": 3324,
      "lines": 136,
      "hash": "1cce009912b9db70",
      "functions": [
        {
          "name": "fetch_dns_txt",
          "line": 49,
          "signature": "bool fetch_dns_txt(const std::string domain, std::vector<std::string>&records) {"
        }
      ],
      "constants": []
    },
    "src/Common/DnsTools.h": {
      "path": "src/Common/DnsTools.h",
      "size": 795,
      "lines": 24,
      "hash": "ebcb81bd5c8d298b",
      "functions": [
        {
          "name": "fetch_dns_txt",
          "line": 22,
          "signature": "bool fetch_dns_txt(const std::string domain, std::vector<std::string>&records);"
        }
      ],
      "constants": []
    },
    "src/Common/FileMappedVector.cpp": {
      "path": "src/Common/FileMappedVector.cpp",
      "size": 932,
      "lines": 23,
      "hash": "258b9fa4176c4cd3",
      "functions": [],
      "constants": []
    },
    "src/Common/FileMappedVector.h": {
      "path": "src/Common/FileMappedVector.h",
      "size": 23603,
      "lines": 937,
      "hash": "6466dd5f7ec6deb0",
      "functions": [
        {
          "name": "const_iterator",
          "line": 102,
          "signature": "return const_iterator(m_fileMappedVector, m_index + n);"
        },
        {
          "name": "const_iterator",
          "line": 106,
          "signature": "return const_iterator(i.m_fileMappedVector, n + i.m_index);"
        },
        {
          "name": "const_iterator",
          "line": 115,
          "signature": "return const_iterator(m_fileMappedVector, m_index - n);"
        },
        {
          "name": "iterator",
          "line": 209,
          "signature": "return iterator(const_iterator::m_fileMappedVector, const_iterator::m_index + n);"
        },
        {
          "name": "iterator",
          "line": 213,
          "signature": "return iterator(i.m_fileMappedVector, n + i.m_index);"
        },
        {
          "name": "iterator",
          "line": 222,
          "signature": "return iterator(const_iterator::m_fileMappedVector, const_iterator::m_index - n);"
        },
        {
          "name": "open",
          "line": 239,
          "signature": "void open(const std::string& path, FileMappedVectorOpenMode mode = FileMappedVectorOpenMode::OPEN_OR_CREATE, uint64_t prefixSize = 0);"
        },
        {
          "name": "close",
          "line": 240,
          "signature": "void close();"
        },
        {
          "name": "close",
          "line": 241,
          "signature": "void close(std::error_code& ec);"
        },
        {
          "name": "reserve",
          "line": 247,
          "signature": "void reserve(uint64_t n);"
        },
        {
          "name": "shrink_to_fit",
          "line": 248,
          "signature": "void shrink_to_fit();"
        },
        {
          "name": "begin",
          "line": 251,
          "signature": "iterator begin();"
        },
        {
          "name": "end",
          "line": 254,
          "signature": "iterator end();"
        },
        {
          "name": "clear",
          "line": 268,
          "signature": "void clear();"
        },
        {
          "name": "erase",
          "line": 269,
          "signature": "iterator erase(const_iterator position);"
        },
        {
          "name": "erase",
          "line": 270,
          "signature": "iterator erase(const_iterator first, const_iterator last);"
        },
        {
          "name": "insert",
          "line": 271,
          "signature": "iterator insert(const_iterator position, const T& val);"
        },
        {
          "name": "insert",
          "line": 273,
          "signature": "iterator insert(const_iterator position, InputIterator first, InputIterator last);"
        },
        {
          "name": "pop_back",
          "line": 274,
          "signature": "void pop_back();"
        },
        {
          "name": "push_back",
          "line": 275,
          "signature": "void push_back(const T& val);"
        },
        {
          "name": "swap",
          "line": 276,
          "signature": "void swap(FileMappedVector& other);"
        },
        {
          "name": "setAutoFlush",
          "line": 279,
          "signature": "void setAutoFlush(bool autoFlush);"
        },
        {
          "name": "flush",
          "line": 281,
          "signature": "void flush();"
        },
        {
          "name": "resizePrefix",
          "line": 286,
          "signature": "void resizePrefix(uint64_t newPrefixSize);"
        },
        {
          "name": "resizeSuffix",
          "line": 291,
          "signature": "void resizeSuffix(uint64_t newSuffixSize);"
        },
        {
          "name": "rename",
          "line": 293,
          "signature": "void rename(const std::string& newPath, std::error_code& ec);"
        },
        {
          "name": "rename",
          "line": 294,
          "signature": "void rename(const std::string& newPath);"
        },
        {
          "name": "atomicUpdate",
          "line": 297,
          "signature": "void atomicUpdate(F&& func);"
        },
        {
          "name": "atomicUpdate",
          "line": 308,
          "signature": "void atomicUpdate(uint64_t newSize, uint64_t newCapacity, uint64_t newPrefixSize, uint64_t newSuffixSize, F&& func);"
        },
        {
          "name": "atomicUpdate0",
          "line": 310,
          "signature": "void atomicUpdate0(uint64_t newCapacity, uint64_t newPrefixSize, uint64_t newSuffixSize, F&& func);"
        },
        {
          "name": "open",
          "line": 312,
          "signature": "void open(const std::string& path, uint64_t prefixSize);"
        },
        {
          "name": "create",
          "line": 313,
          "signature": "void create(const std::string& path, uint64_t initialCapacity, uint64_t prefixSize, uint64_t suffixSize);"
        },
        {
          "name": "vectorDataSize",
          "line": 326,
          "signature": "uint64_t vectorDataSize();"
        },
        {
          "name": "nextCapacity",
          "line": 328,
          "signature": "uint64_t nextCapacity();"
        },
        {
          "name": "flushElement",
          "line": 330,
          "signature": "void flushElement(uint64_t index);"
        },
        {
          "name": "flushSize",
          "line": 331,
          "signature": "void flushSize();"
        },
        {
          "name": "iterator",
          "line": 455,
          "signature": "return iterator(this, 0);"
        },
        {
          "name": "const_iterator",
          "line": 462,
          "signature": "return const_iterator(this, 0);"
        },
        {
          "name": "const_iterator",
          "line": 469,
          "signature": "return const_iterator(this, 0);"
        },
        {
          "name": "vectorDataPtr",
          "line": 561,
          "signature": "return vectorDataPtr();"
        },
        {
          "name": "vectorDataPtr",
          "line": 568,
          "signature": "return vectorDataPtr();"
        },
        {
          "name": "insert",
          "line": 604,
          "signature": "return insert(position, &val, &val + 1);"
        },
        {
          "name": "prefixPtr",
          "line": 684,
          "signature": "return prefixPtr();"
        },
        {
          "name": "prefixPtr",
          "line": 691,
          "signature": "return prefixPtr();"
        },
        {
          "name": "suffixPtr",
          "line": 716,
          "signature": "return suffixPtr();"
        },
        {
          "name": "suffixPtr",
          "line": 723,
          "signature": "return suffixPtr();"
        }
      ],
      "constants": [
        {
          "name": "initialCapacity",
          "line": 351,
          "value": "10"
        }
      ]
    },
    "src/Common/IInputStream.cpp": {
      "path": "src/Common/IInputStream.cpp",
      "size": 874,
      "lines": 19,
      "hash": "10e208b53dd456d6",
      "functions": [],
      "constants": []
    },
    "src/Common/IInputStream.h": {
      "path": "src/Common/IInputStream.h",
      "size": 1023,
      "lines": 31,
      "hash": "43ba71818c376c9d",
      "functions": [],
      "constants": []
    },
    "src/Common/IOutputStream.cpp": {
      "path": "src/Common/IOutputStream.cpp",
      "size": 875,
      "lines": 19,
      "hash": "55162bf5aaefd982",
      "functions": [],
      "constants": []
    },
    "src/Common/IOutputStream.h": {
      "path": "src/Common/IOutputStream.h",
      "size": 1032,
      "lines": 31,
      "hash": "7a7503e3ea295c8b",
      "functions": [],
      "constants": []
    },
    "src/Common/JsonValue.cpp": {
      "path": "src/Common/JsonValue.cpp",
      "size": 21314,
      "lines": 955,
      "hash": "081cba10b7055047",
      "functions": [
        {
          "name": "readChar",
          "line": 666,
          "signature": "char readChar(std::istream& in) {"
        },
        {
          "name": "readNonWsChar",
          "line": 675,
          "signature": "char readNonWsChar(std::istream& in) {"
        }
      ],
      "constants": []
    },
    "src/Common/JsonValue.h": {
      "path": "src/Common/JsonValue.h",
      "size": 4627,
      "lines": 165,
      "hash": "081d333f321544e6",
      "functions": [
        {
          "name": "JsonValue",
          "line": 57,
          "signature": "explicit JsonValue(Bool value);"
        },
        {
          "name": "erase",
          "line": 133,
          "signature": "size_t erase(const Key& key);"
        },
        {
          "name": "fromString",
          "line": 135,
          "signature": "static JsonValue fromString(const std::string& source);"
        },
        {
          "name": "fromStringWithWhiteSpaces",
          "line": 136,
          "signature": "static JsonValue fromStringWithWhiteSpaces(const std::string& source);"
        },
        {
          "name": "destructValue",
          "line": 153,
          "signature": "void destructValue();"
        },
        {
          "name": "readArray",
          "line": 155,
          "signature": "void readArray(std::istream& in);"
        },
        {
          "name": "readTrue",
          "line": 156,
          "signature": "void readTrue(std::istream& in);"
        },
        {
          "name": "readFalse",
          "line": 157,
          "signature": "void readFalse(std::istream& in);"
        },
        {
          "name": "readNull",
          "line": 158,
          "signature": "void readNull(std::istream& in);"
        },
        {
          "name": "readNumber",
          "line": 159,
          "signature": "void readNumber(std::istream& in, char c);"
        },
        {
          "name": "readObject",
          "line": 160,
          "signature": "void readObject(std::istream& in);"
        },
        {
          "name": "readString",
          "line": 161,
          "signature": "void readString(std::istream& in);"
        }
      ],
      "constants": []
    },
    "src/Common/Math.cpp": {
      "path": "src/Common/Math.cpp",
      "size": 914,
      "lines": 23,
      "hash": "5187663d72b9e5ae",
      "functions": [],
      "constants": []
    },
    "src/Common/Math.h": {
      "path": "src/Common/Math.h",
      "size": 1280,
      "lines": 44,
      "hash": "89f6b2b674310bf5",
      "functions": [
        {
          "name": "medianValue",
          "line": 26,
          "signature": "T medianValue(std::vector<T> &v) {"
        },
        {
          "name": "T",
          "line": 28,
          "signature": "return T();"
        }
      ],
      "constants": []
    },
    "src/Common/MemoryInputStream.cpp": {
      "path": "src/Common/MemoryInputStream.cpp",
      "size": 1564,
      "lines": 49,
      "hash": "6b4c8762acca7c93",
      "functions": [],
      "constants": []
    },
    "src/Common/MemoryInputStream.h": {
      "path": "src/Common/MemoryInputStream.h",
      "size": 1267,
      "lines": 38,
      "hash": "f6ef7989fcaae067",
      "functions": [],
      "constants": []
    },
    "src/Common/ObserverManager.h": {
      "path": "src/Common/ObserverManager.h",
      "size": 4902,
      "lines": 171,
      "hash": "9c7fe107ed1b8c80",
      "functions": [
        {
          "name": "add",
          "line": 29,
          "signature": "bool add(T* observer) {"
        },
        {
          "name": "remove",
          "line": 40,
          "signature": "bool remove(T* observer) {"
        },
        {
          "name": "clear",
          "line": 52,
          "signature": "void clear() {"
        },
        {
          "name": "notify",
          "line": 59,
          "signature": "void notify(F notification) {"
        },
        {
          "name": "notify",
          "line": 72,
          "signature": "void notify(F notification, const Arg0& arg0) {"
        },
        {
          "name": "notify",
          "line": 85,
          "signature": "void notify(F notification, const Arg0& arg0, const Arg1& arg1) {"
        },
        {
          "name": "notify",
          "line": 98,
          "signature": "void notify(F notification, const Arg0& arg0, const Arg1& arg1, const Arg2& arg2) {"
        },
        {
          "name": "notify",
          "line": 111,
          "signature": "void notify(F notification, const Arg0& arg0, const Arg1& arg1, const Arg2& arg2, const Arg3& arg3) {"
        },
        {
          "name": "notify",
          "line": 124,
          "signature": "void notify(F notification, const Arg0& arg0, const Arg1& arg1, const Arg2& arg2, const Arg3& arg3, const Arg4& arg4) {"
        },
        {
          "name": "notify",
          "line": 137,
          "signature": "void notify(F notification, const Arg0& arg0, const Arg1& arg1, const Arg2& arg2, const Arg3& arg3, const Arg4& arg4, const Arg5& arg5) {"
        },
        {
          "name": "notify",
          "line": 152,
          "signature": "void notify(F notification, Args... args) {"
        }
      ],
      "constants": []
    },
    "src/Common/PathTools.cpp": {
      "path": "src/Common/PathTools.cpp",
      "size": 3111,
      "lines": 112,
      "hash": "035bf0ae3d8b5044",
      "functions": [
        {
          "name": "SplitPath",
          "line": 74,
          "signature": "void SplitPath(const std::string& path, std::string& directory, std::string& filename) {"
        },
        {
          "name": "HasParentPath",
          "line": 106,
          "signature": "bool HasParentPath(const std::string& path) {"
        }
      ],
      "constants": [
        {
          "name": "GENERIC_PATH_SEPARATOR",
          "line": 23,
          "value": "'/'"
        },
        {
          "name": "NATIVE_PATH_SEPARATOR",
          "line": 26,
          "value": "'\\\\'"
        },
        {
          "name": "NATIVE_PATH_SEPARATOR",
          "line": 28,
          "value": "'/'"
        }
      ]
    },
    "src/Common/PathTools.h": {
      "path": "src/Common/PathTools.h",
      "size": 1480,
      "lines": 37,
      "hash": "1cbd8039bbc73661",
      "functions": [
        {
          "name": "SplitPath",
          "line": 28,
          "signature": "void SplitPath(const std::string& path, std::string& directory, std::string& filename);"
        },
        {
          "name": "HasParentPath",
          "line": 34,
          "signature": "bool HasParentPath(const std::string& path);"
        }
      ],
      "constants": []
    },
    "src/Common/ScopeExit.cpp": {
      "path": "src/Common/ScopeExit.cpp",
      "size": 1132,
      "lines": 38,
      "hash": "c9348f438ff63a4d",
      "functions": [],
      "constants": []
    },
    "src/Common/ScopeExit.h": {
      "path": "src/Common/ScopeExit.h",
      "size": 1255,
      "lines": 42,
      "hash": "a60acb04baf6e6b7",
      "functions": [
        {
          "name": "cancel",
          "line": 34,
          "signature": "void cancel();"
        }
      ],
      "constants": []
    },
    "src/Common/ShuffleGenerator.h": {
      "path": "src/Common/ShuffleGenerator.h",
      "size": 1831,
      "lines": 70,
      "hash": "8ee3c6c56898f411",
      "functions": [
        {
          "name": "reset",
          "line": 58,
          "signature": "void reset() {"
        }
      ],
      "constants": []
    },
    "src/Common/SignalHandler.cpp": {
      "path": "src/Common/SignalHandler.cpp",
      "size": 2401,
      "lines": 103,
      "hash": "1f405803cb8d8f69",
      "functions": [
        {
          "name": "handleSignal",
          "line": 37,
          "signature": "void handleSignal() {"
        },
        {
          "name": "winHandler",
          "line": 48,
          "signature": "BOOL WINAPI winHandler(DWORD type) {"
        },
        {
          "name": "posixHandler",
          "line": 61,
          "signature": "void posixHandler(int /*type*/) {"
        }
      ],
      "constants": []
    },
    "src/Common/SignalHandler.h": {
      "path": "src/Common/SignalHandler.h",
      "size": 1004,
      "lines": 30,
      "hash": "c5bac5568e2c1eb2",
      "functions": [],
      "constants": []
    },
    "src/Common/StdInputStream.cpp": {
      "path": "src/Common/StdInputStream.cpp",
      "size": 1089,
      "lines": 31,
      "hash": "8612749891daef0b",
      "functions": [],
      "constants": []
    },
    "src/Common/StdInputStream.h": {
      "path": "src/Common/StdInputStream.h",
      "size": 1167,
      "lines": 36,
      "hash": "8f3c3e9f66b92daa",
      "functions": [],
      "constants": []
    },
    "src/Common/StdOutputStream.cpp": {
      "path": "src/Common/StdOutputStream.cpp",
      "size": 1142,
      "lines": 35,
      "hash": "32901be9f15da7a2",
      "functions": [],
      "constants": []
    },
    "src/Common/StdOutputStream.h": {
      "path": "src/Common/StdOutputStream.h",
      "size": 1182,
      "lines": 36,
      "hash": "ce763ee68c5b927b",
      "functions": [],
      "constants": []
    },
    "src/Common/StreamTools.cpp": {
      "path": "src/Common/StreamTools.cpp",
      "size": 6874,
      "lines": 251,
      "hash": "85536720688f22a2",
      "functions": [
        {
          "name": "read",
          "line": 25,
          "signature": "void read(IInputStream& in, void* data, size_t size) {"
        },
        {
          "name": "read",
          "line": 37,
          "signature": "void read(IInputStream& in, int8_t& value) {"
        },
        {
          "name": "read",
          "line": 41,
          "signature": "void read(IInputStream& in, int16_t& value) {"
        },
        {
          "name": "read",
          "line": 46,
          "signature": "void read(IInputStream& in, int32_t& value) {"
        },
        {
          "name": "read",
          "line": 51,
          "signature": "void read(IInputStream& in, int64_t& value) {"
        },
        {
          "name": "read",
          "line": 56,
          "signature": "void read(IInputStream& in, uint8_t& value) {"
        },
        {
          "name": "read",
          "line": 60,
          "signature": "void read(IInputStream& in, uint16_t& value) {"
        },
        {
          "name": "read",
          "line": 65,
          "signature": "void read(IInputStream& in, uint32_t& value) {"
        },
        {
          "name": "read",
          "line": 70,
          "signature": "void read(IInputStream& in, uint64_t& value) {"
        },
        {
          "name": "read",
          "line": 75,
          "signature": "void read(IInputStream& in, std::vector<uint8_t>& data, size_t size) {"
        },
        {
          "name": "read",
          "line": 80,
          "signature": "void read(IInputStream& in, std::string& data, size_t size) {"
        },
        {
          "name": "readVarint",
          "line": 86,
          "signature": "void readVarint(IInputStream& in, uint8_t& value) {"
        },
        {
          "name": "readVarint",
          "line": 108,
          "signature": "void readVarint(IInputStream& in, uint16_t& value) {"
        },
        {
          "name": "readVarint",
          "line": 130,
          "signature": "void readVarint(IInputStream& in, uint32_t& value) {"
        },
        {
          "name": "readVarint",
          "line": 152,
          "signature": "void readVarint(IInputStream& in, uint64_t& value) {"
        },
        {
          "name": "write",
          "line": 174,
          "signature": "void write(IOutputStream& out, const void* data, size_t size) {"
        },
        {
          "name": "write",
          "line": 186,
          "signature": "void write(IOutputStream& out, int8_t value) {"
        },
        {
          "name": "write",
          "line": 190,
          "signature": "void write(IOutputStream& out, int16_t value) {"
        },
        {
          "name": "write",
          "line": 195,
          "signature": "void write(IOutputStream& out, int32_t value) {"
        },
        {
          "name": "write",
          "line": 200,
          "signature": "void write(IOutputStream& out, int64_t value) {"
        },
        {
          "name": "write",
          "line": 205,
          "signature": "void write(IOutputStream& out, uint8_t value) {"
        },
        {
          "name": "write",
          "line": 209,
          "signature": "void write(IOutputStream& out, uint16_t value) {"
        },
        {
          "name": "write",
          "line": 214,
          "signature": "void write(IOutputStream& out, uint32_t value) {"
        },
        {
          "name": "write",
          "line": 219,
          "signature": "void write(IOutputStream& out, uint64_t value) {"
        },
        {
          "name": "write",
          "line": 224,
          "signature": "void write(IOutputStream& out, const std::vector<uint8_t>& data) {"
        },
        {
          "name": "write",
          "line": 228,
          "signature": "void write(IOutputStream& out, const std::string& data) {"
        },
        {
          "name": "writeVarint",
          "line": 232,
          "signature": "void writeVarint(IOutputStream& out, uint32_t value) {"
        },
        {
          "name": "writeVarint",
          "line": 241,
          "signature": "void writeVarint(IOutputStream& out, uint64_t value) {"
        }
      ],
      "constants": []
    },
    "src/Common/StreamTools.h": {
      "path": "src/Common/StreamTools.h",
      "size": 2678,
      "lines": 76,
      "hash": "daaa5741d8e50309",
      "functions": [
        {
          "name": "read",
          "line": 28,
          "signature": "void read(IInputStream& in, void* data, size_t size);"
        },
        {
          "name": "read",
          "line": 29,
          "signature": "void read(IInputStream& in, int8_t& value);"
        },
        {
          "name": "read",
          "line": 30,
          "signature": "void read(IInputStream& in, int16_t& value);"
        },
        {
          "name": "read",
          "line": 31,
          "signature": "void read(IInputStream& in, int32_t& value);"
        },
        {
          "name": "read",
          "line": 32,
          "signature": "void read(IInputStream& in, int64_t& value);"
        },
        {
          "name": "read",
          "line": 33,
          "signature": "void read(IInputStream& in, uint8_t& value);"
        },
        {
          "name": "read",
          "line": 34,
          "signature": "void read(IInputStream& in, uint16_t& value);"
        },
        {
          "name": "read",
          "line": 35,
          "signature": "void read(IInputStream& in, uint32_t& value);"
        },
        {
          "name": "read",
          "line": 36,
          "signature": "void read(IInputStream& in, uint64_t& value);"
        },
        {
          "name": "read",
          "line": 37,
          "signature": "void read(IInputStream& in, std::vector<uint8_t>& data, size_t size);"
        },
        {
          "name": "read",
          "line": 38,
          "signature": "void read(IInputStream& in, std::string& data, size_t size);"
        },
        {
          "name": "readVarint",
          "line": 39,
          "signature": "void readVarint(IInputStream& in, uint8_t& value);"
        },
        {
          "name": "readVarint",
          "line": 40,
          "signature": "void readVarint(IInputStream& in, uint16_t& value);"
        },
        {
          "name": "readVarint",
          "line": 41,
          "signature": "void readVarint(IInputStream& in, uint32_t& value);"
        },
        {
          "name": "readVarint",
          "line": 42,
          "signature": "void readVarint(IInputStream& in, uint64_t& value);"
        },
        {
          "name": "write",
          "line": 44,
          "signature": "void write(IOutputStream& out, const void* data, size_t size);"
        },
        {
          "name": "write",
          "line": 45,
          "signature": "void write(IOutputStream& out, int8_t value);"
        },
        {
          "name": "write",
          "line": 46,
          "signature": "void write(IOutputStream& out, int16_t value);"
        },
        {
          "name": "write",
          "line": 47,
          "signature": "void write(IOutputStream& out, int32_t value);"
        },
        {
          "name": "write",
          "line": 48,
          "signature": "void write(IOutputStream& out, int64_t value);"
        },
        {
          "name": "write",
          "line": 49,
          "signature": "void write(IOutputStream& out, uint8_t value);"
        },
        {
          "name": "write",
          "line": 50,
          "signature": "void write(IOutputStream& out, uint16_t value);"
        },
        {
          "name": "write",
          "line": 51,
          "signature": "void write(IOutputStream& out, uint32_t value);"
        },
        {
          "name": "write",
          "line": 52,
          "signature": "void write(IOutputStream& out, uint64_t value);"
        },
        {
          "name": "write",
          "line": 53,
          "signature": "void write(IOutputStream& out, const std::vector<uint8_t>& data);"
        },
        {
          "name": "write",
          "line": 54,
          "signature": "void write(IOutputStream& out, const std::string& data);"
        },
        {
          "name": "writeVarint",
          "line": 55,
          "signature": "void writeVarint(IOutputStream& out, uint64_t value);"
        }
      ],
      "constants": []
    },
    "src/Common/StringBuffer.h": {
      "path": "src/Common/StringBuffer.h",
      "size": 15859,
      "lines": 554,
      "hash": "a70de3261c64c221",
      "functions": [
        {
          "name": "StringView",
          "line": 96,
          "signature": "return StringView(data, size);"
        },
        {
          "name": "StringView",
          "line": 391,
          "signature": "return StringView(data, headSize);"
        },
        {
          "name": "StringView",
          "line": 405,
          "signature": "return StringView(data + headSize, size - headSize);"
        },
        {
          "name": "StringView",
          "line": 412,
          "signature": "return StringView(data, size - tailSize);"
        },
        {
          "name": "StringView",
          "line": 419,
          "signature": "return StringView(data + startIndex, endIndex - startIndex);"
        },
        {
          "name": "StringView",
          "line": 426,
          "signature": "return StringView(data + startIndex, sliceSize);"
        }
      ],
      "constants": []
    },
    "src/Common/StringInputStream.cpp": {
      "path": "src/Common/StringInputStream.cpp",
      "size": 1218,
      "lines": 37,
      "hash": "15168062d3a0281d",
      "functions": [],
      "constants": []
    },
    "src/Common/StringInputStream.h": {
      "path": "src/Common/StringInputStream.h",
      "size": 1138,
      "lines": 36,
      "hash": "eb2c99bf3fcfefb7",
      "functions": [],
      "constants": []
    },
    "src/Common/StringOutputStream.cpp": {
      "path": "src/Common/StringOutputStream.cpp",
      "size": 1116,
      "lines": 31,
      "hash": "9873ae82b83b6758",
      "functions": [],
      "constants": []
    },
    "src/Common/StringOutputStream.h": {
      "path": "src/Common/StringOutputStream.h",
      "size": 1122,
      "lines": 35,
      "hash": "52e4151120d59f44",
      "functions": [],
      "constants": []
    },
    "src/Common/StringTools.cpp": {
      "path": "src/Common/StringTools.cpp",
      "size": 10849,
      "lines": 370,
      "hash": "54b6418d801b4ecc",
      "functions": [
        {
          "name": "fromHex",
          "line": 60,
          "signature": "uint8_t fromHex(char character) {"
        },
        {
          "name": "fromHex",
          "line": 69,
          "signature": "bool fromHex(char character, uint8_t& value) {"
        },
        {
          "name": "fromHex",
          "line": 78,
          "signature": "size_t fromHex(const std::string& text, void* data, size_t bufferSize) {"
        },
        {
          "name": "fromHex",
          "line": 94,
          "signature": "bool fromHex(const std::string& text, void* data, size_t bufferSize, size_t& size) {"
        },
        {
          "name": "fromHex",
          "line": 134,
          "signature": "bool fromHex(const std::string& text, std::vector<uint8_t>& data) {"
        },
        {
          "name": "toHex",
          "line": 166,
          "signature": "void toHex(const void* data, size_t size, std::string& text) {"
        },
        {
          "name": "toHex",
          "line": 183,
          "signature": "void toHex(const std::vector<uint8_t>& data, std::string& text) {"
        },
        {
          "name": "is_base64",
          "line": 221,
          "signature": "bool is_base64(unsigned char c) {"
        },
        {
          "name": "loadFileToString",
          "line": 269,
          "signature": "bool loadFileToString(const std::string& filepath, std::string& buf) {"
        },
        {
          "name": "saveStringToFile",
          "line": 289,
          "signature": "bool saveStringToFile(const std::string& filepath, const std::string& buf) {"
        },
        {
          "name": "stringToIpAddress",
          "line": 316,
          "signature": "uint32_t stringToIpAddress(std::string addr) {"
        },
        {
          "name": "parseIpAddressAndPort",
          "line": 331,
          "signature": "bool parseIpAddressAndPort(uint32_t& ip, uint32_t& port, const std::string& addr) {"
        }
      ],
      "constants": []
    },
    "src/Common/StringTools.h": {
      "path": "src/Common/StringTools.h",
      "size": 4816,
      "lines": 121,
      "hash": "91e7c499a1d8ea20",
      "functions": [
        {
          "name": "fromHex",
          "line": 31,
          "signature": "uint8_t fromHex(char character); // Returns value of hex 'character', throws on error"
        },
        {
          "name": "fromHex",
          "line": 32,
          "signature": "bool fromHex(char character, uint8_t& value); // Assigns value of hex 'character' to 'value', returns false on error, does not throw"
        },
        {
          "name": "fromHex",
          "line": 33,
          "signature": "size_t fromHex(const std::string& text, void* data, size_t bufferSize); // Assigns values of hex 'text' to buffer 'data' up to 'bufferSize', returns actual data size, throws on error"
        },
        {
          "name": "fromHex",
          "line": 34,
          "signature": "bool fromHex(const std::string& text, void* data, size_t bufferSize, size_t& size); // Assigns values of hex 'text' to buffer 'data' up to 'bufferSize', assigns actual data size to 'size', returns false on error, does not throw"
        },
        {
          "name": "fromHex",
          "line": 36,
          "signature": "bool fromHex(const std::string& text, std::vector<uint8_t>& data); // Appends values of hex 'text' to 'data', returns false on error, does not throw"
        },
        {
          "name": "podFromHex",
          "line": 39,
          "signature": "bool podFromHex(const std::string& text, T& val) {"
        },
        {
          "name": "toHex",
          "line": 45,
          "signature": "void toHex(const void* data, size_t size, std::string& text); // Appends hex representation of ('data', 'size') to 'text', does not throw"
        },
        {
          "name": "toHex",
          "line": 47,
          "signature": "void toHex(const std::vector<uint8_t>& data, std::string& text); // Appends hex representation of 'data' to 'text', does not throw"
        },
        {
          "name": "loadFileToString",
          "line": 108,
          "signature": "bool loadFileToString(const std::string& filepath, std::string& buf);"
        },
        {
          "name": "saveStringToFile",
          "line": 109,
          "signature": "bool saveStringToFile(const std::string& filepath, const std::string& buf);"
        },
        {
          "name": "stringToIpAddress",
          "line": 115,
          "signature": "uint32_t stringToIpAddress(std::string addr);"
        },
        {
          "name": "parseIpAddressAndPort",
          "line": 116,
          "signature": "bool parseIpAddressAndPort(uint32_t& ip, uint32_t& port, const std::string& addr);"
        }
      ],
      "constants": []
    },
    "src/Common/StringView.cpp": {
      "path": "src/Common/StringView.cpp",
      "size": 8497,
      "lines": 348,
      "hash": "eefce186ee6875f2",
      "functions": [
        {
          "name": "StringView",
          "line": 314,
          "signature": "return StringView(data, headSize);"
        },
        {
          "name": "StringView",
          "line": 326,
          "signature": "return StringView(data + headSize, size - headSize);"
        },
        {
          "name": "StringView",
          "line": 332,
          "signature": "return StringView(data, size - tailSize);"
        },
        {
          "name": "StringView",
          "line": 338,
          "signature": "return StringView(data + startIndex, endIndex - startIndex);"
        },
        {
          "name": "StringView",
          "line": 344,
          "signature": "return StringView(data + startIndex, sliceSize);"
        }
      ],
      "constants": []
    },
    "src/Common/StringView.h": {
      "path": "src/Common/StringView.h",
      "size": 8351,
      "lines": 205,
      "hash": "6f389a0fd0c6786a",
      "functions": [],
      "constants": []
    },
    "src/Common/Util.cpp": {
      "path": "src/Common/Util.cpp",
      "size": 12332,
      "lines": 368,
      "hash": "3faa2c4496abd93b",
      "functions": [
        {
          "name": "GetSystemInfo",
          "line": 66,
          "signature": "else GetSystemInfo(&si);"
        },
        {
          "name": "get_windows_version_display_string",
          "line": 277,
          "signature": "return get_windows_version_display_string();"
        },
        {
          "name": "get_nix_version_display_string",
          "line": 279,
          "signature": "return get_nix_version_display_string();"
        },
        {
          "name": "directoryExists",
          "line": 362,
          "signature": "bool directoryExists(const std::string& path) {"
        }
      ],
      "constants": [
        {
          "name": "BUFSIZE",
          "line": 41,
          "value": "10000"
        }
      ]
    },
    "src/Common/Util.h": {
      "path": "src/Common/Util.h",
      "size": 1223,
      "lines": 31,
      "hash": "41f7a42e12b2d1af",
      "functions": [
        {
          "name": "create_directories_if_necessary",
          "line": 27,
          "signature": "bool create_directories_if_necessary(const std::string& path);"
        },
        {
          "name": "directoryExists",
          "line": 29,
          "signature": "bool directoryExists(const std::string& path);"
        }
      ],
      "constants": []
    },
    "src/Common/Varint.h": {
      "path": "src/Common/Varint.h",
      "size": 2657,
      "lines": 76,
      "hash": "3acafd3b4dc09871",
      "functions": [
        {
          "name": "read_varint",
          "line": 72,
          "signature": "int read_varint(InputIt &&first, InputIt &&last, T &i) {"
        }
      ],
      "constants": []
    },
    "src/Common/VectorOutputStream.cpp": {
      "path": "src/Common/VectorOutputStream.cpp",
      "size": 1175,
      "lines": 31,
      "hash": "c086f3f005cf33c9",
      "functions": [],
      "constants": []
    },
    "src/Common/VectorOutputStream.h": {
      "path": "src/Common/VectorOutputStream.h",
      "size": 1228,
      "lines": 37,
      "hash": "b99858f46d7c31ef",
      "functions": [],
      "constants": []
    },
    "src/Common/int-util.h": {
      "path": "src/Common/int-util.h",
      "size": 7070,
      "lines": 223,
      "hash": "94894d3bc522f375",
      "functions": [
        {
          "name": "rol32",
          "line": 31,
          "signature": "static inline uint32_t rol32(uint32_t x, int r) {"
        },
        {
          "name": "_rotl",
          "line": 33,
          "signature": "return _rotl(x, r);"
        },
        {
          "name": "rol64",
          "line": 36,
          "signature": "static inline uint64_t rol64(uint64_t x, int r) {"
        },
        {
          "name": "_rotl64",
          "line": 37,
          "signature": "return _rotl64(x, r);"
        },
        {
          "name": "rol32",
          "line": 42,
          "signature": "static inline uint32_t rol32(uint32_t x, int r) {"
        },
        {
          "name": "rol64",
          "line": 46,
          "signature": "static inline uint64_t rol64(uint64_t x, int r) {"
        },
        {
          "name": "hi_dword",
          "line": 52,
          "signature": "static inline uint64_t hi_dword(uint64_t val) {"
        },
        {
          "name": "lo_dword",
          "line": 56,
          "signature": "static inline uint64_t lo_dword(uint64_t val) {"
        },
        {
          "name": "mul128",
          "line": 60,
          "signature": "static inline uint64_t mul128(uint64_t multiplier, uint64_t multiplicand, uint64_t* product_hi) {"
        },
        {
          "name": "div_with_reminder",
          "line": 86,
          "signature": "static inline uint64_t div_with_reminder(uint64_t dividend, uint32_t divisor, uint32_t* remainder) {"
        },
        {
          "name": "div128_32",
          "line": 93,
          "signature": "static inline uint32_t div128_32(uint64_t dividend_hi, uint64_t dividend_lo, uint32_t divisor, uint64_t* quotient_hi, uint64_t* quotient_lo) {"
        },
        {
          "name": "ident32",
          "line": 126,
          "signature": "static inline uint32_t ident32(uint32_t x) { return x; }"
        },
        {
          "name": "ident64",
          "line": 127,
          "signature": "static inline uint64_t ident64(uint64_t x) { return x; }"
        },
        {
          "name": "swap32",
          "line": 129,
          "signature": "static inline uint32_t swap32(uint32_t x) {"
        },
        {
          "name": "swap64",
          "line": 133,
          "signature": "static inline uint64_t swap64(uint64_t x) {"
        },
        {
          "name": "mem_inplace_ident",
          "line": 144,
          "signature": "static inline void mem_inplace_ident(void *mem UNUSED, size_t n UNUSED) { }"
        },
        {
          "name": "mem_inplace_swap32",
          "line": 147,
          "signature": "static inline void mem_inplace_swap32(void *mem, size_t n) {"
        },
        {
          "name": "mem_inplace_swap64",
          "line": 153,
          "signature": "static inline void mem_inplace_swap64(void *mem, size_t n) {"
        },
        {
          "name": "memcpy_ident32",
          "line": 160,
          "signature": "static inline void memcpy_ident32(void *dst, const void *src, size_t n) {"
        },
        {
          "name": "memcpy_ident64",
          "line": 163,
          "signature": "static inline void memcpy_ident64(void *dst, const void *src, size_t n) {"
        },
        {
          "name": "memcpy_swap32",
          "line": 167,
          "signature": "static inline void memcpy_swap32(void *dst, const void *src, size_t n) {"
        },
        {
          "name": "memcpy_swap64",
          "line": 173,
          "signature": "static inline void memcpy_swap64(void *dst, const void *src, size_t n) {"
        }
      ],
      "constants": [
        {
          "name": "inline",
          "line": 29,
          "value": "__inline"
        },
        {
          "name": "UNUSED",
          "line": 140,
          "value": "__attribute__((unused))"
        },
        {
          "name": "SWAP32LE",
          "line": 187,
          "value": "IDENT32"
        },
        {
          "name": "SWAP32BE",
          "line": 188,
          "value": "SWAP32"
        },
        {
          "name": "swap32le",
          "line": 189,
          "value": "ident32"
        },
        {
          "name": "swap32be",
          "line": 190,
          "value": "swap32"
        },
        {
          "name": "mem_inplace_swap32le",
          "line": 191,
          "value": "mem_inplace_ident"
        },
        {
          "name": "mem_inplace_swap32be",
          "line": 192,
          "value": "mem_inplace_swap32"
        },
        {
          "name": "memcpy_swap32le",
          "line": 193,
          "value": "memcpy_ident32"
        },
        {
          "name": "memcpy_swap32be",
          "line": 194,
          "value": "memcpy_swap32"
        },
        {
          "name": "SWAP64LE",
          "line": 195,
          "value": "IDENT64"
        },
        {
          "name": "SWAP64BE",
          "line": 196,
          "value": "SWAP64"
        },
        {
          "name": "swap64le",
          "line": 197,
          "value": "ident64"
        },
        {
          "name": "swap64be",
          "line": 198,
          "value": "swap64"
        },
        {
          "name": "mem_inplace_swap64le",
          "line": 199,
          "value": "mem_inplace_ident"
        },
        {
          "name": "mem_inplace_swap64be",
          "line": 200,
          "value": "mem_inplace_swap64"
        },
        {
          "name": "memcpy_swap64le",
          "line": 201,
          "value": "memcpy_ident64"
        },
        {
          "name": "memcpy_swap64be",
          "line": 202,
          "value": "memcpy_swap64"
        },
        {
          "name": "SWAP32BE",
          "line": 206,
          "value": "IDENT32"
        },
        {
          "name": "SWAP32LE",
          "line": 207,
          "value": "SWAP32"
        },
        {
          "name": "swap32be",
          "line": 208,
          "value": "ident32"
        },
        {
          "name": "swap32le",
          "line": 209,
          "value": "swap32"
        },
        {
          "name": "mem_inplace_swap32be",
          "line": 210,
          "value": "mem_inplace_ident"
        },
        {
          "name": "mem_inplace_swap32le",
          "line": 211,
          "value": "mem_inplace_swap32"
        },
        {
          "name": "memcpy_swap32be",
          "line": 212,
          "value": "memcpy_ident32"
        },
        {
          "name": "memcpy_swap32le",
          "line": 213,
          "value": "memcpy_swap32"
        },
        {
          "name": "SWAP64BE",
          "line": 214,
          "value": "IDENT64"
        },
        {
          "name": "SWAP64LE",
          "line": 215,
          "value": "SWAP64"
        },
        {
          "name": "swap64be",
          "line": 216,
          "value": "ident64"
        },
        {
          "name": "swap64le",
          "line": 217,
          "value": "swap64"
        },
        {
          "name": "mem_inplace_swap64be",
          "line": 218,
          "value": "mem_inplace_ident"
        },
        {
          "name": "mem_inplace_swap64le",
          "line": 219,
          "value": "mem_inplace_swap64"
        },
        {
          "name": "memcpy_swap64be",
          "line": 220,
          "value": "memcpy_ident64"
        },
        {
          "name": "memcpy_swap64le",
          "line": 221,
          "value": "memcpy_swap64"
        }
      ]
    },
    "src/Common/pod-class.h": {
      "path": "src/Common/pod-class.h",
      "size": 946,
      "lines": 25,
      "hash": "1af541e174984e3f",
      "functions": [],
      "constants": [
        {
          "name": "POD_CLASS",
          "line": 21,
          "value": "struct"
        },
        {
          "name": "POD_CLASS",
          "line": 23,
          "value": "class"
        }
      ]
    },
    "src/Common/static_assert.h": {
      "path": "src/Common/static_assert.h",
      "size": 952,
      "lines": 27,
      "hash": "edb702a477ed6642",
      "functions": [],
      "constants": [
        {
          "name": "static_assert",
          "line": 23,
          "value": "_Static_assert"
        }
      ]
    },
    "src/ConnectivityTool/ConnectivityTool.cpp": {
      "path": "src/ConnectivityTool/ConnectivityTool.cpp",
      "size": 15214,
      "lines": 388,
      "hash": "2a32607990ac831e",
      "functions": [
        {
          "name": "print_COMMAND_REQUEST_STAT_INFO",
          "line": 150,
          "signature": "bool print_COMMAND_REQUEST_STAT_INFO(const COMMAND_REQUEST_STAT_INFO::response &si) {"
        },
        {
          "name": "print_COMMAND_REQUEST_NETWORK_STATE",
          "line": 166,
          "signature": "bool print_COMMAND_REQUEST_NETWORK_STATE(const COMMAND_REQUEST_NETWORK_STATE::response &ns) {"
        },
        {
          "name": "handle_get_daemon_info",
          "line": 188,
          "signature": "bool handle_get_daemon_info(po::variables_map& vm) {"
        },
        {
          "name": "handle_request_stat",
          "line": 222,
          "signature": "bool handle_request_stat(po::variables_map& vm, PeerIdType peer_id) {"
        },
        {
          "name": "levin",
          "line": 254,
          "signature": "LevinProtocol levin(connection);"
        },
        {
          "name": "generate_and_print_keys",
          "line": 325,
          "signature": "bool generate_and_print_keys() {"
        },
        {
          "name": "main",
          "line": 334,
          "signature": "int main(int argc, char *argv[]) {"
        }
      ],
      "constants": [
        {
          "name": "ENDL",
          "line": 46,
          "value": "std::endl"
        }
      ]
    },
    "src/CryptoNoteConfig.h": {
      "path": "src/CryptoNoteConfig.h",
      "size": 16724,
      "lines": 278,
      "hash": "d244bee4ec2aa394",
      "functions": [],
      "constants": [
        {
          "name": "DIFFICULTY_TARGET",
          "line": 30,
          "value": "480"
        },
        {
          "name": "CRYPTONOTE_MAX_BLOCK_NUMBER",
          "line": 31,
          "value": "500000000"
        },
        {
          "name": "CRYPTONOTE_MAX_BLOCK_BLOB_SIZE",
          "line": 32,
          "value": "500000000"
        },
        {
          "name": "CRYPTONOTE_MAX_TX_SIZE",
          "line": 33,
          "value": "1000000000"
        },
        {
          "name": "CRYPTONOTE_PUBLIC_ADDRESS_BASE58_PREFIX",
          "line": 34,
          "value": "1753191"
        },
        {
          "name": "CRYPTONOTE_MINED_MONEY_UNLOCK_WINDOW",
          "line": 35,
          "value": "60"
        },
        {
          "name": "DIFFICULTY_TARGET_DRGL",
          "line": 36,
          "value": "81"
        },
        {
          "name": "EMISSION_SPEED_FACTOR",
          "line": 37,
          "value": "18"
        },
        {
          "name": "EMISSION_SPEED_FACTOR_FANGO",
          "line": 38,
          "value": "19"
        },
        {
          "name": "EMISSION_SPEED_FACTOR_FUEGO",
          "line": 39,
          "value": "20"
        },
        {
          "name": "CRYPTONOTE_BLOCK_FUTURE_TIME_LIMIT",
          "line": 40,
          "value": "60 * 60 * 2"
        },
        {
          "name": "CRYPTONOTE_BLOCK_FUTURE_TIME_LIMIT_V1",
          "line": 41,
          "value": "DIFFICULTY_TARGET_DRGL * 6"
        },
        {
          "name": "CRYPTONOTE_BLOCK_FUTURE_TIME_LIMIT_V2",
          "line": 42,
          "value": "DIFFICULTY_TARGET * 2"
        },
        {
          "name": "CRYPTONOTE_DEFAULT_TX_SPENDABLE_AGE",
          "line": 43,
          "value": "10"
        },
        {
          "name": "BLOCKCHAIN_TIMESTAMP_CHECK_WINDOW",
          "line": 44,
          "value": "60"
        },
        {
          "name": "BLOCKCHAIN_TIMESTAMP_CHECK_WINDOW_V1",
          "line": 45,
          "value": "11"
        },
        {
          "name": "MONEY_SUPPLY",
          "line": 47,
          "value": "UINT64_C(80000088000008)"
        },
        {
          "name": "COIN",
          "line": 48,
          "value": "UINT64_C(10000000)"
        },
        {
          "name": "MINIMUM_FEE_V1",
          "line": 49,
          "value": "UINT64_C(800000)"
        },
        {
          "name": "MINIMUM_FEE_V2",
          "line": 50,
          "value": "UINT64_C(80000)"
        },
        {
          "name": "MINIMUM_FEE",
          "line": 51,
          "value": "MINIMUM_FEE_V2"
        },
        {
          "name": "MINIMUM_FEE_BANKING",
          "line": 52,
          "value": "UINT64_C(80000)"
        },
        {
          "name": "DEFAULT_DUST_THRESHOLD",
          "line": 53,
          "value": "UINT64_C(20000)"
        },
        {
          "name": "MINIMUM_MIXIN",
          "line": 54,
          "value": "2"
        },
        {
          "name": "CRYPTONOTE_COIN_VERSION",
          "line": 56,
          "value": "1"
        },
        {
          "name": "CRYPTONOTE_DISPLAY_DECIMAL_POINT",
          "line": 57,
          "value": "7"
        },
        {
          "name": "CRYPTONOTE_REWARD_BLOCKS_WINDOW",
          "line": 58,
          "value": "100"
        },
        {
          "name": "CRYPTONOTE_BLOCK_GRANTED_FULL_REWARD_ZONE",
          "line": 59,
          "value": "800000"
        },
        {
          "name": "CRYPTONOTE_BLOCK_GRANTED_FULL_REWARD_ZONE_V2",
          "line": 60,
          "value": "800000"
        },
        {
          "name": "CRYPTONOTE_BLOCK_GRANTED_FULL_REWARD_ZONE_V1",
          "line": 61,
          "value": "20000"
        },
        {
          "name": "CRYPTONOTE_BLOCK_GRANTED_FULL_REWARD_ZONE_CURRENT",
          "line": 62,
          "value": "CRYPTONOTE_BLOCK_GRANTED_FULL_REWARD_ZONE"
        },
        {
          "name": "CRYPTONOTE_COINBASE_BLOB_RESERVED_SIZE",
          "line": 63,
          "value": "600"
        },
        {
          "name": "EXPECTED_NUMBER_OF_BLOCKS_PER_DAY",
          "line": 65,
          "value": "24 * 60 * 60 / DIFFICULTY_TARGET"
        },
        {
          "name": "DIFFICULTY_CUT",
          "line": 66,
          "value": "60"
        },
        {
          "name": "DIFFICULTY_LAG",
          "line": 67,
          "value": "15"
        },
        {
          "name": "DIFFICULTY_WINDOW",
          "line": 68,
          "value": "1067"
        },
        {
          "name": "DIFFICULTY_WINDOW_V2",
          "line": 69,
          "value": "18"
        },
        {
          "name": "DIFFICULTY_WINDOW_V3",
          "line": 70,
          "value": "60"
        },
        {
          "name": "DIFFICULTY_WINDOW_V4",
          "line": 71,
          "value": "45"
        },
        {
          "name": "MIN_TX_MIXIN_SIZE",
          "line": 73,
          "value": "2"
        },
        {
          "name": "MAX_TX_MIXIN_SIZE",
          "line": 75,
          "value": "18"
        },
        {
          "name": "DEPOSIT_MIN_AMOUNT",
          "line": 78,
          "value": "800 * COIN"
        },
        {
          "name": "DEPOSIT_MIN_TERM_v1",
          "line": 79,
          "value": "5480"
        },
        {
          "name": "DEPOSIT_MAX_TERM_v1",
          "line": 80,
          "value": "5480"
        },
        {
          "name": "DEPOSIT_MIN_TERM",
          "line": 81,
          "value": "16440"
        },
        {
          "name": "DEPOSIT_MAX_TERM",
          "line": 82,
          "value": "16440"
        },
        {
          "name": "MULTIPLIER_FACTOR",
          "line": 86,
          "value": "100"
        },
        {
          "name": "END_MULTIPLIER_BLOCK",
          "line": 87,
          "value": "50"
        },
        {
          "name": "MAX_BLOCK_SIZE_INITIAL",
          "line": 93,
          "value": "800000"
        },
        {
          "name": "MAX_BLOCK_SIZE_GROWTH_SPEED_NUMERATOR",
          "line": 94,
          "value": "100 * 1024"
        },
        {
          "name": "MAX_BLOCK_SIZE_GROWTH_SPEED_DENOMINATOR",
          "line": 95,
          "value": "365 * 24 * 60 * 60 / DIFFICULTY_TARGET"
        },
        {
          "name": "CRYPTONOTE_LOCKED_TX_ALLOWED_DELTA_BLOCKS",
          "line": 97,
          "value": "1"
        },
        {
          "name": "CRYPTONOTE_LOCKED_TX_ALLOWED_DELTA_SECONDS",
          "line": 98,
          "value": "DIFFICULTY_TARGET_DRGL * CRYPTONOTE_LOCKED_TX_ALLOWED_DELTA_BLOCKS"
        },
        {
          "name": "CRYPTONOTE_LOCKED_TX_ALLOWED_DELTA_SECONDS_V2",
          "line": 99,
          "value": "DIFFICULTY_TARGET * CRYPTONOTE_LOCKED_TX_ALLOWED_DELTA_BLOCKS"
        },
        {
          "name": "CRYPTONOTE_MAX_TX_SIZE_LIMIT",
          "line": 101,
          "value": "CRYPTONOTE_BLOCK_GRANTED_FULL_REWARD_ZONE_CURRENT - CRYPTONOTE_COINBASE_BLOB_RESERVED_SIZE"
        },
        {
          "name": "CRYPTONOTE_OPTIMIZE_SIZE",
          "line": 102,
          "value": "100"
        },
        {
          "name": "CRYPTONOTE_MEMPOOL_TX_LIVETIME",
          "line": 104,
          "value": "(60 * 60 * 12)"
        },
        {
          "name": "CRYPTONOTE_MEMPOOL_TX_FROM_ALT_BLOCK_LIVETIME",
          "line": 105,
          "value": "(60 * 60 * 12)"
        },
        {
          "name": "CRYPTONOTE_NUMBER_OF_PERIODS_TO_FORGET_TX_DELETED_FROM_POOL",
          "line": 106,
          "value": "7"
        },
        {
          "name": "FUSION_TX_MAX_SIZE",
          "line": 108,
          "value": "CRYPTONOTE_BLOCK_GRANTED_FULL_REWARD_ZONE * 30 / 100"
        },
        {
          "name": "FUSION_TX_MIN_INPUT_COUNT",
          "line": 109,
          "value": "12"
        },
        {
          "name": "FUSION_TX_MIN_IN_OUT_COUNT_RATIO",
          "line": 110,
          "value": "4"
        },
        {
          "name": "UPGRADE_HEIGHT_V2",
          "line": 112,
          "value": "147958"
        },
        {
          "name": "UPGRADE_HEIGHT_V3",
          "line": 113,
          "value": "154321"
        },
        {
          "name": "UPGRADE_HEIGHT_V4",
          "line": 114,
          "value": "300000"
        },
        {
          "name": "UPGRADE_HEIGHT_V5",
          "line": 115,
          "value": "324819"
        },
        {
          "name": "UPGRADE_HEIGHT_V6",
          "line": 116,
          "value": "345678"
        },
        {
          "name": "UPGRADE_HEIGHT_V7",
          "line": 117,
          "value": "657000"
        },
        {
          "name": "UPGRADE_HEIGHT_V8",
          "line": 118,
          "value": "800000"
        },
        {
          "name": "UPGRADE_HEIGHT_V9",
          "line": 119,
          "value": "826420"
        },
        {
          "name": "UPGRADE_VOTING_THRESHOLD",
          "line": 120,
          "value": "90"
        },
        {
          "name": "UPGRADE_VOTING_WINDOW",
          "line": 121,
          "value": "EXPECTED_NUMBER_OF_BLOCKS_PER_DAY"
        },
        {
          "name": "UPGRADE_WINDOW",
          "line": 122,
          "value": "EXPECTED_NUMBER_OF_BLOCKS_PER_DAY"
        },
        {
          "name": "TRANSACTION_VERSION_1",
          "line": 140,
          "value": "1"
        },
        {
          "name": "TRANSACTION_VERSION_2",
          "line": 141,
          "value": "2"
        },
        {
          "name": "BLOCK_MAJOR_VERSION_1",
          "line": 142,
          "value": "1"
        },
        {
          "name": "BLOCK_MAJOR_VERSION_2",
          "line": 143,
          "value": "2"
        },
        {
          "name": "BLOCK_MAJOR_VERSION_3",
          "line": 144,
          "value": "3"
        },
        {
          "name": "BLOCK_MAJOR_VERSION_4",
          "line": 145,
          "value": "4"
        },
        {
          "name": "BLOCK_MAJOR_VERSION_5",
          "line": 146,
          "value": "5"
        },
        {
          "name": "BLOCK_MAJOR_VERSION_6",
          "line": 147,
          "value": "6"
        },
        {
          "name": "BLOCK_MAJOR_VERSION_7",
          "line": 148,
          "value": "7"
        },
        {
          "name": "BLOCK_MAJOR_VERSION_8",
          "line": 149,
          "value": "8"
        },
        {
          "name": "BLOCK_MAJOR_VERSION_9",
          "line": 150,
          "value": "9"
        },
        {
          "name": "BLOCK_MINOR_VERSION_0",
          "line": 151,
          "value": "0"
        },
        {
          "name": "BLOCK_MINOR_VERSION_1",
          "line": 152,
          "value": "1"
        },
        {
          "name": "BLOCKS_IDS_SYNCHRONIZING_DEFAULT_COUNT",
          "line": 154,
          "value": "10000"
        },
        {
          "name": "BLOCKS_SYNCHRONIZING_DEFAULT_COUNT",
          "line": 155,
          "value": "128"
        },
        {
          "name": "COMMAND_RPC_GET_BLOCKS_FAST_MAX_COUNT",
          "line": 156,
          "value": "1000"
        },
        {
          "name": "P2P_DEFAULT_PORT",
          "line": 158,
          "value": "10808"
        },
        {
          "name": "RPC_DEFAULT_PORT",
          "line": 159,
          "value": "18180"
        },
        {
          "name": "P2P_VERSION_1",
          "line": 163,
          "value": "1"
        },
        {
          "name": "P2P_VERSION_2",
          "line": 164,
          "value": "2"
        },
        {
          "name": "P2P_CURRENT_VERSION",
          "line": 165,
          "value": "1"
        },
        {
          "name": "P2P_MINIMUM_VERSION",
          "line": 166,
          "value": "1"
        },
        {
          "name": "P2P_UPGRADE_WINDOW",
          "line": 167,
          "value": "2"
        },
        {
          "name": "P2P_LITE_BLOCKS_PROPOGATION_VERSION",
          "line": 170,
          "value": "3"
        },
        {
          "name": "P2P_LOCAL_WHITE_PEERLIST_LIMIT",
          "line": 172,
          "value": "1000"
        },
        {
          "name": "P2P_LOCAL_GRAY_PEERLIST_LIMIT",
          "line": 173,
          "value": "5000"
        },
        {
          "name": "P2P_CONNECTION_MAX_WRITE_BUFFER_SIZE",
          "line": 175,
          "value": "64 * 1024 * 1024"
        },
        {
          "name": "P2P_DEFAULT_CONNECTIONS_COUNT",
          "line": 176,
          "value": "8"
        },
        {
          "name": "P2P_DEFAULT_ANCHOR_CONNECTIONS_COUNT",
          "line": 177,
          "value": "2"
        },
        {
          "name": "P2P_DEFAULT_WHITELIST_CONNECTIONS_PERCENT",
          "line": 178,
          "value": "70"
        },
        {
          "name": "P2P_DEFAULT_HANDSHAKE_INTERVAL",
          "line": 179,
          "value": "60"
        },
        {
          "name": "P2P_DEFAULT_PACKET_MAX_SIZE",
          "line": 180,
          "value": "50000000"
        },
        {
          "name": "P2P_DEFAULT_PEERS_IN_HANDSHAKE",
          "line": 181,
          "value": "250"
        },
        {
          "name": "P2P_DEFAULT_CONNECTION_TIMEOUT",
          "line": 182,
          "value": "5000"
        },
        {
          "name": "P2P_DEFAULT_PING_CONNECTION_TIMEOUT",
          "line": 183,
          "value": "2000"
        },
        {
          "name": "P2P_DEFAULT_INVOKE_TIMEOUT",
          "line": 184,
          "value": "60 * 2 * 1000"
        },
        {
          "name": "P2P_DEFAULT_HANDSHAKE_INVOKE_TIMEOUT",
          "line": 185,
          "value": "5000"
        },
        {
          "name": "P2P_IP_BLOCKTIME",
          "line": 186,
          "value": "(60 * 60 * 24)"
        },
        {
          "name": "P2P_IP_FAILS_BEFORE_BLOCK",
          "line": 187,
          "value": "45"
        }
      ]
    },
    "src/CryptoNoteCore/Account.cpp": {
      "path": "src/CryptoNoteCore/Account.cpp",
      "size": 2325,
      "lines": 58,
      "hash": "f2a3b319e03b6410",
      "functions": [],
      "constants": []
    },
    "src/CryptoNoteCore/Account.h": {
      "path": "src/CryptoNoteCore/Account.h",
      "size": 1916,
      "lines": 55,
      "hash": "ca4cbe4cff9c31ca",
      "functions": [
        {
          "name": "generate",
          "line": 33,
          "signature": "void generate();"
        },
        {
          "name": "generateViewFromSpend",
          "line": 34,
          "signature": "static void generateViewFromSpend(Crypto::SecretKey &, Crypto::SecretKey &, Crypto::PublicKey &);"
        },
        {
          "name": "setAccountKeys",
          "line": 38,
          "signature": "void setAccountKeys(const AccountKeys& keys);"
        },
        {
          "name": "set_createtime",
          "line": 40,
          "signature": "void set_createtime(uint64_t val) { m_creation_timestamp = val; }"
        },
        {
          "name": "serialize",
          "line": 41,
          "signature": "void serialize(ISerializer& s);"
        },
        {
          "name": "serialize",
          "line": 44,
          "signature": "inline void serialize(t_archive &a, const unsigned int /*ver*/) {"
        },
        {
          "name": "setNull",
          "line": 50,
          "signature": "void setNull();"
        }
      ],
      "constants": []
    },
    "src/CryptoNoteCore/BlockIndex.cpp": {
      "path": "src/CryptoNoteCore/BlockIndex.cpp",
      "size": 2888,
      "lines": 89,
      "hash": "de73d58c42d7b9f7",
      "functions": [],
      "constants": []
    },
    "src/CryptoNoteCore/BlockIndex.h": {
      "path": "src/CryptoNoteCore/BlockIndex.h",
      "size": 2703,
      "lines": 90,
      "hash": "6895c43911e486fe",
      "functions": [
        {
          "name": "pop",
          "line": 36,
          "signature": "void pop() {"
        },
        {
          "name": "push",
          "line": 41,
          "signature": "bool push(const Crypto::Hash& h) {"
        },
        {
          "name": "clear",
          "line": 63,
          "signature": "void clear() {"
        },
        {
          "name": "serialize",
          "line": 73,
          "signature": "void serialize(ISerializer& s);"
        }
      ],
      "constants": []
    },
    "src/CryptoNoteCore/Blockchain.cpp": {
      "path": "src/CryptoNoteCore/Blockchain.cpp",
      "size": 115369,
      "lines": 2925,
      "hash": "fcfb6f8942fae337",
      "functions": [
        {
          "name": "serialize",
          "line": 77,
          "signature": "bool serialize(google::sparse_hash_map<K, V, Hash>& value, Common::StringView name, CryptoNote::ISerializer& serializer) {"
        },
        {
          "name": "serializeMap",
          "line": 78,
          "signature": "return serializeMap(value, name, serializer, [&value](size_t size) { value.resize(size); });"
        },
        {
          "name": "serialize",
          "line": 82,
          "signature": "bool serialize(google::sparse_hash_set<K, Hash>& value, Common::StringView name, CryptoNote::ISerializer& serializer) {"
        },
        {
          "name": "serialize",
          "line": 106,
          "signature": "bool serialize(std::vector<std::pair<Blockchain::TransactionIndex, uint16_t>>& value, Common::StringView name, CryptoNote::ISerializer& s) {"
        },
        {
          "name": "serialize",
          "line": 129,
          "signature": "void serialize(Blockchain::TransactionIndex& value, ISerializer& s) {"
        },
        {
          "name": "load",
          "line": 141,
          "signature": "void load(const std::string& filename) {"
        },
        {
          "name": "stream",
          "line": 148,
          "signature": "StdInputStream stream(stdStream);"
        },
        {
          "name": "s",
          "line": 149,
          "signature": "BinaryInputStreamSerializer s(stream);"
        },
        {
          "name": "save",
          "line": 156,
          "signature": "bool save(const std::string& filename) {"
        },
        {
          "name": "stream",
          "line": 163,
          "signature": "StdOutputStream stream(file);"
        },
        {
          "name": "s",
          "line": 164,
          "signature": "BinaryOutputStreamSerializer s(stream);"
        },
        {
          "name": "serialize",
          "line": 173,
          "signature": "void serialize(ISerializer& s) {"
        },
        {
          "name": "serialize",
          "line": 261,
          "signature": "void serialize(ISerializer& s) {"
        },
        {
          "name": "getTailId",
          "line": 724,
          "signature": "return getTailId();"
        },
        {
          "name": "doBuildSparseChain",
          "line": 741,
          "signature": "return doBuildSparseChain(startBlockId);"
        },
        {
          "name": "checkTransactionInputs",
          "line": 1763,
          "signature": "return checkTransactionInputs(tx, tx_prefix_hash, pmax_used_block_height);"
        },
        {
          "name": "handle_output",
          "line": 1854,
          "signature": "bool handle_output(const Transaction& tx, const TransactionOutput& out, size_t transactionOutputIndex) {"
        },
        {
          "name": "time",
          "line": 1911,
          "signature": "return time(NULL);"
        }
      ],
      "constants": [
        {
          "name": "CURRENT_BLOCKCACHE_STORAGE_ARCHIVE_VER",
          "line": 66,
          "value": "4"
        },
        {
          "name": "CURRENT_BLOCKCHAININDICES_STORAGE_ARCHIVE_VER",
          "line": 67,
          "value": "1"
        },
        {
          "name": "elementSize",
          "line": 107,
          "value": "sizeof(std::pair<Blockchain::TransactionIndex, uint16_t>)"
        },
        {
          "name": "mainPrev",
          "line": 1295,
          "value": "m_blockIndex.getBlockHeight(b.previousBlockHash, mainPrevHeight)"
        },
        {
          "name": "it_prev",
          "line": 1296,
          "value": "m_alternative_chains.find(b.previousBlockHash)"
        },
        {
          "name": "expectedBlockVersion",
          "line": 1981,
          "value": "getBlockMajorVersionForHeight(height)"
        }
      ]
    },
    "src/CryptoNoteCore/Blockchain.h": {
      "path": "src/CryptoNoteCore/Blockchain.h",
      "size": 19634,
      "lines": 412,
      "hash": "967b01b49e34bfe0",
      "functions": [
        {
          "name": "addObserver",
          "line": 61,
          "signature": "bool addObserver(IBlockchainStorageObserver* observer);"
        },
        {
          "name": "removeObserver",
          "line": 62,
          "signature": "bool removeObserver(IBlockchainStorageObserver* observer);"
        },
        {
          "name": "rebuildCache",
          "line": 63,
          "signature": "void rebuildCache();"
        },
        {
          "name": "storeCache",
          "line": 64,
          "signature": "bool storeCache();"
        },
        {
          "name": "init",
          "line": 72,
          "signature": "bool init() { return init(Tools::getDefaultDataDirectory(), true); }"
        },
        {
          "name": "init",
          "line": 73,
          "signature": "bool init(const std::string& config_folder, bool load_existing);"
        },
        {
          "name": "deinit",
          "line": 74,
          "signature": "bool deinit();"
        },
        {
          "name": "getLowerBound",
          "line": 76,
          "signature": "bool getLowerBound(uint64_t timestamp, uint64_t startOffset, uint32_t& height);"
        },
        {
          "name": "setCheckpoints",
          "line": 79,
          "signature": "void setCheckpoints(Checkpoints&& chk_pts) { m_checkpoints = chk_pts; }"
        },
        {
          "name": "getBlocks",
          "line": 80,
          "signature": "bool getBlocks(uint32_t start_offset, uint32_t count, std::list<Block>& blocks, std::list<Transaction>& txs);"
        },
        {
          "name": "getBlocks",
          "line": 81,
          "signature": "bool getBlocks(uint32_t start_offset, uint32_t count, std::list<Block>& blocks);"
        },
        {
          "name": "getAlternativeBlocks",
          "line": 82,
          "signature": "bool getAlternativeBlocks(std::list<Block>& blocks);"
        },
        {
          "name": "getAlternativeBlocksCount",
          "line": 83,
          "signature": "uint32_t getAlternativeBlocksCount();"
        },
        {
          "name": "getBlockByHash",
          "line": 85,
          "signature": "bool getBlockByHash(const Crypto::Hash &h, Block &blk);"
        },
        {
          "name": "getBlockHeight",
          "line": 86,
          "signature": "bool getBlockHeight(const Crypto::Hash& blockId, uint32_t& blockHeight);"
        },
        {
          "name": "serialize",
          "line": 89,
          "signature": "void serialize(archive_t &ar, const unsigned int version);"
        },
        {
          "name": "haveTransaction",
          "line": 91,
          "signature": "bool haveTransaction(const Crypto::Hash &id);"
        },
        {
          "name": "haveTransactionKeyImagesAsSpent",
          "line": 92,
          "signature": "bool haveTransactionKeyImagesAsSpent(const Transaction &tx);"
        },
        {
          "name": "getCurrentBlockchainHeight",
          "line": 94,
          "signature": "uint32_t getCurrentBlockchainHeight(); //TODO rename to getCurrentBlockchainSize"
        },
        {
          "name": "getDifficultyForNextBlock",
          "line": 97,
          "signature": "difficulty_type getDifficultyForNextBlock();"
        },
        {
          "name": "getBlockTimestamp",
          "line": 98,
          "signature": "uint64_t getBlockTimestamp(uint32_t height);"
        },
        {
          "name": "getCoinsInCirculation",
          "line": 99,
          "signature": "uint64_t getCoinsInCirculation();"
        },
        {
          "name": "addNewBlock",
          "line": 102,
          "signature": "bool addNewBlock(const Block& bl_, block_verification_context& bvc);"
        },
        {
          "name": "resetAndSetGenesisBlock",
          "line": 103,
          "signature": "bool resetAndSetGenesisBlock(const Block& b);"
        },
        {
          "name": "haveBlock",
          "line": 104,
          "signature": "bool haveBlock(const Crypto::Hash& id);"
        },
        {
          "name": "getTotalTransactions",
          "line": 105,
          "signature": "size_t getTotalTransactions();"
        },
        {
          "name": "findBlockchainSupplement",
          "line": 108,
          "signature": "uint32_t findBlockchainSupplement(const std::vector<Crypto::Hash>& qblock_ids); // !!!!"
        },
        {
          "name": "handleGetObjects",
          "line": 111,
          "signature": "bool handleGetObjects(NOTIFY_REQUEST_GET_OBJECTS_request& arg, NOTIFY_RESPONSE_GET_OBJECTS_request& rsp); //Deprecated. Should be removed with CryptoNoteProtocolHandler."
        },
        {
          "name": "getRandomOutsByAmount",
          "line": 112,
          "signature": "bool getRandomOutsByAmount(const COMMAND_RPC_GET_RANDOM_OUTPUTS_FOR_AMOUNTS_request& req, COMMAND_RPC_GET_RANDOM_OUTPUTS_FOR_AMOUNTS_response& res);"
        },
        {
          "name": "getBackwardBlocksSize",
          "line": 113,
          "signature": "bool getBackwardBlocksSize(size_t from_height, std::vector<size_t>& sz, size_t count);"
        },
        {
          "name": "getTransactionOutputGlobalIndexes",
          "line": 114,
          "signature": "bool getTransactionOutputGlobalIndexes(const Crypto::Hash& tx_id, std::vector<uint32_t>& indexs);"
        },
        {
          "name": "get_out_by_msig_gindex",
          "line": 115,
          "signature": "bool get_out_by_msig_gindex(uint64_t amount, uint64_t gindex, MultisignatureOutput& out);"
        },
        {
          "name": "checkTransactionInputs",
          "line": 116,
          "signature": "bool checkTransactionInputs(const Transaction& tx, uint32_t& pmax_used_block_height, Crypto::Hash& max_used_block_id, BlockInfo* tail = 0);"
        },
        {
          "name": "getCurrentCumulativeBlocksizeLimit",
          "line": 117,
          "signature": "uint64_t getCurrentCumulativeBlocksizeLimit();"
        },
        {
          "name": "blockDifficulty",
          "line": 118,
          "signature": "uint64_t blockDifficulty(size_t i);"
        },
        {
          "name": "getBlockContainingTransaction",
          "line": 119,
          "signature": "bool getBlockContainingTransaction(const Crypto::Hash& txId, Crypto::Hash& blockId, uint32_t& blockHeight);"
        },
        {
          "name": "getAlreadyGeneratedCoins",
          "line": 120,
          "signature": "bool getAlreadyGeneratedCoins(const Crypto::Hash& hash, uint64_t& generatedCoins);"
        },
        {
          "name": "getBlockSize",
          "line": 121,
          "signature": "bool getBlockSize(const Crypto::Hash& hash, size_t& size);"
        },
        {
          "name": "getMultisigOutputReference",
          "line": 122,
          "signature": "bool getMultisigOutputReference(const MultisignatureInput& txInMultisig, std::pair<Crypto::Hash, size_t>& outputReference);"
        },
        {
          "name": "getGeneratedTransactionsNumber",
          "line": 123,
          "signature": "bool getGeneratedTransactionsNumber(uint32_t height, uint64_t& generatedTransactions);"
        },
        {
          "name": "getOrphanBlockIdsByHeight",
          "line": 124,
          "signature": "bool getOrphanBlockIdsByHeight(uint32_t height, std::vector<Crypto::Hash>& blockHashes);"
        },
        {
          "name": "getBlockIdsByTimestamp",
          "line": 125,
          "signature": "bool getBlockIdsByTimestamp(uint64_t timestampBegin, uint64_t timestampEnd, uint32_t blocksNumberLimit, std::vector<Crypto::Hash>& hashes, uint32_t& blocksNumberWithinTimestamps);"
        },
        {
          "name": "getTransactionIdsByPaymentId",
          "line": 126,
          "signature": "bool getTransactionIdsByPaymentId(const Crypto::Hash& paymentId, std::vector<Crypto::Hash>& transactionHashes);"
        },
        {
          "name": "isBlockInMainChain",
          "line": 127,
          "signature": "bool isBlockInMainChain(const Crypto::Hash& blockId);"
        },
        {
          "name": "coinsEmittedAtHeight",
          "line": 131,
          "signature": "uint64_t coinsEmittedAtHeight(uint64_t height);"
        },
        {
          "name": "difficultyAtHeight",
          "line": 132,
          "signature": "uint64_t difficultyAtHeight(uint64_t height);"
        },
        {
          "name": "isInCheckpointZone",
          "line": 133,
          "signature": "bool isInCheckpointZone(const uint32_t height);"
        },
        {
          "name": "scanOutputKeysForIndexes",
          "line": 136,
          "signature": "bool scanOutputKeysForIndexes(const KeyInput &tx_in_to_key, visitor_t &vis, uint32_t *pmax_related_block_height = NULL);"
        },
        {
          "name": "addMessageQueue",
          "line": 138,
          "signature": "bool addMessageQueue(MessageQueue<BlockchainMessage>& messageQueue);"
        },
        {
          "name": "removeMessageQueue",
          "line": 139,
          "signature": "bool removeMessageQueue(MessageQueue<BlockchainMessage>& messageQueue);"
        },
        {
          "name": "getBlocks",
          "line": 142,
          "signature": "bool getBlocks(const t_ids_container& block_ids, t_blocks_container& blocks, t_missed_container& missed_bs) {"
        },
        {
          "name": "getBlockchainTransactions",
          "line": 160,
          "signature": "void getBlockchainTransactions(const t_ids_container& txs_ids, t_tx_container& txs, t_missed_container& missed_txs) {"
        },
        {
          "name": "getTransactions",
          "line": 174,
          "signature": "void getTransactions(const t_ids_container& txs_ids, t_tx_container& txs, t_missed_container& missed_txs, bool checkTxPool = false) {"
        },
        {
          "name": "print_blockchain",
          "line": 190,
          "signature": "void print_blockchain(uint64_t start_index, uint64_t end_index);"
        },
        {
          "name": "print_blockchain_index",
          "line": 191,
          "signature": "void print_blockchain_index();"
        },
        {
          "name": "print_blockchain_outs",
          "line": 192,
          "signature": "void print_blockchain_outs(const std::string& file);"
        },
        {
          "name": "serialize",
          "line": 198,
          "signature": "void serialize(ISerializer& s) {"
        },
        {
          "name": "rollbackBlockchainTo",
          "line": 204,
          "signature": "bool rollbackBlockchainTo(uint32_t height);"
        },
        {
          "name": "have_tx_keyimg_as_spent",
          "line": 205,
          "signature": "bool have_tx_keyimg_as_spent(const Crypto::KeyImage &key_im);"
        },
        {
          "name": "serialize",
          "line": 214,
          "signature": "void serialize(ISerializer& s) {"
        },
        {
          "name": "serialize",
          "line": 225,
          "signature": "void serialize(ISerializer& s) {"
        },
        {
          "name": "serialize",
          "line": 239,
          "signature": "void serialize(ISerializer& s) {"
        },
        {
          "name": "switch_to_alternative_blockchain",
          "line": 304,
          "signature": "bool switch_to_alternative_blockchain(std::list<blocks_ext_by_hash::iterator> &alt_chain, bool discard_disconnected_chain);"
        },
        {
          "name": "handle_alternative_block",
          "line": 305,
          "signature": "bool handle_alternative_block(const Block &b, const Crypto::Hash &id, block_verification_context &bvc, bool sendNewAlternativeBlockMessage = true);"
        },
        {
          "name": "get_next_difficulty_for_alternative_chain",
          "line": 306,
          "signature": "difficulty_type get_next_difficulty_for_alternative_chain(const std::list<blocks_ext_by_hash::iterator> &alt_chain, BlockEntry &bei);"
        },
        {
          "name": "pushToDepositIndex",
          "line": 307,
          "signature": "void pushToDepositIndex(const BlockEntry &block, uint64_t interest);"
        },
        {
          "name": "prevalidate_miner_transaction",
          "line": 308,
          "signature": "bool prevalidate_miner_transaction(const Block &b, uint32_t height);"
        },
        {
          "name": "validate_miner_transaction",
          "line": 309,
          "signature": "bool validate_miner_transaction(const Block &b, uint32_t height, size_t cumulativeBlockSize, uint64_t alreadyGeneratedCoins, uint64_t fee, uint64_t &reward, int64_t &emissionChange);"
        },
        {
          "name": "rollback_blockchain_switching",
          "line": 310,
          "signature": "bool rollback_blockchain_switching(std::list<Block> &original_chain, size_t rollback_height);"
        },
        {
          "name": "get_last_n_blocks_sizes",
          "line": 311,
          "signature": "bool get_last_n_blocks_sizes(std::vector<size_t> &sz, size_t count);"
        },
        {
          "name": "add_out_to_get_random_outs",
          "line": 312,
          "signature": "bool add_out_to_get_random_outs(std::vector<std::pair<TransactionIndex, uint16_t>> &amount_outs, COMMAND_RPC_GET_RANDOM_OUTPUTS_FOR_AMOUNTS_outs_for_amount &result_outs, uint64_t amount, size_t i);"
        },
        {
          "name": "is_tx_spendtime_unlocked",
          "line": 313,
          "signature": "bool is_tx_spendtime_unlocked(uint64_t unlock_time);"
        },
        {
          "name": "find_end_of_allowed_index",
          "line": 314,
          "signature": "size_t find_end_of_allowed_index(const std::vector<std::pair<TransactionIndex, uint16_t>> &amount_outs);"
        },
        {
          "name": "check_block_timestamp_main",
          "line": 315,
          "signature": "bool check_block_timestamp_main(const Block &b);"
        },
        {
          "name": "check_block_timestamp",
          "line": 316,
          "signature": "bool check_block_timestamp(std::vector<uint64_t> timestamps, const Block &b);"
        },
        {
          "name": "get_adjusted_time",
          "line": 317,
          "signature": "uint64_t get_adjusted_time();"
        },
        {
          "name": "complete_timestamps_vector",
          "line": 318,
          "signature": "bool complete_timestamps_vector(uint8_t blockMajorVersion, uint64_t start_height, std::vector<uint64_t>& timestamps);"
        },
        {
          "name": "checkBlockVersion",
          "line": 319,
          "signature": "bool checkBlockVersion(const Block& b, const Crypto::Hash& blockHash);"
        },
        {
          "name": "checkParentBlockSize",
          "line": 320,
          "signature": "bool checkParentBlockSize(const Block& b, const Crypto::Hash& blockHash);"
        },
        {
          "name": "checkCumulativeBlockSize",
          "line": 321,
          "signature": "bool checkCumulativeBlockSize(const Crypto::Hash& blockId, size_t cumulativeBlockSize, uint64_t height);"
        },
        {
          "name": "getBlockCumulativeSize",
          "line": 323,
          "signature": "bool getBlockCumulativeSize(const Block& block, size_t& cumulativeSize);"
        },
        {
          "name": "update_next_comulative_size_limit",
          "line": 324,
          "signature": "bool update_next_comulative_size_limit();"
        },
        {
          "name": "check_tx_input",
          "line": 325,
          "signature": "bool check_tx_input(const KeyInput& txin, const Crypto::Hash& tx_prefix_hash, const std::vector<Crypto::Signature>& sig, uint32_t* pmax_related_block_height = NULL);"
        },
        {
          "name": "checkTransactionInputs",
          "line": 326,
          "signature": "bool checkTransactionInputs(const Transaction& tx, const Crypto::Hash& tx_prefix_hash, uint32_t* pmax_used_block_height = NULL);"
        },
        {
          "name": "checkTransactionInputs",
          "line": 327,
          "signature": "bool checkTransactionInputs(const Transaction& tx, uint32_t* pmax_used_block_height = NULL);"
        },
        {
          "name": "pushBlock",
          "line": 330,
          "signature": "bool pushBlock(const Block &blockData, const Crypto::Hash &id, block_verification_context &bvc, uint32_t height);"
        },
        {
          "name": "pushBlock",
          "line": 331,
          "signature": "bool pushBlock(const Block &blockData, const std::vector<Transaction> &transactions, const Crypto::Hash &id, block_verification_context &bvc);"
        },
        {
          "name": "pushBlock",
          "line": 332,
          "signature": "bool pushBlock(BlockEntry &block);"
        },
        {
          "name": "popBlock",
          "line": 333,
          "signature": "void popBlock(const Crypto::Hash &blockHash);"
        },
        {
          "name": "pushTransaction",
          "line": 334,
          "signature": "bool pushTransaction(BlockEntry &block, const Crypto::Hash &transactionHash, TransactionIndex transactionIndex);"
        },
        {
          "name": "popTransaction",
          "line": 335,
          "signature": "void popTransaction(const Transaction &transaction, const Crypto::Hash &transactionHash);"
        },
        {
          "name": "popTransactions",
          "line": 336,
          "signature": "void popTransactions(const BlockEntry &block, const Crypto::Hash &minerTransactionHash);"
        },
        {
          "name": "validateInput",
          "line": 337,
          "signature": "bool validateInput(const MultisignatureInput &input, const Crypto::Hash &transactionHash, const Crypto::Hash &transactionPrefixHash, const std::vector<Crypto::Signature> &transactionSignatures);"
        },
        {
          "name": "removeLastBlock",
          "line": 338,
          "signature": "bool removeLastBlock();"
        },
        {
          "name": "checkCheckpoints",
          "line": 339,
          "signature": "bool checkCheckpoints(uint32_t &lastValidCheckpointHeight);"
        },
        {
          "name": "checkUpgradeHeight",
          "line": 340,
          "signature": "bool checkUpgradeHeight(const UpgradeDetector& upgradeDetector);"
        },
        {
          "name": "storeBlockchainIndices",
          "line": 342,
          "signature": "bool storeBlockchainIndices();"
        },
        {
          "name": "loadBlockchainIndices",
          "line": 343,
          "signature": "bool loadBlockchainIndices();"
        },
        {
          "name": "loadTransactions",
          "line": 345,
          "signature": "bool loadTransactions(const Block& block, std::vector<Transaction>& transactions, uint32_t height);"
        },
        {
          "name": "saveTransactions",
          "line": 346,
          "signature": "void saveTransactions(const std::vector<Transaction>& transactions, uint32_t height);"
        },
        {
          "name": "sendMessage",
          "line": 348,
          "signature": "void sendMessage(const BlockchainMessage& message);"
        }
      ],
      "constants": []
    },
    "src/CryptoNoteCore/BlockchainIndices.cpp": {
      "path": "src/CryptoNoteCore/BlockchainIndices.cpp",
      "size": 7734,
      "lines": 266,
      "hash": "74e0618ebf928d2c",
      "functions": [],
      "constants": []
    },
    "src/CryptoNoteCore/BlockchainIndices.h": {
      "path": "src/CryptoNoteCore/BlockchainIndices.h",
      "size": 3523,
      "lines": 122,
      "hash": "bc929d887fdd2294",
      "functions": [
        {
          "name": "add",
          "line": 35,
          "signature": "bool add(const Transaction& transaction);"
        },
        {
          "name": "remove",
          "line": 36,
          "signature": "bool remove(const Transaction& transaction);"
        },
        {
          "name": "find",
          "line": 37,
          "signature": "bool find(const Crypto::Hash& paymentId, std::vector<Crypto::Hash>& transactionHashes);"
        },
        {
          "name": "clear",
          "line": 38,
          "signature": "void clear();"
        },
        {
          "name": "serialize",
          "line": 40,
          "signature": "void serialize(ISerializer& s);"
        },
        {
          "name": "serialize",
          "line": 43,
          "signature": "void serialize(Archive& archive, unsigned int version) {"
        },
        {
          "name": "add",
          "line": 54,
          "signature": "bool add(uint64_t timestamp, const Crypto::Hash& hash);"
        },
        {
          "name": "remove",
          "line": 55,
          "signature": "bool remove(uint64_t timestamp, const Crypto::Hash& hash);"
        },
        {
          "name": "find",
          "line": 56,
          "signature": "bool find(uint64_t timestampBegin, uint64_t timestampEnd, uint32_t hashesNumberLimit, std::vector<Crypto::Hash>& hashes, uint32_t& hashesNumberWithinTimestamps);"
        },
        {
          "name": "clear",
          "line": 57,
          "signature": "void clear();"
        },
        {
          "name": "serialize",
          "line": 59,
          "signature": "void serialize(ISerializer& s);"
        },
        {
          "name": "serialize",
          "line": 62,
          "signature": "void serialize(Archive& archive, unsigned int version) {"
        },
        {
          "name": "add",
          "line": 73,
          "signature": "bool add(uint64_t timestamp, const Crypto::Hash& hash);"
        },
        {
          "name": "remove",
          "line": 74,
          "signature": "bool remove(uint64_t timestamp, const Crypto::Hash& hash);"
        },
        {
          "name": "find",
          "line": 75,
          "signature": "bool find(uint64_t timestampBegin, uint64_t timestampEnd, uint64_t hashesNumberLimit, std::vector<Crypto::Hash>& hashes, uint64_t& hashesNumberWithinTimestamps);"
        },
        {
          "name": "clear",
          "line": 76,
          "signature": "void clear();"
        },
        {
          "name": "serialize",
          "line": 78,
          "signature": "void serialize(ISerializer& s);"
        },
        {
          "name": "serialize",
          "line": 81,
          "signature": "void serialize(Archive& archive, unsigned int version) {"
        },
        {
          "name": "add",
          "line": 92,
          "signature": "bool add(const Block& block);"
        },
        {
          "name": "remove",
          "line": 93,
          "signature": "bool remove(const Block& block);"
        },
        {
          "name": "find",
          "line": 94,
          "signature": "bool find(uint32_t height, uint64_t& generatedTransactions);"
        },
        {
          "name": "clear",
          "line": 95,
          "signature": "void clear();"
        },
        {
          "name": "serialize",
          "line": 97,
          "signature": "void serialize(ISerializer& s);"
        },
        {
          "name": "serialize",
          "line": 100,
          "signature": "void serialize(Archive& archive, unsigned int version) {"
        },
        {
          "name": "add",
          "line": 113,
          "signature": "bool add(const Block& block);"
        },
        {
          "name": "remove",
          "line": 114,
          "signature": "bool remove(const Block& block);"
        },
        {
          "name": "find",
          "line": 115,
          "signature": "bool find(uint32_t height, std::vector<Crypto::Hash>& blockHashes);"
        },
        {
          "name": "clear",
          "line": 116,
          "signature": "void clear();"
        }
      ],
      "constants": []
    },
    "src/CryptoNoteCore/BlockchainMessages.cpp": {
      "path": "src/CryptoNoteCore/BlockchainMessages.cpp",
      "size": 3791,
      "lines": 110,
      "hash": "b9c52479c1e9a91c",
      "functions": [],
      "constants": []
    },
    "src/CryptoNoteCore/BlockchainMessages.h": {
      "path": "src/CryptoNoteCore/BlockchainMessages.h",
      "size": 2390,
      "lines": 85,
      "hash": "6be69a42aa69ac33",
      "functions": [],
      "constants": []
    },
    "src/CryptoNoteCore/Checkpoints.cpp": {
      "path": "src/CryptoNoteCore/Checkpoints.cpp",
      "size": 6337,
      "lines": 186,
      "hash": "3758948638dbd54f",
      "functions": [
        {
          "name": "check_block",
          "line": 80,
          "signature": "return check_block(height, h, ignored);"
        }
      ],
      "constants": []
    },
    "src/CryptoNoteCore/Checkpoints.h": {
      "path": "src/CryptoNoteCore/Checkpoints.h",
      "size": 1715,
      "lines": 45,
      "hash": "f0671037cfad6834",
      "functions": [
        {
          "name": "add_checkpoint",
          "line": 30,
          "signature": "bool add_checkpoint(uint32_t height, const std::string& hash_str);"
        },
        {
          "name": "load_checkpoints_from_file",
          "line": 32,
          "signature": "bool load_checkpoints_from_file(const std::string& fileName);"
        },
        {
          "name": "load_checkpoints_from_dns",
          "line": 33,
          "signature": "bool load_checkpoints_from_dns();"
        },
        {
          "name": "load_checkpoints",
          "line": 34,
          "signature": "bool load_checkpoints();"
        }
      ],
      "constants": []
    },
    "src/CryptoNoteCore/Core.cpp": {
      "path": "src/CryptoNoteCore/Core.cpp",
      "size": 46168,
      "lines": 1248,
      "hash": "224052104ae4b70a",
      "functions": [
        {
          "name": "load_state_data",
          "line": 187,
          "signature": "return load_state_data();"
        },
        {
          "name": "lbs",
          "line": 429,
          "signature": "LockedBlockchainStorage lbs(m_blockchain);"
        },
        {
          "name": "blockchainLock",
          "line": 448,
          "signature": "LockedBlockchainStorage blockchainLock(m_blockchain);"
        },
        {
          "name": "handle_incoming_block",
          "line": 701,
          "signature": "return handle_incoming_block(b, bvc, control_miner, relay_block);"
        },
        {
          "name": "parseAndValidateTransactionFromBinaryArray",
          "line": 758,
          "signature": "return parseAndValidateTransactionFromBinaryArray(blob, tx, tx_hash, tx_prefix_hash);"
        },
        {
          "name": "lbs",
          "line": 783,
          "signature": "LockedBlockchainStorage lbs(m_blockchain);"
        },
        {
          "name": "lbs",
          "line": 793,
          "signature": "LockedBlockchainStorage lbs(m_blockchain);"
        },
        {
          "name": "lbs",
          "line": 874,
          "signature": "LockedBlockchainStorage lbs(m_blockchain);"
        },
        {
          "name": "lbs",
          "line": 931,
          "signature": "LockedBlockchainStorage lbs(m_blockchain);"
        },
        {
          "name": "lbs",
          "line": 954,
          "signature": "LockedBlockchainStorage lbs(m_blockchain);"
        },
        {
          "name": "lbs",
          "line": 966,
          "signature": "LockedBlockchainStorage lbs(m_blockchain);"
        },
        {
          "name": "vi",
          "line": 1059,
          "signature": "outputs_visitor vi(outputReferences);"
        },
        {
          "name": "lbs",
          "line": 1156,
          "signature": "LockedBlockchainStorage lbs(m_blockchain);"
        },
        {
          "name": "func",
          "line": 1158,
          "signature": "return func();"
        },
        {
          "name": "lbs",
          "line": 1214,
          "signature": "LockedBlockchainStorage lbs(m_blockchain);"
        }
      ],
      "constants": [
        {
          "name": "fee",
          "line": 320,
          "value": "inputs_amount - outputs_amount"
        }
      ]
    },
    "src/CryptoNoteCore/Core.h": {
      "path": "src/CryptoNoteCore/Core.h",
      "size": 12971,
      "lines": 208,
      "hash": "0a90d3e84d654361",
      "functions": [
        {
          "name": "init_options",
          "line": 66,
          "signature": "static void init_options(boost::program_options::options_description& desc);"
        },
        {
          "name": "init",
          "line": 67,
          "signature": "bool init(const CoreConfig& config, const MinerConfig& minerConfig, bool load_existing);"
        },
        {
          "name": "set_genesis_block",
          "line": 68,
          "signature": "bool set_genesis_block(const Block& b);"
        },
        {
          "name": "deinit",
          "line": 69,
          "signature": "bool deinit();"
        },
        {
          "name": "getCurrentBlockMajorVersion",
          "line": 98,
          "signature": "uint8_t getCurrentBlockMajorVersion();"
        },
        {
          "name": "get_current_blockchain_height",
          "line": 99,
          "signature": "uint32_t get_current_blockchain_height();"
        },
        {
          "name": "get_blocks",
          "line": 106,
          "signature": "bool get_blocks(uint32_t start_offset, uint32_t count, std::list<Block>& blocks, std::list<Transaction>& txs);"
        },
        {
          "name": "get_blocks",
          "line": 107,
          "signature": "bool get_blocks(uint32_t start_offset, uint32_t count, std::list<Block>& blocks);"
        },
        {
          "name": "rollback_chain_to",
          "line": 108,
          "signature": "bool rollback_chain_to(uint32_t height);"
        },
        {
          "name": "get_alternative_blocks",
          "line": 125,
          "signature": "bool get_alternative_blocks(std::list<Block> &blocks);"
        },
        {
          "name": "get_alternative_blocks_count",
          "line": 126,
          "signature": "size_t get_alternative_blocks_count();"
        },
        {
          "name": "coinsEmittedAtHeight",
          "line": 127,
          "signature": "uint64_t coinsEmittedAtHeight(uint64_t height);"
        },
        {
          "name": "difficultyAtHeight",
          "line": 128,
          "signature": "uint64_t difficultyAtHeight(uint64_t height);"
        },
        {
          "name": "set_cryptonote_protocol",
          "line": 130,
          "signature": "void set_cryptonote_protocol(i_cryptonote_protocol *pprotocol);"
        },
        {
          "name": "set_checkpoints",
          "line": 131,
          "signature": "void set_checkpoints(Checkpoints &&chk_pts);"
        },
        {
          "name": "get_pool_transactions_count",
          "line": 135,
          "signature": "size_t get_pool_transactions_count();"
        },
        {
          "name": "get_blockchain_total_transactions",
          "line": 136,
          "signature": "size_t get_blockchain_total_transactions();"
        },
        {
          "name": "print_blockchain",
          "line": 149,
          "signature": "void print_blockchain(uint32_t start_index, uint32_t end_index);"
        },
        {
          "name": "print_blockchain_index",
          "line": 150,
          "signature": "void print_blockchain_index();"
        },
        {
          "name": "print_blockchain_outs",
          "line": 153,
          "signature": "void print_blockchain_outs(const std::string &file);"
        },
        {
          "name": "getNextBlockDifficulty",
          "line": 161,
          "signature": "uint64_t getNextBlockDifficulty();"
        },
        {
          "name": "getTotalGeneratedAmount",
          "line": 162,
          "signature": "uint64_t getTotalGeneratedAmount();"
        },
        {
          "name": "is_key_image_spent",
          "line": 167,
          "signature": "bool is_key_image_spent(const Crypto::KeyImage &key_im);"
        },
        {
          "name": "add_new_tx",
          "line": 170,
          "signature": "bool add_new_tx(const Transaction &tx, const Crypto::Hash &tx_hash, size_t blob_size, tx_verification_context &tvc, bool keeped_by_block, uint32_t height);"
        },
        {
          "name": "load_state_data",
          "line": 171,
          "signature": "bool load_state_data();"
        },
        {
          "name": "parse_tx_from_blob",
          "line": 172,
          "signature": "bool parse_tx_from_blob(Transaction &tx, Crypto::Hash &tx_hash, Crypto::Hash &tx_prefix_hash, const BinaryArray &blob);"
        },
        {
          "name": "handle_incoming_block",
          "line": 173,
          "signature": "bool handle_incoming_block(const Block &b, block_verification_context &bvc, bool control_miner, bool relay_block);"
        },
        {
          "name": "check_tx_syntax",
          "line": 175,
          "signature": "bool check_tx_syntax(const Transaction &tx);  //check correct values, amounts and all lightweight checks not related with database"
        },
        {
          "name": "check_tx_semantic",
          "line": 176,
          "signature": "bool check_tx_semantic(const Transaction &tx, bool keeped_by_block, uint32_t &height); //check if tx already in memory pool or in main blockchain"
        },
        {
          "name": "check_tx_mixin",
          "line": 177,
          "signature": "bool check_tx_mixin(const Transaction& tx);   //check if the mixin is not too large"
        },
        {
          "name": "check_tx_fee",
          "line": 178,
          "signature": "bool check_tx_fee(const Transaction& tx, size_t blobSize, tx_verification_context& tvc); //check for proper tx fee"
        },
        {
          "name": "check_tx_ring_signature",
          "line": 180,
          "signature": "bool check_tx_ring_signature(const KeyInput &tx, const Crypto::Hash &tx_prefix_hash, const std::vector<Crypto::Signature> &sig);"
        },
        {
          "name": "is_tx_spendtime_unlocked",
          "line": 181,
          "signature": "bool is_tx_spendtime_unlocked(uint64_t unlock_time);"
        },
        {
          "name": "update_miner_block_template",
          "line": 182,
          "signature": "bool update_miner_block_template();"
        },
        {
          "name": "handle_command_line",
          "line": 183,
          "signature": "bool handle_command_line(const boost::program_options::variables_map &vm);"
        },
        {
          "name": "on_update_blocktemplate_interval",
          "line": 184,
          "signature": "bool on_update_blocktemplate_interval();"
        },
        {
          "name": "check_tx_inputs_keyimages_diff",
          "line": 185,
          "signature": "bool check_tx_inputs_keyimages_diff(const Transaction &tx);"
        },
        {
          "name": "poolUpdated",
          "line": 188,
          "signature": "void poolUpdated();"
        },
        {
          "name": "findStartAndFullOffsets",
          "line": 190,
          "signature": "bool findStartAndFullOffsets(const std::vector<Crypto::Hash> &knownBlockIds, uint64_t timestamp, uint32_t &startOffset, uint32_t &startFullOffset);"
        }
      ],
      "constants": []
    },
    "src/CryptoNoteCore/CoreConfig.cpp": {
      "path": "src/CryptoNoteCore/CoreConfig.cpp",
      "size": 1565,
      "lines": 39,
      "hash": "922377967ebad900",
      "functions": [],
      "constants": []
    },
    "src/CryptoNoteCore/CoreConfig.h": {
      "path": "src/CryptoNoteCore/CoreConfig.h",
      "size": 1228,
      "lines": 38,
      "hash": "a18f6345ec87ea54",
      "functions": [
        {
          "name": "initOptions",
          "line": 30,
          "signature": "static void initOptions(boost::program_options::options_description& desc);"
        },
        {
          "name": "init",
          "line": 31,
          "signature": "void init(const boost::program_options::variables_map& options);"
        }
      ],
      "constants": []
    },
    "src/CryptoNoteCore/CryptoNoteBasic.cpp": {
      "path": "src/CryptoNoteCore/CryptoNoteBasic.cpp",
      "size": 1039,
      "lines": 30,
      "hash": "26fce22488db2432",
      "functions": [
        {
          "name": "generateKeyPair",
          "line": 23,
          "signature": "KeyPair generateKeyPair() {"
        }
      ],
      "constants": []
    },
    "src/CryptoNoteCore/CryptoNoteBasic.h": {
      "path": "src/CryptoNoteCore/CryptoNoteBasic.h",
      "size": 2003,
      "lines": 48,
      "hash": "6f780382c4fdb81b",
      "functions": [
        {
          "name": "generateKeyPair",
          "line": 28,
          "signature": "KeyPair generateKeyPair();"
        },
        {
          "name": "makeParentBlockSerializer",
          "line": 42,
          "signature": "inline ParentBlockSerializer makeParentBlockSerializer(const Block& b, bool hashingSerialization, bool headerOnly) {"
        },
        {
          "name": "ParentBlockSerializer",
          "line": 44,
          "signature": "return ParentBlockSerializer(blockRef.parentBlock, blockRef.timestamp, blockRef.nonce, hashingSerialization, headerOnly);"
        }
      ],
      "constants": []
    },
    "src/CryptoNoteCore/CryptoNoteBasicImpl.cpp": {
      "path": "src/CryptoNoteCore/CryptoNoteBasicImpl.cpp",
      "size": 4194,
      "lines": 107,
      "hash": "3d3fb4d5e0c89e6b",
      "functions": [
        {
          "name": "getPenalizedAmount",
          "line": 36,
          "signature": "uint64_t getPenalizedAmount(uint64_t amount, size_t medianSize, size_t currentBlockSize) {"
        },
        {
          "name": "is_coinbase",
          "line": 71,
          "signature": "bool is_coinbase(const Transaction& tx) {"
        },
        {
          "name": "parseAccountAddressString",
          "line": 83,
          "signature": "bool parseAccountAddressString(uint64_t& prefix, AccountPublicAddress& adr, const std::string& str) {"
        },
        {
          "name": "parse_hash256",
          "line": 104,
          "signature": "bool parse_hash256(const std::string& str_hash, Crypto::Hash& hash) {"
        }
      ],
      "constants": []
    },
    "src/CryptoNoteCore/CryptoNoteBasicImpl.h": {
      "path": "src/CryptoNoteCore/CryptoNoteBasicImpl.h",
      "size": 3051,
      "lines": 66,
      "hash": "75cdd8c40722c017",
      "functions": [
        {
          "name": "getPenalizedAmount",
          "line": 42,
          "signature": "uint64_t getPenalizedAmount(uint64_t amount, size_t medianSize, size_t currentBlockSize);"
        },
        {
          "name": "parseAccountAddressString",
          "line": 44,
          "signature": "bool parseAccountAddressString(uint64_t& prefix, AccountPublicAddress& adr, const std::string& str);"
        },
        {
          "name": "is_coinbase",
          "line": 45,
          "signature": "bool is_coinbase(const Transaction& tx);"
        },
        {
          "name": "parse_hash256",
          "line": 56,
          "signature": "bool parse_hash256(const std::string& str_hash, Crypto::Hash& hash);"
        }
      ],
      "constants": []
    },
    "src/CryptoNoteCore/CryptoNoteFormatUtils.cpp": {
      "path": "src/CryptoNoteCore/CryptoNoteFormatUtils.cpp",
      "size": 18449,
      "lines": 588,
      "hash": "b0d290448d852164",
      "functions": [
        {
          "name": "parseAndValidateTransactionFromBinaryArray",
          "line": 45,
          "signature": "bool parseAndValidateTransactionFromBinaryArray(const BinaryArray& tx_blob, Transaction& tx, Hash& tx_hash, Hash& tx_prefix_hash) {"
        },
        {
          "name": "generate_key_image_helper",
          "line": 56,
          "signature": "bool generate_key_image_helper(const AccountKeys& ack, const PublicKey& tx_public_key, size_t real_output_index, KeyPair& in_ephemeral, KeyImage& ki) {"
        },
        {
          "name": "power_integral",
          "line": 79,
          "signature": "uint64_t power_integral(uint64_t a, uint64_t b) {"
        },
        {
          "name": "logger",
          "line": 99,
          "signature": "LoggerRef logger(log, \"construct_tx\");"
        },
        {
          "name": "generateDeterministicTransactionKeys",
          "line": 266,
          "signature": "return generateDeterministicTransactionKeys(inputsHash, viewSecretKey, generatedKeys);"
        },
        {
          "name": "get_inputs_money_amount",
          "line": 269,
          "signature": "bool get_inputs_money_amount(const Transaction& tx, uint64_t& money) {"
        },
        {
          "name": "get_block_height",
          "line": 286,
          "signature": "uint32_t get_block_height(const Block& b) {"
        },
        {
          "name": "check_inputs_types_supported",
          "line": 297,
          "signature": "bool check_inputs_types_supported(const TransactionPrefix& tx) {"
        },
        {
          "name": "check_outs_valid",
          "line": 312,
          "signature": "bool check_outs_valid(const TransactionPrefix& tx, std::string* error) {"
        },
        {
          "name": "checkMultisignatureInputsDiff",
          "line": 360,
          "signature": "bool checkMultisignatureInputsDiff(const TransactionPrefix& tx) {"
        },
        {
          "name": "check_money_overflow",
          "line": 373,
          "signature": "bool check_money_overflow(const TransactionPrefix &tx) {"
        },
        {
          "name": "check_inputs_overflow",
          "line": 377,
          "signature": "bool check_inputs_overflow(const TransactionPrefix &tx) {"
        },
        {
          "name": "check_outs_overflow",
          "line": 397,
          "signature": "bool check_outs_overflow(const TransactionPrefix& tx) {"
        },
        {
          "name": "get_outs_money_amount",
          "line": 407,
          "signature": "uint64_t get_outs_money_amount(const Transaction& tx) {"
        },
        {
          "name": "is_out_to_acc",
          "line": 426,
          "signature": "bool is_out_to_acc(const AccountKeys& acc, const KeyOutput& out_key, const KeyDerivation& derivation, size_t keyIndex) {"
        },
        {
          "name": "is_out_to_acc",
          "line": 432,
          "signature": "bool is_out_to_acc(const AccountKeys& acc, const KeyOutput& out_key, const PublicKey& tx_pub_key, size_t keyIndex) {"
        },
        {
          "name": "is_out_to_acc",
          "line": 435,
          "signature": "return is_out_to_acc(acc, out_key, derivation, keyIndex);"
        },
        {
          "name": "lookup_acc_outs",
          "line": 438,
          "signature": "bool lookup_acc_outs(const AccountKeys& acc, const Transaction& tx, std::vector<size_t>& outs, uint64_t& money_transfered) {"
        },
        {
          "name": "lookup_acc_outs",
          "line": 442,
          "signature": "return lookup_acc_outs(acc, tx, transactionPublicKey, outs, money_transfered);"
        },
        {
          "name": "lookup_acc_outs",
          "line": 445,
          "signature": "bool lookup_acc_outs(const AccountKeys& acc, const Transaction& tx, const PublicKey& tx_pub_key, std::vector<size_t>& outs, uint64_t& money_transfered) {"
        },
        {
          "name": "get_block_hashing_blob",
          "line": 471,
          "signature": "bool get_block_hashing_blob(const Block& b, BinaryArray& ba) {"
        },
        {
          "name": "get_parent_block_hashing_blob",
          "line": 483,
          "signature": "bool get_parent_block_hashing_blob(const Block& b, BinaryArray& blob) {"
        },
        {
          "name": "toBinaryArray",
          "line": 485,
          "signature": "return toBinaryArray(serializer, blob);"
        },
        {
          "name": "get_block_hash",
          "line": 488,
          "signature": "bool get_block_hash(const Block& b, Hash& res) {"
        },
        {
          "name": "getObjectHash",
          "line": 503,
          "signature": "return getObjectHash(ba, res);"
        },
        {
          "name": "get_block_hash",
          "line": 506,
          "signature": "Hash get_block_hash(const Block& b) {"
        },
        {
          "name": "get_aux_block_header_hash",
          "line": 512,
          "signature": "bool get_aux_block_header_hash(const Block& b, Hash& res) {"
        },
        {
          "name": "getObjectHash",
          "line": 518,
          "signature": "return getObjectHash(blob, res);"
        },
        {
          "name": "get_block_longhash",
          "line": 521,
          "signature": "bool get_block_longhash(cn_context &context, const Block& b, Hash& res) {"
        },
        {
          "name": "get_tx_tree_hash",
          "line": 558,
          "signature": "void get_tx_tree_hash(const std::vector<Hash>& tx_hashes, Hash& h) {"
        },
        {
          "name": "get_tx_tree_hash",
          "line": 562,
          "signature": "Hash get_tx_tree_hash(const std::vector<Hash>& tx_hashes) {"
        },
        {
          "name": "get_tx_tree_hash",
          "line": 568,
          "signature": "Hash get_tx_tree_hash(const Block& b) {"
        },
        {
          "name": "get_tx_tree_hash",
          "line": 576,
          "signature": "return get_tx_tree_hash(txs_ids);"
        },
        {
          "name": "is_valid_decomposed_amount",
          "line": 579,
          "signature": "bool is_valid_decomposed_amount(uint64_t amount) {"
        }
      ],
      "constants": [
        {
          "name": "cn_variant",
          "line": 534,
          "value": "b.majorVersion < 5 ? 0 : b.majorVersion >= BLOCK_MAJOR_VERSION_6 ? 2 : 1"
        },
        {
          "name": "light",
          "line": 535,
          "value": "( b.majorVersion >= BLOCK_MAJOR_VERSION_9) ? 1 : 0"
        }
      ]
    },
    "src/CryptoNoteCore/CryptoNoteFormatUtils.h": {
      "path": "src/CryptoNoteCore/CryptoNoteFormatUtils.h",
      "size": 6424,
      "lines": 147,
      "hash": "6e6b754a57e9c94c",
      "functions": [
        {
          "name": "parseAndValidateTransactionFromBinaryArray",
          "line": 34,
          "signature": "bool parseAndValidateTransactionFromBinaryArray(const BinaryArray& transactionBinaryArray, Transaction& transaction, Crypto::Hash& transactionHash, Crypto::Hash& transactionPrefixHash);"
        },
        {
          "name": "generateDeterministicTransactionKeys",
          "line": 61,
          "signature": "bool generateDeterministicTransactionKeys(const Crypto::Hash &inputsHash, const Crypto::SecretKey &viewSecretKey, KeyPair &generatedKeys);"
        },
        {
          "name": "generateDeterministicTransactionKeys",
          "line": 62,
          "signature": "bool generateDeterministicTransactionKeys(const Transaction &tx, const Crypto::SecretKey &viewSecretKey, KeyPair &generatedKeys);"
        },
        {
          "name": "is_out_to_acc",
          "line": 80,
          "signature": "bool is_out_to_acc(const AccountKeys& acc, const KeyOutput& out_key, const Crypto::PublicKey& tx_pub_key, size_t keyIndex);"
        },
        {
          "name": "is_out_to_acc",
          "line": 81,
          "signature": "bool is_out_to_acc(const AccountKeys& acc, const KeyOutput& out_key, const Crypto::KeyDerivation& derivation, size_t keyIndex);"
        },
        {
          "name": "lookup_acc_outs",
          "line": 82,
          "signature": "bool lookup_acc_outs(const AccountKeys& acc, const Transaction& tx, const Crypto::PublicKey& tx_pub_key, std::vector<size_t>& outs, uint64_t& money_transfered);"
        },
        {
          "name": "lookup_acc_outs",
          "line": 83,
          "signature": "bool lookup_acc_outs(const AccountKeys& acc, const Transaction& tx, std::vector<size_t>& outs, uint64_t& money_transfered);"
        },
        {
          "name": "generate_key_image_helper",
          "line": 84,
          "signature": "bool generate_key_image_helper(const AccountKeys& ack, const Crypto::PublicKey& tx_public_key, size_t real_output_index, KeyPair& in_ephemeral, Crypto::KeyImage& ki);"
        },
        {
          "name": "get_block_hashing_blob",
          "line": 87,
          "signature": "bool get_block_hashing_blob(const Block& b, BinaryArray& blob);"
        },
        {
          "name": "get_parent_block_hashing_blob",
          "line": 88,
          "signature": "bool get_parent_block_hashing_blob(const Block& b, BinaryArray& blob);"
        },
        {
          "name": "get_aux_block_header_hash",
          "line": 89,
          "signature": "bool get_aux_block_header_hash(const Block& b, Crypto::Hash& res);"
        },
        {
          "name": "get_block_hash",
          "line": 90,
          "signature": "bool get_block_hash(const Block& b, Crypto::Hash& res);"
        },
        {
          "name": "get_block_longhash",
          "line": 92,
          "signature": "bool get_block_longhash(Crypto::cn_context &context, const Block& b, Crypto::Hash& res);"
        },
        {
          "name": "get_inputs_money_amount",
          "line": 93,
          "signature": "bool get_inputs_money_amount(const Transaction& tx, uint64_t& money);"
        },
        {
          "name": "get_outs_money_amount",
          "line": 94,
          "signature": "uint64_t get_outs_money_amount(const Transaction& tx);"
        },
        {
          "name": "check_inputs_types_supported",
          "line": 95,
          "signature": "bool check_inputs_types_supported(const TransactionPrefix& tx);"
        },
        {
          "name": "check_outs_valid",
          "line": 96,
          "signature": "bool check_outs_valid(const TransactionPrefix& tx, std::string* error = 0);"
        },
        {
          "name": "checkMultisignatureInputsDiff",
          "line": 97,
          "signature": "bool checkMultisignatureInputsDiff(const TransactionPrefix& tx);"
        },
        {
          "name": "check_money_overflow",
          "line": 99,
          "signature": "bool check_money_overflow(const TransactionPrefix& tx);"
        },
        {
          "name": "check_outs_overflow",
          "line": 100,
          "signature": "bool check_outs_overflow(const TransactionPrefix& tx);"
        },
        {
          "name": "check_inputs_overflow",
          "line": 101,
          "signature": "bool check_inputs_overflow(const TransactionPrefix& tx);"
        },
        {
          "name": "get_block_height",
          "line": 102,
          "signature": "uint32_t get_block_height(const Block& b);"
        },
        {
          "name": "decompose_amount_into_digits",
          "line": 109,
          "signature": "void decompose_amount_into_digits(uint64_t amount, uint64_t dust_threshold, const chunk_handler_t& chunk_handler, const dust_handler_t& dust_handler) {"
        },
        {
          "name": "get_tx_tree_hash",
          "line": 140,
          "signature": "void get_tx_tree_hash(const std::vector<Crypto::Hash>& tx_hashes, Crypto::Hash& h);"
        },
        {
          "name": "is_valid_decomposed_amount",
          "line": 143,
          "signature": "bool is_valid_decomposed_amount(uint64_t amount);"
        }
      ],
      "constants": []
    },
    "src/CryptoNoteCore/CryptoNoteSerialization.cpp": {
      "path": "src/CryptoNoteCore/CryptoNoteSerialization.cpp",
      "size": 14771,
      "lines": 463,
      "hash": "086ff1c7201a80d5",
      "functions": [
        {
          "name": "getSignaturesCount",
          "line": 48,
          "signature": "size_t getSignaturesCount(const TransactionInput& input) {"
        },
        {
          "name": "getVariantValue",
          "line": 78,
          "signature": "void getVariantValue(CryptoNote::ISerializer& serializer, uint8_t tag, CryptoNote::TransactionInput& in) {"
        },
        {
          "name": "getVariantValue",
          "line": 103,
          "signature": "void getVariantValue(CryptoNote::ISerializer& serializer, uint8_t tag, CryptoNote::TransactionOutputTarget& out) {"
        },
        {
          "name": "serializePod",
          "line": 123,
          "signature": "bool serializePod(T& v, Common::StringView name, CryptoNote::ISerializer& serializer) {"
        },
        {
          "name": "serializeVarintVector",
          "line": 127,
          "signature": "bool serializeVarintVector(std::vector<uint32_t>& vector, CryptoNote::ISerializer& serializer, Common::StringView name) {"
        },
        {
          "name": "serialize",
          "line": 149,
          "signature": "bool serialize(PublicKey& pubKey, Common::StringView name, CryptoNote::ISerializer& serializer) {"
        },
        {
          "name": "serializePod",
          "line": 150,
          "signature": "return serializePod(pubKey, name, serializer);"
        },
        {
          "name": "serialize",
          "line": 153,
          "signature": "bool serialize(SecretKey& secKey, Common::StringView name, CryptoNote::ISerializer& serializer) {"
        },
        {
          "name": "serializePod",
          "line": 154,
          "signature": "return serializePod(secKey, name, serializer);"
        },
        {
          "name": "serialize",
          "line": 157,
          "signature": "bool serialize(Hash& h, Common::StringView name, CryptoNote::ISerializer& serializer) {"
        },
        {
          "name": "serializePod",
          "line": 158,
          "signature": "return serializePod(h, name, serializer);"
        },
        {
          "name": "serialize",
          "line": 161,
          "signature": "bool serialize(KeyImage& keyImage, Common::StringView name, CryptoNote::ISerializer& serializer) {"
        },
        {
          "name": "serializePod",
          "line": 162,
          "signature": "return serializePod(keyImage, name, serializer);"
        },
        {
          "name": "serializePod",
          "line": 167,
          "signature": "return serializePod(chacha8, name, serializer);"
        },
        {
          "name": "serialize",
          "line": 170,
          "signature": "bool serialize(Signature& sig, Common::StringView name, CryptoNote::ISerializer& serializer) {"
        },
        {
          "name": "serializePod",
          "line": 171,
          "signature": "return serializePod(sig, name, serializer);"
        },
        {
          "name": "serialize",
          "line": 174,
          "signature": "bool serialize(EllipticCurveScalar& ecScalar, Common::StringView name, CryptoNote::ISerializer& serializer) {"
        },
        {
          "name": "serializePod",
          "line": 175,
          "signature": "return serializePod(ecScalar, name, serializer);"
        },
        {
          "name": "serialize",
          "line": 178,
          "signature": "bool serialize(EllipticCurvePoint& ecPoint, Common::StringView name, CryptoNote::ISerializer& serializer) {"
        },
        {
          "name": "serializePod",
          "line": 179,
          "signature": "return serializePod(ecPoint, name, serializer);"
        },
        {
          "name": "serialize",
          "line": 186,
          "signature": "void serialize(TransactionPrefix& txP, ISerializer& serializer) {"
        },
        {
          "name": "serialize",
          "line": 199,
          "signature": "void serialize(Transaction& tx, ISerializer& serializer) {"
        },
        {
          "name": "serialize",
          "line": 246,
          "signature": "void serialize(TransactionInput& in, ISerializer& serializer) {"
        },
        {
          "name": "visitor",
          "line": 252,
          "signature": "VariantSerializer visitor(serializer, \"value\");"
        },
        {
          "name": "serialize",
          "line": 262,
          "signature": "void serialize(BaseInput& gen, ISerializer& serializer) {"
        },
        {
          "name": "serialize",
          "line": 266,
          "signature": "void serialize(KeyInput& key, ISerializer& serializer) {"
        },
        {
          "name": "serialize",
          "line": 272,
          "signature": "void serialize(MultisignatureInput& multisignature, ISerializer& serializer) {"
        },
        {
          "name": "serialize",
          "line": 280,
          "signature": "void serialize(TransactionInputs & inputs, ISerializer & serializer) {"
        },
        {
          "name": "serialize",
          "line": 285,
          "signature": "void serialize(TransactionOutput& output, ISerializer& serializer) {"
        },
        {
          "name": "serialize",
          "line": 290,
          "signature": "void serialize(TransactionOutputTarget& output, ISerializer& serializer) {"
        },
        {
          "name": "visitor",
          "line": 296,
          "signature": "VariantSerializer visitor(serializer, \"data\");"
        },
        {
          "name": "serialize",
          "line": 306,
          "signature": "void serialize(KeyOutput& key, ISerializer& serializer) {"
        },
        {
          "name": "serialize",
          "line": 310,
          "signature": "void serialize(MultisignatureOutput& multisignature, ISerializer& serializer) {"
        },
        {
          "name": "serialize",
          "line": 316,
          "signature": "void serialize(ParentBlockSerializer& pbs, ISerializer& serializer) {"
        },
        {
          "name": "serializeBlockHeader",
          "line": 388,
          "signature": "void serializeBlockHeader(BlockHeader& header, ISerializer& serializer) {"
        },
        {
          "name": "serialize",
          "line": 406,
          "signature": "void serialize(BlockHeader& header, ISerializer& serializer) {"
        },
        {
          "name": "serialize",
          "line": 410,
          "signature": "void serialize(Block& block, ISerializer& serializer) {"
        },
        {
          "name": "serialize",
          "line": 422,
          "signature": "void serialize(AccountPublicAddress& address, ISerializer& serializer) {"
        },
        {
          "name": "serialize",
          "line": 427,
          "signature": "void serialize(AccountKeys& keys, ISerializer& s) {"
        },
        {
          "name": "doSerialize",
          "line": 433,
          "signature": "void doSerialize(TransactionExtraMergeMiningTag& tag, ISerializer& serializer) {"
        },
        {
          "name": "serialize",
          "line": 440,
          "signature": "void serialize(TransactionExtraMergeMiningTag& tag, ISerializer& serializer) {"
        },
        {
          "name": "os",
          "line": 443,
          "signature": "StringOutputStream os(field);"
        },
        {
          "name": "output",
          "line": 444,
          "signature": "BinaryOutputStreamSerializer output(os);"
        },
        {
          "name": "input",
          "line": 451,
          "signature": "BinaryInputStreamSerializer input(stream);"
        },
        {
          "name": "serialize",
          "line": 456,
          "signature": "void serialize(KeyPair& keyPair, ISerializer& serializer) {"
        }
      ],
      "constants": []
    },
    "src/CryptoNoteCore/CryptoNoteSerialization.h": {
      "path": "src/CryptoNoteCore/CryptoNoteSerialization.h",
      "size": 3115,
      "lines": 69,
      "hash": "2d16247395a58689",
      "functions": [
        {
          "name": "serialize",
          "line": 27,
          "signature": "bool serialize(PublicKey& pubKey, Common::StringView name, CryptoNote::ISerializer& serializer);"
        },
        {
          "name": "serialize",
          "line": 28,
          "signature": "bool serialize(SecretKey& secKey, Common::StringView name, CryptoNote::ISerializer& serializer);"
        },
        {
          "name": "serialize",
          "line": 29,
          "signature": "bool serialize(Hash& h, Common::StringView name, CryptoNote::ISerializer& serializer);"
        },
        {
          "name": "serialize",
          "line": 30,
          "signature": "bool serialize(chacha8_iv &chacha8, Common::StringView name, CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 31,
          "signature": "bool serialize(KeyImage &keyImage, Common::StringView name, CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 32,
          "signature": "bool serialize(Signature& sig, Common::StringView name, CryptoNote::ISerializer& serializer);"
        },
        {
          "name": "serialize",
          "line": 33,
          "signature": "bool serialize(EllipticCurveScalar& ecScalar, Common::StringView name, CryptoNote::ISerializer& serializer);"
        },
        {
          "name": "serialize",
          "line": 34,
          "signature": "bool serialize(EllipticCurvePoint& ecPoint, Common::StringView name, CryptoNote::ISerializer& serializer);"
        },
        {
          "name": "serialize",
          "line": 43,
          "signature": "void serialize(TransactionPrefix& txP, ISerializer& serializer);"
        },
        {
          "name": "serialize",
          "line": 44,
          "signature": "void serialize(Transaction& tx, ISerializer& serializer);"
        },
        {
          "name": "serialize",
          "line": 45,
          "signature": "void serialize(TransactionInput& in, ISerializer& serializer);"
        },
        {
          "name": "serialize",
          "line": 46,
          "signature": "void serialize(TransactionOutput& in, ISerializer& serializer);"
        },
        {
          "name": "serialize",
          "line": 48,
          "signature": "void serialize(BaseInput& gen, ISerializer& serializer);"
        },
        {
          "name": "serialize",
          "line": 49,
          "signature": "void serialize(KeyInput& key, ISerializer& serializer);"
        },
        {
          "name": "serialize",
          "line": 50,
          "signature": "void serialize(MultisignatureInput& multisignature, ISerializer& serializer);"
        },
        {
          "name": "serialize",
          "line": 52,
          "signature": "void serialize(TransactionOutput& output, ISerializer& serializer);"
        },
        {
          "name": "serialize",
          "line": 53,
          "signature": "void serialize(TransactionOutputTarget& output, ISerializer& serializer);"
        },
        {
          "name": "serialize",
          "line": 54,
          "signature": "void serialize(KeyOutput& key, ISerializer& serializer);"
        },
        {
          "name": "serialize",
          "line": 55,
          "signature": "void serialize(MultisignatureOutput& multisignature, ISerializer& serializer);"
        },
        {
          "name": "serialize",
          "line": 57,
          "signature": "void serialize(BlockHeader& header, ISerializer& serializer);"
        },
        {
          "name": "serialize",
          "line": 58,
          "signature": "void serialize(Block& block, ISerializer& serializer);"
        },
        {
          "name": "serialize",
          "line": 59,
          "signature": "void serialize(ParentBlockSerializer& pbs, ISerializer& serializer);"
        },
        {
          "name": "serialize",
          "line": 60,
          "signature": "void serialize(TransactionExtraMergeMiningTag& tag, ISerializer& serializer);"
        },
        {
          "name": "serialize",
          "line": 62,
          "signature": "void serialize(AccountPublicAddress& address, ISerializer& serializer);"
        },
        {
          "name": "serialize",
          "line": 63,
          "signature": "void serialize(AccountKeys& keys, ISerializer& s);"
        },
        {
          "name": "serialize",
          "line": 64,
          "signature": "void serialize(TransactionInputs &inputs, ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 66,
          "signature": "void serialize(KeyPair& keyPair, ISerializer& serializer);"
        }
      ],
      "constants": []
    },
    "src/CryptoNoteCore/CryptoNoteStatInfo.h": {
      "path": "src/CryptoNoteCore/CryptoNoteStatInfo.h",
      "size": 1318,
      "lines": 41,
      "hash": "ad0f97c9c27048b9",
      "functions": [
        {
          "name": "serialize",
          "line": 32,
          "signature": "void serialize(ISerializer& s) {"
        }
      ],
      "constants": []
    },
    "src/CryptoNoteCore/CryptoNoteTools.cpp": {
      "path": "src/CryptoNoteCore/CryptoNoteTools.cpp",
      "size": 2931,
      "lines": 95,
      "hash": "23d979b98386f9ba",
      "functions": [
        {
          "name": "toBinaryArray",
          "line": 23,
          "signature": "bool toBinaryArray(const BinaryArray& object, BinaryArray& binaryArray) {"
        },
        {
          "name": "serializer",
          "line": 26,
          "signature": "BinaryOutputStreamSerializer serializer(stream);"
        },
        {
          "name": "getBinaryArrayHash",
          "line": 36,
          "signature": "void getBinaryArrayHash(const BinaryArray& binaryArray, Crypto::Hash& hash) {"
        },
        {
          "name": "getInputAmount",
          "line": 46,
          "signature": "uint64_t getInputAmount(const Transaction& transaction) {"
        },
        {
          "name": "getOutputAmount",
          "line": 74,
          "signature": "uint64_t getOutputAmount(const Transaction& transaction) {"
        },
        {
          "name": "decomposeAmount",
          "line": 83,
          "signature": "void decomposeAmount(uint64_t amount, uint64_t dustThreshold, std::vector<uint64_t>& decomposedAmounts) {"
        }
      ],
      "constants": []
    },
    "src/CryptoNoteCore/CryptoNoteTools.h": {
      "path": "src/CryptoNoteCore/CryptoNoteTools.h",
      "size": 3590,
      "lines": 128,
      "hash": "696261358e4f3c2d",
      "functions": [
        {
          "name": "getBinaryArrayHash",
          "line": 30,
          "signature": "void getBinaryArrayHash(const BinaryArray& binaryArray, Crypto::Hash& hash);"
        },
        {
          "name": "toBinaryArray",
          "line": 34,
          "signature": "bool toBinaryArray(const T& object, BinaryArray& binaryArray) {"
        },
        {
          "name": "serializer",
          "line": 37,
          "signature": "BinaryOutputStreamSerializer serializer(stream);"
        },
        {
          "name": "toBinaryArray",
          "line": 47,
          "signature": "bool toBinaryArray(const BinaryArray& object, BinaryArray& binaryArray);"
        },
        {
          "name": "toBinaryArray",
          "line": 50,
          "signature": "BinaryArray toBinaryArray(const T& object) {"
        },
        {
          "name": "fromBinaryArray",
          "line": 57,
          "signature": "bool fromBinaryArray(T& object, const BinaryArray& binaryArray) {"
        },
        {
          "name": "serializer",
          "line": 61,
          "signature": "BinaryInputStreamSerializer serializer(stream);"
        },
        {
          "name": "getObjectBinarySize",
          "line": 72,
          "signature": "bool getObjectBinarySize(const T& object, size_t& size) {"
        },
        {
          "name": "getObjectBinarySize",
          "line": 84,
          "signature": "size_t getObjectBinarySize(const T& object) {"
        },
        {
          "name": "getObjectHash",
          "line": 91,
          "signature": "bool getObjectHash(const T& object, Crypto::Hash& hash) {"
        },
        {
          "name": "getObjectHash",
          "line": 103,
          "signature": "bool getObjectHash(const T& object, Crypto::Hash& hash, size_t& size) {"
        },
        {
          "name": "getInputAmount",
          "line": 123,
          "signature": "uint64_t getInputAmount(const Transaction& transaction);"
        },
        {
          "name": "getOutputAmount",
          "line": 125,
          "signature": "uint64_t getOutputAmount(const Transaction& transaction);"
        },
        {
          "name": "decomposeAmount",
          "line": 126,
          "signature": "void decomposeAmount(uint64_t amount, uint64_t dustThreshold, std::vector<uint64_t>& decomposedAmounts);"
        }
      ],
      "constants": []
    },
    "src/CryptoNoteCore/Currency.cpp": {
      "path": "src/CryptoNoteCore/Currency.cpp",
      "size": 49423,
      "lines": 1386,
      "hash": "818348e29c0cf926",
      "functions": [
        {
          "name": "if",
          "line": 135,
          "signature": "else if (blockMajorVersion == BLOCK_MAJOR_VERSION_2) {"
        },
        {
          "name": "if",
          "line": 147,
          "signature": "else if (majorVersion == BLOCK_MAJOR_VERSION_3) {"
        },
        {
          "name": "if",
          "line": 150,
          "signature": "else if (majorVersion == BLOCK_MAJOR_VERSION_4) {"
        },
        {
          "name": "if",
          "line": 153,
          "signature": "else if (majorVersion == BLOCK_MAJOR_VERSION_5) {"
        },
        {
          "name": "if",
          "line": 156,
          "signature": "else if (majorVersion == BLOCK_MAJOR_VERSION_6) {"
        },
        {
          "name": "if",
          "line": 159,
          "signature": "else if (majorVersion == BLOCK_MAJOR_VERSION_7) {"
        },
        {
          "name": "if",
          "line": 162,
          "signature": "else if (majorVersion == BLOCK_MAJOR_VERSION_8) {"
        },
        {
          "name": "if",
          "line": 165,
          "signature": "else if (majorVersion == BLOCK_MAJOR_VERSION_9) {"
        },
        {
          "name": "calculateInterestV3",
          "line": 210,
          "signature": "return calculateInterestV3(amount, term);"
        },
        {
          "name": "calculateInterestV2",
          "line": 216,
          "signature": "return calculateInterestV2(amount, term);"
        },
        {
          "name": "calculateInterestV2",
          "line": 221,
          "signature": "return calculateInterestV2(amount, term);"
        },
        {
          "name": "isAmountApplicableInFusionTransactionInput",
          "line": 663,
          "signature": "return isAmountApplicableInFusionTransactionInput(amount, threshold, ignore, height);"
        },
        {
          "name": "getAccountAddressAsStr",
          "line": 699,
          "signature": "return getAccountAddressAsStr(m_publicAddressBase58Prefix, accountPublicAddress);"
        },
        {
          "name": "nextDifficultyV5",
          "line": 802,
          "signature": "return nextDifficultyV5(height, blockMajorVersion, timestamps, cumulativeDifficulties);"
        },
        {
          "name": "if",
          "line": 804,
          "signature": "else if (blockMajorVersion >= BLOCK_MAJOR_VERSION_4) {"
        },
        {
          "name": "nextDifficultyV4",
          "line": 805,
          "signature": "return nextDifficultyV4(height, blockMajorVersion, timestamps, cumulativeDifficulties);"
        },
        {
          "name": "if",
          "line": 807,
          "signature": "else if (blockMajorVersion >= BLOCK_MAJOR_VERSION_3) {"
        },
        {
          "name": "nextDifficultyV3",
          "line": 808,
          "signature": "return nextDifficultyV3(timestamps, cumulativeDifficulties);"
        },
        {
          "name": "if",
          "line": 810,
          "signature": "else if (blockMajorVersion == BLOCK_MAJOR_VERSION_2) {"
        },
        {
          "name": "nextDifficultyV2",
          "line": 811,
          "signature": "return nextDifficultyV2(timestamps, cumulativeDifficulties);"
        },
        {
          "name": "nextDifficultyV1",
          "line": 814,
          "signature": "return nextDifficultyV1(timestamps, cumulativeDifficulties);"
        },
        {
          "name": "solveTime",
          "line": 960,
          "signature": "int64_t solveTime(0);"
        },
        {
          "name": "check_hash",
          "line": 1135,
          "signature": "return check_hash(proofOfWork, currentDiffic);"
        },
        {
          "name": "checkProofOfWorkV1",
          "line": 1182,
          "signature": "return checkProofOfWorkV1(context, block, currentDiffic, proofOfWork);"
        },
        {
          "name": "checkProofOfWorkV2",
          "line": 1194,
          "signature": "return checkProofOfWorkV2(context, block, currentDiffic, proofOfWork);"
        }
      ],
      "constants": [
        {
          "name": "T",
          "line": 938,
          "value": "static_cast<int64_t>(m_difficultyTarget_DRGL)"
        },
        {
          "name": "adjust",
          "line": 955,
          "value": "0.998"
        },
        {
          "name": "k",
          "line": 957,
          "value": "N * (N + 1) / 2"
        },
        {
          "name": "T",
          "line": 998,
          "value": "CryptoNote::parameters::DIFFICULTY_TARGET_DRGL"
        },
        {
          "name": "T",
          "line": 1065,
          "value": "CryptoNote::parameters::DIFFICULTY_TARGET"
        },
        {
          "name": "KEY_IMAGE_SIZE",
          "line": 1201,
          "value": "sizeof(Crypto::KeyImage)"
        },
        {
          "name": "OUTPUT_KEY_SIZE",
          "line": 1202,
          "value": "sizeof(decltype(KeyOutput::key))"
        },
        {
          "name": "AMOUNT_SIZE",
          "line": 1203,
          "value": "sizeof(uint64_t) + 2"
        },
        {
          "name": "GLOBAL_INDEXES_VECTOR_SIZE_SIZE",
          "line": 1204,
          "value": "sizeof(uint8_t)"
        },
        {
          "name": "GLOBAL_INDEXES_INITIAL_VALUE_SIZE",
          "line": 1205,
          "value": "sizeof(uint32_t)"
        },
        {
          "name": "GLOBAL_INDEXES_DIFFERENCE_SIZE",
          "line": 1206,
          "value": "sizeof(uint32_t)"
        },
        {
          "name": "SIGNATURE_SIZE",
          "line": 1207,
          "value": "sizeof(Crypto::Signature)"
        },
        {
          "name": "EXTRA_TAG_SIZE",
          "line": 1208,
          "value": "sizeof(uint8_t)"
        },
        {
          "name": "INPUT_TAG_SIZE",
          "line": 1209,
          "value": "sizeof(uint8_t)"
        },
        {
          "name": "OUTPUT_TAG_SIZE",
          "line": 1210,
          "value": "sizeof(uint8_t)"
        },
        {
          "name": "PUBLIC_KEY_SIZE",
          "line": 1211,
          "value": "sizeof(Crypto::PublicKey)"
        },
        {
          "name": "TRANSACTION_VERSION_SIZE",
          "line": 1212,
          "value": "sizeof(uint8_t)"
        },
        {
          "name": "TRANSACTION_UNLOCK_TIME_SIZE",
          "line": 1213,
          "value": "sizeof(uint64_t)"
        },
        {
          "name": "outputsSize",
          "line": 1215,
          "value": "outputCount * (OUTPUT_TAG_SIZE + OUTPUT_KEY_SIZE + AMOUNT_SIZE)"
        },
        {
          "name": "headerSize",
          "line": 1216,
          "value": "TRANSACTION_VERSION_SIZE + TRANSACTION_UNLOCK_TIME_SIZE + EXTRA_TAG_SIZE + PUBLIC_KEY_SIZE"
        }
      ]
    },
    "src/CryptoNoteCore/Currency.h": {
      "path": "src/CryptoNoteCore/Currency.h",
      "size": 21629,
      "lines": 431,
      "hash": "516126fea50e412b",
      "functions": [
        {
          "name": "timestampCheckWindow_v1",
          "line": 47,
          "signature": "return timestampCheckWindow_v1();"
        },
        {
          "name": "timestampCheckWindow",
          "line": 50,
          "signature": "return timestampCheckWindow();"
        },
        {
          "name": "blockFutureTimeLimit_v2",
          "line": 57,
          "signature": "return blockFutureTimeLimit_v2();"
        },
        {
          "name": "if",
          "line": 59,
          "signature": "else if (blockMajorVersion >= BLOCK_MAJOR_VERSION_5) {"
        },
        {
          "name": "blockFutureTimeLimit_v1",
          "line": 60,
          "signature": "return blockFutureTimeLimit_v1();"
        },
        {
          "name": "blockFutureTimeLimit",
          "line": 63,
          "signature": "return blockFutureTimeLimit();"
        },
        {
          "name": "emissionSpeedFactor_FUEGO",
          "line": 75,
          "signature": "return emissionSpeedFactor_FUEGO();"
        },
        {
          "name": "if",
          "line": 77,
          "signature": "else if (blockMajorVersion == BLOCK_MAJOR_VERSION_8) {"
        },
        {
          "name": "emissionSpeedFactor_FANGO",
          "line": 78,
          "signature": "return emissionSpeedFactor_FANGO();"
        },
        {
          "name": "emissionSpeedFactor",
          "line": 81,
          "signature": "return emissionSpeedFactor();"
        },
        {
          "name": "difficultyTarget_DRGL",
          "line": 108,
          "signature": "return difficultyTarget_DRGL();"
        },
        {
          "name": "difficultyTarget",
          "line": 111,
          "signature": "return difficultyTarget();"
        },
        {
          "name": "difficultyBlocksCount2",
          "line": 125,
          "signature": "return difficultyBlocksCount2();"
        },
        {
          "name": "difficultyBlocksCount",
          "line": 129,
          "signature": "return difficultyBlocksCount();"
        },
        {
          "name": "lockedTxAllowedDeltaSeconds_v2",
          "line": 147,
          "signature": "return lockedTxAllowedDeltaSeconds_v2();"
        },
        {
          "name": "lockedTxAllowedDeltaSeconds",
          "line": 150,
          "signature": "return lockedTxAllowedDeltaSeconds();"
        },
        {
          "name": "init",
          "line": 229,
          "signature": "bool init();"
        },
        {
          "name": "generateGenesisBlock",
          "line": 231,
          "signature": "bool generateGenesisBlock();"
        },
        {
          "name": "currency",
          "line": 328,
          "signature": "Currency currency() {"
        },
        {
          "name": "generateGenesisTransaction",
          "line": 335,
          "signature": "Transaction generateGenesisTransaction();"
        }
      ],
      "constants": []
    },
    "src/CryptoNoteCore/DepositIndex.cpp": {
      "path": "src/CryptoNoteCore/DepositIndex.cpp",
      "size": 4371,
      "lines": 163,
      "hash": "382aa42a378c4066",
      "functions": [
        {
          "name": "sumWillOverflow",
          "line": 50,
          "signature": "static inline bool sumWillOverflow(int64_t x, int64_t y) {"
        },
        {
          "name": "sumWillOverflow",
          "line": 62,
          "signature": "static inline bool sumWillOverflow(uint64_t x, uint64_t y) {"
        }
      ],
      "constants": []
    },
    "src/CryptoNoteCore/DepositIndex.h": {
      "path": "src/CryptoNoteCore/DepositIndex.h",
      "size": 1955,
      "lines": 60,
      "hash": "350be315a37e4728",
      "functions": [
        {
          "name": "DepositIndex",
          "line": 33,
          "signature": "explicit DepositIndex(DepositHeight expectedHeight);"
        },
        {
          "name": "pushBlock",
          "line": 34,
          "signature": "void pushBlock(DepositAmount amount, DepositInterest interest);"
        },
        {
          "name": "popBlock",
          "line": 35,
          "signature": "void popBlock();"
        },
        {
          "name": "reserve",
          "line": 36,
          "signature": "void reserve(DepositHeight expectedHeight);"
        },
        {
          "name": "popBlocks",
          "line": 37,
          "signature": "size_t popBlocks(DepositHeight from);"
        },
        {
          "name": "serialize",
          "line": 43,
          "signature": "void serialize(ISerializer& s);"
        },
        {
          "name": "serialize",
          "line": 51,
          "signature": "void serialize(ISerializer& s);"
        }
      ],
      "constants": []
    },
    "src/CryptoNoteCore/Difficulty.cpp": {
      "path": "src/CryptoNoteCore/Difficulty.cpp",
      "size": 2393,
      "lines": 76,
      "hash": "ac7a86a60d15f874",
      "functions": [
        {
          "name": "mul",
          "line": 36,
          "signature": "static inline void mul(uint64_t a, uint64_t b, uint64_t &low, uint64_t &high) {"
        },
        {
          "name": "mul",
          "line": 45,
          "signature": "static inline void mul(uint64_t a, uint64_t b, uint64_t &low, uint64_t &high) {"
        },
        {
          "name": "cadd",
          "line": 51,
          "signature": "static inline bool cadd(uint64_t a, uint64_t b) {"
        },
        {
          "name": "cadc",
          "line": 55,
          "signature": "static inline bool cadc(uint64_t a, uint64_t b, bool c) {"
        },
        {
          "name": "check_hash",
          "line": 59,
          "signature": "bool check_hash(const Crypto::Hash &hash, difficulty_type difficulty) {"
        }
      ],
      "constants": []
    },
    "src/CryptoNoteCore/Difficulty.h": {
      "path": "src/CryptoNoteCore/Difficulty.h",
      "size": 1062,
      "lines": 31,
      "hash": "29c2bc73dd55a824",
      "functions": [
        {
          "name": "check_hash",
          "line": 29,
          "signature": "bool check_hash(const Crypto::Hash &hash, difficulty_type difficulty);"
        }
      ],
      "constants": []
    },
    "src/CryptoNoteCore/IBlock.cpp": {
      "path": "src/CryptoNoteCore/IBlock.cpp",
      "size": 908,
      "lines": 24,
      "hash": "de6e82a5e301d9aa",
      "functions": [],
      "constants": []
    },
    "src/CryptoNoteCore/IBlock.h": {
      "path": "src/CryptoNoteCore/IBlock.h",
      "size": 1116,
      "lines": 32,
      "hash": "85f89c9c2fe8cb25",
      "functions": [],
      "constants": []
    },
    "src/CryptoNoteCore/IBlockchainStorageObserver.h": {
      "path": "src/CryptoNoteCore/IBlockchainStorageObserver.h",
      "size": 1024,
      "lines": 29,
      "hash": "69900c56c3450f84",
      "functions": [],
      "constants": []
    },
    "src/CryptoNoteCore/ICore.h": {
      "path": "src/CryptoNoteCore/ICore.h",
      "size": 7776,
      "lines": 128,
      "hash": "311a0a6cadabc528",
      "functions": [],
      "constants": []
    },
    "src/CryptoNoteCore/ICoreObserver.h": {
      "path": "src/CryptoNoteCore/ICoreObserver.h",
      "size": 1017,
      "lines": 30,
      "hash": "bf665a66fe5fa3b8",
      "functions": [
        {
          "name": "blockchainUpdated",
          "line": 25,
          "signature": "virtual void blockchainUpdated() {};"
        },
        {
          "name": "poolUpdated",
          "line": 26,
          "signature": "virtual void poolUpdated() {};"
        }
      ],
      "constants": []
    },
    "src/CryptoNoteCore/IMinerHandler.h": {
      "path": "src/CryptoNoteCore/IMinerHandler.h",
      "size": 1238,
      "lines": 32,
      "hash": "91efaed334845bc5",
      "functions": [],
      "constants": []
    },
    "src/CryptoNoteCore/ITimeProvider.cpp": {
      "path": "src/CryptoNoteCore/ITimeProvider.cpp",
      "size": 867,
      "lines": 19,
      "hash": "0d33282198179b96",
      "functions": [],
      "constants": []
    },
    "src/CryptoNoteCore/ITimeProvider.h": {
      "path": "src/CryptoNoteCore/ITimeProvider.h",
      "size": 1119,
      "lines": 36,
      "hash": "1b7012d3b0075dbe",
      "functions": [
        {
          "name": "time",
          "line": 31,
          "signature": "return time(nullptr);"
        }
      ],
      "constants": []
    },
    "src/CryptoNoteCore/ITransactionValidator.h": {
      "path": "src/CryptoNoteCore/ITransactionValidator.h",
      "size": 1648,
      "lines": 53,
      "hash": "dc870beb6f7a21ff",
      "functions": [
        {
          "name": "clear",
          "line": 32,
          "signature": "void clear() {"
        }
      ],
      "constants": []
    },
    "src/CryptoNoteCore/ITxPoolObserver.h": {
      "path": "src/CryptoNoteCore/ITxPoolObserver.h",
      "size": 990,
      "lines": 29,
      "hash": "1f50944570f7b71f",
      "functions": [],
      "constants": []
    },
    "src/CryptoNoteCore/IntrusiveLinkedList.h": {
      "path": "src/CryptoNoteCore/IntrusiveLinkedList.h",
      "size": 5697,
      "lines": 212,
      "hash": "3364e102347a6310",
      "functions": [
        {
          "name": "insert",
          "line": 56,
          "signature": "bool insert(Value& value);"
        },
        {
          "name": "remove",
          "line": 57,
          "signature": "bool remove(Value& value);"
        },
        {
          "name": "begin",
          "line": 61,
          "signature": "iterator begin();"
        },
        {
          "name": "end",
          "line": 62,
          "signature": "iterator end();"
        },
        {
          "name": "iterator",
          "line": 143,
          "signature": "return iterator(head);"
        },
        {
          "name": "iterator",
          "line": 148,
          "signature": "return iterator(nullptr);"
        }
      ],
      "constants": []
    },
    "src/CryptoNoteCore/InvestmentIndex.cpp": {
      "path": "src/CryptoNoteCore/InvestmentIndex.cpp",
      "size": 4444,
      "lines": 163,
      "hash": "47786e47f1dc969a",
      "functions": [
        {
          "name": "sumWillOverflow",
          "line": 50,
          "signature": "static inline bool sumWillOverflow(int64_t x, int64_t y) {"
        },
        {
          "name": "sumWillOverflow",
          "line": 62,
          "signature": "static inline bool sumWillOverflow(uint64_t x, uint64_t y) {"
        }
      ],
      "constants": []
    },
    "src/CryptoNoteCore/InvestmentIndex.h": {
      "path": "src/CryptoNoteCore/InvestmentIndex.h",
      "size": 1980,
      "lines": 60,
      "hash": "70fdaf280a84d732",
      "functions": [
        {
          "name": "InvestmentIndex",
          "line": 33,
          "signature": "explicit InvestmentIndex(DepositHeight expectedHeight);"
        },
        {
          "name": "pushBlock",
          "line": 34,
          "signature": "void pushBlock(DepositAmount amount, DepositInterest interest);"
        },
        {
          "name": "popBlock",
          "line": 35,
          "signature": "void popBlock();"
        },
        {
          "name": "reserve",
          "line": 36,
          "signature": "void reserve(DepositHeight expectedHeight);"
        },
        {
          "name": "popBlocks",
          "line": 37,
          "signature": "size_t popBlocks(DepositHeight from);"
        },
        {
          "name": "serialize",
          "line": 43,
          "signature": "void serialize(ISerializer& s);"
        },
        {
          "name": "serialize",
          "line": 51,
          "signature": "void serialize(ISerializer& s);"
        }
      ],
      "constants": []
    },
    "src/CryptoNoteCore/MessageQueue.h": {
      "path": "src/CryptoNoteCore/MessageQueue.h",
      "size": 3067,
      "lines": 115,
      "hash": "e3f975655ddf3bf5",
      "functions": [
        {
          "name": "pop",
          "line": 34,
          "signature": "void pop();"
        },
        {
          "name": "push",
          "line": 35,
          "signature": "void push(const MessageType& message);"
        },
        {
          "name": "stop",
          "line": 37,
          "signature": "void stop();"
        },
        {
          "name": "wait",
          "line": 42,
          "signature": "void wait();"
        }
      ],
      "constants": []
    },
    "src/CryptoNoteCore/Miner.cpp": {
      "path": "src/CryptoNoteCore/Miner.cpp",
      "size": 13942,
      "lines": 429,
      "hash": "56dfd3f1a0900006",
      "functions": [
        {
          "name": "request_block_template",
          "line": 99,
          "signature": "return request_block_template();"
        },
        {
          "name": "millisecondsSinceEpoch",
          "line": 142,
          "signature": "uint64_t millisecondsSinceEpoch() {"
        },
        {
          "name": "lb",
          "line": 294,
          "signature": "Block lb(bl); // copy to local block"
        }
      ],
      "constants": []
    },
    "src/CryptoNoteCore/Miner.h": {
      "path": "src/CryptoNoteCore/Miner.h",
      "size": 3294,
      "lines": 103,
      "hash": "3295062c91ec1330",
      "functions": [
        {
          "name": "init",
          "line": 41,
          "signature": "bool init(const MinerConfig& config);"
        },
        {
          "name": "set_block_template",
          "line": 42,
          "signature": "bool set_block_template(const Block& bl, const difficulty_type& diffic);"
        },
        {
          "name": "on_block_chain_update",
          "line": 43,
          "signature": "bool on_block_chain_update();"
        },
        {
          "name": "start",
          "line": 44,
          "signature": "bool start(const AccountPublicAddress& adr, size_t threads_count);"
        },
        {
          "name": "get_speed",
          "line": 45,
          "signature": "uint64_t get_speed();"
        },
        {
          "name": "send_stop_signal",
          "line": 46,
          "signature": "void send_stop_signal();"
        },
        {
          "name": "stop",
          "line": 47,
          "signature": "bool stop();"
        },
        {
          "name": "is_mining",
          "line": 48,
          "signature": "bool is_mining();"
        },
        {
          "name": "on_idle",
          "line": 49,
          "signature": "bool on_idle();"
        },
        {
          "name": "on_synchronized",
          "line": 50,
          "signature": "void on_synchronized();"
        },
        {
          "name": "find_nonce_for_given_block",
          "line": 52,
          "signature": "static bool find_nonce_for_given_block(Crypto::cn_context &context, Block& bl, const difficulty_type& diffic);"
        },
        {
          "name": "pause",
          "line": 53,
          "signature": "void pause();"
        },
        {
          "name": "resume",
          "line": 54,
          "signature": "void resume();"
        },
        {
          "name": "do_print_hashrate",
          "line": 55,
          "signature": "void do_print_hashrate(bool do_hr);"
        },
        {
          "name": "worker_thread",
          "line": 58,
          "signature": "bool worker_thread(uint32_t th_local_index);"
        },
        {
          "name": "request_block_template",
          "line": 59,
          "signature": "bool request_block_template();"
        },
        {
          "name": "merge_hr",
          "line": 60,
          "signature": "void  merge_hr();"
        },
        {
          "name": "serialize",
          "line": 65,
          "signature": "void serialize(ISerializer& s) {"
        }
      ],
      "constants": []
    },
    "src/CryptoNoteCore/MinerConfig.cpp": {
      "path": "src/CryptoNoteCore/MinerConfig.cpp",
      "size": 2185,
      "lines": 55,
      "hash": "5c6dd075a8d8676a",
      "functions": [],
      "constants": []
    },
    "src/CryptoNoteCore/MinerConfig.h": {
      "path": "src/CryptoNoteCore/MinerConfig.h",
      "size": 1257,
      "lines": 40,
      "hash": "bbeb11db3def90df",
      "functions": [
        {
          "name": "initOptions",
          "line": 31,
          "signature": "static void initOptions(boost::program_options::options_description& desc);"
        },
        {
          "name": "init",
          "line": 32,
          "signature": "void init(const boost::program_options::variables_map& options);"
        }
      ],
      "constants": []
    },
    "src/CryptoNoteCore/OnceInInterval.h": {
      "path": "src/CryptoNoteCore/OnceInInterval.h",
      "size": 1355,
      "lines": 50,
      "hash": "fc79f9c906750b4f",
      "functions": [
        {
          "name": "call",
          "line": 32,
          "signature": "bool call(F func) {"
        }
      ],
      "constants": []
    },
    "src/CryptoNoteCore/SwappedMap.cpp": {
      "path": "src/CryptoNoteCore/SwappedMap.cpp",
      "size": 914,
      "lines": 23,
      "hash": "e7490f08dbc9a33e",
      "functions": [],
      "constants": []
    },
    "src/CryptoNoteCore/SwappedMap.h": {
      "path": "src/CryptoNoteCore/SwappedMap.h",
      "size": 12907,
      "lines": 387,
      "hash": "a77404b6b579d461",
      "functions": [
        {
          "name": "open",
          "line": 89,
          "signature": "bool open(const std::string& itemFileName, const std::string& indexFileName, size_t poolSize);"
        },
        {
          "name": "close",
          "line": 90,
          "signature": "void close();"
        },
        {
          "name": "begin",
          "line": 93,
          "signature": "const_iterator begin();"
        },
        {
          "name": "end",
          "line": 94,
          "signature": "const_iterator end();"
        },
        {
          "name": "find",
          "line": 96,
          "signature": "const_iterator find(const Key& key);"
        },
        {
          "name": "clear",
          "line": 98,
          "signature": "void clear();"
        },
        {
          "name": "erase",
          "line": 99,
          "signature": "void erase(const_iterator iterator);"
        }
      ],
      "constants": []
    },
    "src/CryptoNoteCore/SwappedVector.cpp": {
      "path": "src/CryptoNoteCore/SwappedVector.cpp",
      "size": 915,
      "lines": 23,
      "hash": "67e666de33af155d",
      "functions": [],
      "constants": []
    },
    "src/CryptoNoteCore/SwappedVector.h": {
      "path": "src/CryptoNoteCore/SwappedVector.h",
      "size": 11096,
      "lines": 410,
      "hash": "c98f3b5c870dac5e",
      "functions": [
        {
          "name": "const_iterator",
          "line": 110,
          "signature": "return const_iterator(m_swappedVector, m_index + n);"
        },
        {
          "name": "const_iterator",
          "line": 114,
          "signature": "return const_iterator(i.m_swappedVector, n + i.m_index);"
        },
        {
          "name": "const_iterator",
          "line": 122,
          "signature": "return const_iterator(m_swappedVector, m_index - n);"
        },
        {
          "name": "open",
          "line": 151,
          "signature": "bool open(const std::string& itemFileName, const std::string& indexFileName, size_t poolSize);"
        },
        {
          "name": "close",
          "line": 152,
          "signature": "void close();"
        },
        {
          "name": "begin",
          "line": 156,
          "signature": "const_iterator begin();"
        },
        {
          "name": "end",
          "line": 157,
          "signature": "const_iterator end();"
        },
        {
          "name": "clear",
          "line": 161,
          "signature": "void clear();"
        },
        {
          "name": "pop_back",
          "line": 162,
          "signature": "void pop_back();"
        },
        {
          "name": "push_back",
          "line": 163,
          "signature": "void push_back(const T& item);"
        },
        {
          "name": "const_iterator",
          "line": 267,
          "signature": "return const_iterator(this, 0);"
        }
      ],
      "constants": []
    },
    "src/CryptoNoteCore/Transaction.cpp": {
      "path": "src/CryptoNoteCore/Transaction.cpp",
      "size": 19262,
      "lines": 553,
      "hash": "d8c6c070b115b227",
      "functions": [
        {
          "name": "derivePublicKey",
          "line": 36,
          "signature": "void derivePublicKey(const AccountPublicAddress& to, const SecretKey& txKey, size_t outputIndex, PublicKey& ephemeralKey) {"
        },
        {
          "name": "invalidateHash",
          "line": 122,
          "signature": "void invalidateHash();"
        },
        {
          "name": "pk",
          "line": 207,
          "signature": "PublicKey pk(NULL_PUBLIC_KEY);"
        },
        {
          "name": "getObjectHash",
          "line": 224,
          "signature": "return getObjectHash(transaction.inputs);"
        },
        {
          "name": "addInput",
          "line": 275,
          "signature": "return addInput(input);"
        },
        {
          "name": "toBinaryArray",
          "line": 412,
          "signature": "return toBinaryArray(transaction);"
        }
      ],
      "constants": []
    },
    "src/CryptoNoteCore/TransactionApi.h": {
      "path": "src/CryptoNoteCore/TransactionApi.h",
      "size": 1371,
      "lines": 31,
      "hash": "a603973cadc4f391",
      "functions": [],
      "constants": []
    },
    "src/CryptoNoteCore/TransactionApiExtra.h": {
      "path": "src/CryptoNoteCore/TransactionApiExtra.h",
      "size": 2686,
      "lines": 91,
      "hash": "58817a27611ba246",
      "functions": [
        {
          "name": "parse",
          "line": 32,
          "signature": "bool parse(const std::vector<uint8_t>& extra) {"
        },
        {
          "name": "set",
          "line": 48,
          "signature": "void set(const T& value) {"
        },
        {
          "name": "append",
          "line": 58,
          "signature": "void append(const T& value) {"
        }
      ],
      "constants": []
    },
    "src/CryptoNoteCore/TransactionExtra.cpp": {
      "path": "src/CryptoNoteCore/TransactionExtra.cpp",
      "size": 13105,
      "lines": 453,
      "hash": "1e87e06d2326dae7",
      "functions": [
        {
          "name": "ar",
          "line": 45,
          "signature": "BinaryInputStreamSerializer ar(iss);"
        },
        {
          "name": "addTransactionPublicKeyToExtra",
          "line": 151,
          "signature": "return addTransactionPublicKeyToExtra(extra, t.publicKey);"
        },
        {
          "name": "addExtraNonceToTransactionExtra",
          "line": 156,
          "signature": "return addExtraNonceToTransactionExtra(extra, t.nonce);"
        },
        {
          "name": "appendMergeMiningTagToExtra",
          "line": 161,
          "signature": "return appendMergeMiningTagToExtra(extra, t);"
        },
        {
          "name": "append_message_to_extra",
          "line": 166,
          "signature": "return append_message_to_extra(extra, t);"
        },
        {
          "name": "visitor",
          "line": 178,
          "signature": "ExtraSerializerVisitor visitor(tx_extra);"
        },
        {
          "name": "findTransactionExtraFieldByType",
          "line": 249,
          "signature": "return findTransactionExtraFieldByType(tx_extra_fields, mm_tag);"
        }
      ],
      "constants": [
        {
          "name": "TX_EXTRA_MESSAGE_CHECKSUM_SIZE",
          "line": 370,
          "value": "4"
        }
      ]
    },
    "src/CryptoNoteCore/TransactionExtra.h": {
      "path": "src/CryptoNoteCore/TransactionExtra.h",
      "size": 4460,
      "lines": 113,
      "hash": "ab549843823705ca",
      "functions": [
        {
          "name": "encrypt",
          "line": 63,
          "signature": "bool encrypt(std::size_t index, const std::string &message, const AccountPublicAddress* recipient, const KeyPair &txkey);"
        },
        {
          "name": "serialize",
          "line": 66,
          "signature": "bool serialize(ISerializer& serializer);"
        },
        {
          "name": "findTransactionExtraFieldByType",
          "line": 82,
          "signature": "bool findTransactionExtraFieldByType(const std::vector<TransactionExtraField>& tx_extra_fields, T& field) {"
        },
        {
          "name": "parseTransactionExtra",
          "line": 93,
          "signature": "bool parseTransactionExtra(const std::vector<uint8_t>& tx_extra, std::vector<TransactionExtraField>& tx_extra_fields);"
        },
        {
          "name": "writeTransactionExtra",
          "line": 94,
          "signature": "bool writeTransactionExtra(std::vector<uint8_t>& tx_extra, const std::vector<TransactionExtraField>& tx_extra_fields);"
        },
        {
          "name": "addTransactionPublicKeyToExtra",
          "line": 97,
          "signature": "bool addTransactionPublicKeyToExtra(std::vector<uint8_t>& tx_extra, const Crypto::PublicKey& tx_pub_key);"
        },
        {
          "name": "addExtraNonceToTransactionExtra",
          "line": 98,
          "signature": "bool addExtraNonceToTransactionExtra(std::vector<uint8_t>& tx_extra, const BinaryArray& extra_nonce);"
        },
        {
          "name": "setPaymentIdToTransactionExtraNonce",
          "line": 99,
          "signature": "void setPaymentIdToTransactionExtraNonce(BinaryArray& extra_nonce, const Crypto::Hash& payment_id);"
        },
        {
          "name": "getPaymentIdFromTransactionExtraNonce",
          "line": 100,
          "signature": "bool getPaymentIdFromTransactionExtraNonce(const BinaryArray& extra_nonce, Crypto::Hash& payment_id);"
        },
        {
          "name": "appendMergeMiningTagToExtra",
          "line": 101,
          "signature": "bool appendMergeMiningTagToExtra(std::vector<uint8_t>& tx_extra, const TransactionExtraMergeMiningTag& mm_tag);"
        },
        {
          "name": "append_message_to_extra",
          "line": 102,
          "signature": "bool append_message_to_extra(std::vector<uint8_t>& tx_extra, const tx_extra_message& message);"
        },
        {
          "name": "appendTTLToExtra",
          "line": 104,
          "signature": "void appendTTLToExtra(std::vector<uint8_t>& tx_extra, uint64_t ttl);"
        },
        {
          "name": "getMergeMiningTagFromExtra",
          "line": 105,
          "signature": "bool getMergeMiningTagFromExtra(const std::vector<uint8_t>& tx_extra, TransactionExtraMergeMiningTag& mm_tag);"
        },
        {
          "name": "createTxExtraWithPaymentId",
          "line": 107,
          "signature": "bool createTxExtraWithPaymentId(const std::string& paymentIdString, std::vector<uint8_t>& extra);"
        },
        {
          "name": "getPaymentIdFromTxExtra",
          "line": 109,
          "signature": "bool getPaymentIdFromTxExtra(const std::vector<uint8_t>& extra, Crypto::Hash& paymentId);"
        },
        {
          "name": "parsePaymentId",
          "line": 110,
          "signature": "bool parsePaymentId(const std::string& paymentIdString, Crypto::Hash& paymentId);"
        }
      ],
      "constants": [
        {
          "name": "TX_EXTRA_PADDING_MAX_COUNT",
          "line": 27,
          "value": "255"
        },
        {
          "name": "TX_EXTRA_NONCE_MAX_COUNT",
          "line": 28,
          "value": "255"
        },
        {
          "name": "TX_EXTRA_TAG_PADDING",
          "line": 30,
          "value": "0x00"
        },
        {
          "name": "TX_EXTRA_TAG_PUBKEY",
          "line": 31,
          "value": "0x01"
        },
        {
          "name": "TX_EXTRA_NONCE",
          "line": 32,
          "value": "0x02"
        },
        {
          "name": "TX_EXTRA_MERGE_MINING_TAG",
          "line": 33,
          "value": "0x03"
        },
        {
          "name": "TX_EXTRA_MESSAGE_TAG",
          "line": 34,
          "value": "0x04"
        },
        {
          "name": "TX_EXTRA_TTL",
          "line": 35,
          "value": "0x05"
        },
        {
          "name": "TX_EXTRA_NONCE_PAYMENT_ID",
          "line": 37,
          "value": "0x00"
        }
      ]
    },
    "src/CryptoNoteCore/TransactionPool.cpp": {
      "path": "src/CryptoNoteCore/TransactionPool.cpp",
      "size": 27735,
      "lines": 873,
      "hash": "72b46103fc25af80",
      "functions": [
        {
          "name": "add_tx",
          "line": 306,
          "signature": "return add_tx(tx, h, blobSize, tvc, keeped_by_block, height);"
        },
        {
          "name": "checkInfo",
          "line": 365,
          "signature": "TransactionCheckInfo checkInfo(tx);"
        },
        {
          "name": "checkInfo",
          "line": 518,
          "signature": "TransactionCheckInfo checkInfo(txd);"
        }
      ],
      "constants": [
        {
          "name": "fee",
          "line": 172,
          "value": "inputs_amount - outputs_amount"
        },
        {
          "name": "CURRENT_MEMPOOL_ARCHIVE_VER",
          "line": 594,
          "value": "1"
        }
      ]
    },
    "src/CryptoNoteCore/TransactionPool.h": {
      "path": "src/CryptoNoteCore/TransactionPool.h",
      "size": 8358,
      "lines": 222,
      "hash": "322e1d0cfa9c0b72",
      "functions": [
        {
          "name": "call",
          "line": 61,
          "signature": "bool call(functor_t functr) {"
        },
        {
          "name": "addObserver",
          "line": 93,
          "signature": "bool addObserver(ITxPoolObserver* observer);"
        },
        {
          "name": "removeObserver",
          "line": 94,
          "signature": "bool removeObserver(ITxPoolObserver* observer);"
        },
        {
          "name": "init",
          "line": 97,
          "signature": "bool init(const std::string& config_folder);"
        },
        {
          "name": "deinit",
          "line": 98,
          "signature": "bool deinit();"
        },
        {
          "name": "add_tx",
          "line": 101,
          "signature": "bool add_tx(const Transaction &tx, const Crypto::Hash &id, size_t blobSize, tx_verification_context& tvc, bool keeped_by_block, uint32_t height);"
        },
        {
          "name": "add_tx",
          "line": 102,
          "signature": "bool add_tx(const Transaction &tx, tx_verification_context& tvc, bool keeped_by_block, uint32_t height);"
        },
        {
          "name": "take_tx",
          "line": 104,
          "signature": "bool take_tx(const Crypto::Hash &id, Transaction &tx, size_t& blobSize, uint64_t& fee);"
        },
        {
          "name": "on_blockchain_inc",
          "line": 106,
          "signature": "bool on_blockchain_inc(uint64_t new_block_height, const Crypto::Hash& top_block_id);"
        },
        {
          "name": "on_blockchain_dec",
          "line": 107,
          "signature": "bool on_blockchain_dec(uint64_t new_block_height, const Crypto::Hash& top_block_id);"
        },
        {
          "name": "fill_block_template",
          "line": 113,
          "signature": "bool fill_block_template(Block &bl, size_t median_size, size_t maxCumulativeSize, uint64_t already_generated_coins, size_t &total_size, uint64_t &fee, uint32_t& height);"
        },
        {
          "name": "on_idle",
          "line": 119,
          "signature": "void on_idle();"
        },
        {
          "name": "getTransactionIdsByPaymentId",
          "line": 121,
          "signature": "bool getTransactionIdsByPaymentId(const Crypto::Hash& paymentId, std::vector<Crypto::Hash>& transactionIds);"
        },
        {
          "name": "getTransactionIdsByTimestamp",
          "line": 122,
          "signature": "bool getTransactionIdsByTimestamp(uint64_t timestampBegin, uint64_t timestampEnd, uint32_t transactionsNumberLimit, std::vector<Crypto::Hash>& hashes, uint64_t& transactionsNumberWithinTimestamps);"
        },
        {
          "name": "getTransaction",
          "line": 123,
          "signature": "bool getTransaction(const Crypto::Hash &id, Transaction &tx);"
        },
        {
          "name": "getTransactions",
          "line": 126,
          "signature": "void getTransactions(const t_ids_container& txsIds, t_tx_container& txs, t_missed_container& missedTxs) {"
        },
        {
          "name": "serialize",
          "line": 139,
          "signature": "void serialize(ISerializer& s);"
        },
        {
          "name": "addTransactionInputs",
          "line": 191,
          "signature": "bool addTransactionInputs(const Crypto::Hash& id, const Transaction& tx, bool keptByBlock);"
        },
        {
          "name": "removeTransactionInputs",
          "line": 193,
          "signature": "bool removeTransactionInputs(const Crypto::Hash& id, const Transaction& tx, bool keptByBlock);"
        },
        {
          "name": "removeExpiredTransactions",
          "line": 196,
          "signature": "bool removeExpiredTransactions();"
        },
        {
          "name": "buildIndices",
          "line": 198,
          "signature": "void buildIndices();"
        }
      ],
      "constants": []
    },
    "src/CryptoNoteCore/TransactionPrefixImpl.cpp": {
      "path": "src/CryptoNoteCore/TransactionPrefixImpl.cpp",
      "size": 8641,
      "lines": 245,
      "hash": "1b65b1abfee6249c",
      "functions": [
        {
          "name": "getObjectHash",
          "line": 100,
          "signature": "return getObjectHash(m_txPrefix);"
        },
        {
          "name": "getObjectHash",
          "line": 105,
          "signature": "return getObjectHash(m_txPrefix.inputs);"
        },
        {
          "name": "toBinaryArray",
          "line": 223,
          "signature": "return toBinaryArray(m_txPrefix);"
        }
      ],
      "constants": []
    },
    "src/CryptoNoteCore/TransactionUtils.cpp": {
      "path": "src/CryptoNoteCore/TransactionUtils.cpp",
      "size": 5741,
      "lines": 166,
      "hash": "f654e06874a3d230",
      "functions": [
        {
          "name": "checkInputsKeyimagesDiff",
          "line": 31,
          "signature": "bool checkInputsKeyimagesDiff(const CryptoNote::TransactionPrefix& tx) {"
        },
        {
          "name": "getRequiredSignaturesCount",
          "line": 44,
          "signature": "size_t getRequiredSignaturesCount(const TransactionInput& in) {"
        },
        {
          "name": "getTransactionInputAmount",
          "line": 54,
          "signature": "uint64_t getTransactionInputAmount(const TransactionInput& in) {"
        },
        {
          "name": "isOutToKey",
          "line": 120,
          "signature": "bool isOutToKey(const Crypto::PublicKey& spendPublicKey, const Crypto::PublicKey& outKey, const Crypto::KeyDerivation& derivation, size_t keyIndex) {"
        }
      ],
      "constants": []
    },
    "src/CryptoNoteCore/TransactionUtils.h": {
      "path": "src/CryptoNoteCore/TransactionUtils.h",
      "size": 2258,
      "lines": 43,
      "hash": "b6725501532d3ead",
      "functions": [
        {
          "name": "checkInputsKeyimagesDiff",
          "line": 23,
          "signature": "bool checkInputsKeyimagesDiff(const CryptoNote::TransactionPrefix& tx);"
        },
        {
          "name": "getRequiredSignaturesCount",
          "line": 26,
          "signature": "size_t getRequiredSignaturesCount(const TransactionInput& in);"
        },
        {
          "name": "getTransactionInputAmount",
          "line": 27,
          "signature": "uint64_t getTransactionInputAmount(const TransactionInput& in);"
        },
        {
          "name": "isOutToKey",
          "line": 32,
          "signature": "bool isOutToKey(const Crypto::PublicKey& spendPublicKey, const Crypto::PublicKey& outKey, const Crypto::KeyDerivation& derivation, size_t keyIndex);"
        }
      ],
      "constants": []
    },
    "src/CryptoNoteCore/UpgradeDetector.cpp": {
      "path": "src/CryptoNoteCore/UpgradeDetector.cpp",
      "size": 869,
      "lines": 19,
      "hash": "3cd5f69c1da72028",
      "functions": [],
      "constants": []
    },
    "src/CryptoNoteCore/UpgradeDetector.h": {
      "path": "src/CryptoNoteCore/UpgradeDetector.h",
      "size": 9415,
      "lines": 223,
      "hash": "2ff2cdcaf885325c",
      "functions": [
        {
          "name": "init",
          "line": 52,
          "signature": "bool init() {"
        },
        {
          "name": "blockPushed",
          "line": 119,
          "signature": "void blockPushed() {"
        },
        {
          "name": "blockPopped",
          "line": 165,
          "signature": "void blockPopped() {"
        },
        {
          "name": "getNumberOfVotes",
          "line": 178,
          "signature": "size_t getNumberOfVotes(uint32_t height) {"
        },
        {
          "name": "findVotingCompleteHeight",
          "line": 193,
          "signature": "uint32_t findVotingCompleteHeight(uint32_t probableUpgradeHeight) {"
        },
        {
          "name": "isVotingComplete",
          "line": 206,
          "signature": "bool isVotingComplete(uint32_t height) {"
        }
      ],
      "constants": []
    },
    "src/CryptoNoteCore/VerificationContext.h": {
      "path": "src/CryptoNoteCore/VerificationContext.h",
      "size": 1635,
      "lines": 42,
      "hash": "bc148b5d301e311f",
      "functions": [],
      "constants": []
    },
    "src/CryptoNoteProtocol/CryptoNoteProtocolDefinitions.h": {
      "path": "src/CryptoNoteProtocol/CryptoNoteProtocolDefinitions.h",
      "size": 6742,
      "lines": 248,
      "hash": "a59d937bc15b8a57",
      "functions": [
        {
          "name": "serialize",
          "line": 32,
          "signature": "void serialize(ISerializer& s) {"
        },
        {
          "name": "serialize",
          "line": 43,
          "signature": "void serialize(ISerializer& s) {"
        },
        {
          "name": "serialize",
          "line": 54,
          "signature": "void serialize(ISerializer& s) {"
        },
        {
          "name": "serialize",
          "line": 65,
          "signature": "void serialize(ISerializer& s) {"
        },
        {
          "name": "serialize",
          "line": 81,
          "signature": "void serialize(ISerializer& s) {"
        },
        {
          "name": "serialize",
          "line": 101,
          "signature": "void serialize(ISerializer& s) {"
        },
        {
          "name": "serialize",
          "line": 121,
          "signature": "void serialize(ISerializer& s) {"
        },
        {
          "name": "serialize",
          "line": 140,
          "signature": "void serialize(ISerializer& s) {"
        },
        {
          "name": "serialize",
          "line": 163,
          "signature": "void serialize(ISerializer& s) {"
        },
        {
          "name": "serialize",
          "line": 175,
          "signature": "void serialize(ISerializer& s) {"
        },
        {
          "name": "serialize",
          "line": 194,
          "signature": "void serialize(ISerializer& s) {"
        }
      ],
      "constants": [
        {
          "name": "BC_COMMANDS_POOL_BASE",
          "line": 22,
          "value": "2000"
        }
      ]
    },
    "src/CryptoNoteProtocol/CryptoNoteProtocolHandler.cpp": {
      "path": "src/CryptoNoteProtocol/CryptoNoteProtocolHandler.cpp",
      "size": 43069,
      "lines": 1126,
      "hash": "d2fc100d2510e49e",
      "functions": [
        {
          "name": "handler",
          "line": 246,
          "signature": "return handler(command, req, ctx);"
        }
      ],
      "constants": []
    },
    "src/CryptoNoteProtocol/CryptoNoteProtocolHandler.h": {
      "path": "src/CryptoNoteProtocol/CryptoNoteProtocolHandler.h",
      "size": 5864,
      "lines": 133,
      "hash": "85bf20fe189b2523",
      "functions": [
        {
          "name": "serialize",
          "line": 56,
          "signature": "void serialize(ISerializer& s) {"
        },
        {
          "name": "set_p2p_endpoint",
          "line": 67,
          "signature": "void set_p2p_endpoint(IP2pEndpoint* p2p);"
        },
        {
          "name": "log_connections",
          "line": 70,
          "signature": "void log_connections();"
        },
        {
          "name": "stop",
          "line": 74,
          "signature": "void stop();"
        },
        {
          "name": "start_sync",
          "line": 75,
          "signature": "bool start_sync(CryptoNoteConnectionContext& context);"
        },
        {
          "name": "on_idle",
          "line": 76,
          "signature": "bool on_idle();"
        },
        {
          "name": "onConnectionOpened",
          "line": 77,
          "signature": "void onConnectionOpened(CryptoNoteConnectionContext& context);"
        },
        {
          "name": "onConnectionClosed",
          "line": 78,
          "signature": "void onConnectionClosed(CryptoNoteConnectionContext& context);"
        },
        {
          "name": "get_stat_info",
          "line": 79,
          "signature": "bool get_stat_info(core_stat_info& stat_inf);"
        },
        {
          "name": "get_payload_sync_data",
          "line": 80,
          "signature": "bool get_payload_sync_data(CORE_SYNC_DATA& hshd);"
        },
        {
          "name": "process_payload_sync_data",
          "line": 81,
          "signature": "bool process_payload_sync_data(const CORE_SYNC_DATA& hshd, CryptoNoteConnectionContext& context, bool is_inital);"
        },
        {
          "name": "handleCommand",
          "line": 82,
          "signature": "int handleCommand(bool is_notify, int command, const BinaryArray& in_buff, BinaryArray& buff_out, CryptoNoteConnectionContext& context, bool& handled);"
        },
        {
          "name": "requestMissingPoolTransactions",
          "line": 85,
          "signature": "void requestMissingPoolTransactions(const CryptoNoteConnectionContext& context);"
        },
        {
          "name": "handle_notify_new_block",
          "line": 89,
          "signature": "int handle_notify_new_block(int command, NOTIFY_NEW_BLOCK::request& arg, CryptoNoteConnectionContext& context);"
        },
        {
          "name": "handle_notify_new_transactions",
          "line": 90,
          "signature": "int handle_notify_new_transactions(int command, NOTIFY_NEW_TRANSACTIONS::request& arg, CryptoNoteConnectionContext& context);"
        },
        {
          "name": "handle_request_get_objects",
          "line": 91,
          "signature": "int handle_request_get_objects(int command, NOTIFY_REQUEST_GET_OBJECTS::request& arg, CryptoNoteConnectionContext& context);"
        },
        {
          "name": "handle_response_get_objects",
          "line": 92,
          "signature": "int handle_response_get_objects(int command, NOTIFY_RESPONSE_GET_OBJECTS::request& arg, CryptoNoteConnectionContext& context);"
        },
        {
          "name": "handle_request_chain",
          "line": 93,
          "signature": "int handle_request_chain(int command, NOTIFY_REQUEST_CHAIN::request& arg, CryptoNoteConnectionContext& context);"
        },
        {
          "name": "handle_response_chain_entry",
          "line": 94,
          "signature": "int handle_response_chain_entry(int command, NOTIFY_RESPONSE_CHAIN_ENTRY::request& arg, CryptoNoteConnectionContext& context);"
        },
        {
          "name": "handle_request_tx_pool",
          "line": 95,
          "signature": "int handle_request_tx_pool(int command, NOTIFY_REQUEST_TX_POOL::request &arg, CryptoNoteConnectionContext &context);"
        },
        {
          "name": "handle_notify_new_lite_block",
          "line": 96,
          "signature": "int handle_notify_new_lite_block(int command, NOTIFY_NEW_LITE_BLOCK::request &arg, CryptoNoteConnectionContext &context);"
        },
        {
          "name": "handle_notify_missing_txs",
          "line": 97,
          "signature": "int handle_notify_missing_txs(int command, NOTIFY_MISSING_TXS::request &arg, CryptoNoteConnectionContext &context);"
        },
        {
          "name": "get_current_blockchain_height",
          "line": 105,
          "signature": "uint32_t get_current_blockchain_height();"
        },
        {
          "name": "request_missing_objects",
          "line": 106,
          "signature": "bool request_missing_objects(CryptoNoteConnectionContext& context, bool check_having_blocks);"
        },
        {
          "name": "on_connection_synchronized",
          "line": 107,
          "signature": "bool on_connection_synchronized();"
        },
        {
          "name": "updateObservedHeight",
          "line": 108,
          "signature": "void updateObservedHeight(uint32_t peerHeight, const CryptoNoteConnectionContext& context);"
        },
        {
          "name": "recalculateMaxObservedHeight",
          "line": 109,
          "signature": "void recalculateMaxObservedHeight(const CryptoNoteConnectionContext& context);"
        },
        {
          "name": "processObjects",
          "line": 110,
          "signature": "int processObjects(CryptoNoteConnectionContext& context, const std::vector<parsed_block_entry>& blocks);"
        },
        {
          "name": "doPushLiteBlock",
          "line": 114,
          "signature": "int doPushLiteBlock(NOTIFY_NEW_LITE_BLOCK::request block, CryptoNoteConnectionContext &context, std::vector<BinaryArray> missingTxs);"
        }
      ],
      "constants": []
    },
    "src/CryptoNoteProtocol/CryptoNoteProtocolHandlerCommon.h": {
      "path": "src/CryptoNoteProtocol/CryptoNoteProtocolHandlerCommon.h",
      "size": 1831,
      "lines": 41,
      "hash": "2c97bd93dd66e1de",
      "functions": [],
      "constants": []
    },
    "src/CryptoNoteProtocol/ICryptoNoteProtocolObserver.h": {
      "path": "src/CryptoNoteProtocol/ICryptoNoteProtocolObserver.h",
      "size": 1182,
      "lines": 34,
      "hash": "c35ae3bf2bce959f",
      "functions": [
        {
          "name": "peerCountUpdated",
          "line": 28,
          "signature": "virtual void peerCountUpdated(size_t count) {}"
        },
        {
          "name": "lastKnownBlockHeightUpdated",
          "line": 29,
          "signature": "virtual void lastKnownBlockHeightUpdated(uint32_t height) {}"
        },
        {
          "name": "blockchainSynchronized",
          "line": 30,
          "signature": "virtual void blockchainSynchronized(uint32_t topHeight) {}"
        }
      ],
      "constants": []
    },
    "src/CryptoNoteProtocol/ICryptoNoteProtocolQuery.h": {
      "path": "src/CryptoNoteProtocol/ICryptoNoteProtocolQuery.h",
      "size": 1304,
      "lines": 37,
      "hash": "12c9406e3405c43d",
      "functions": [],
      "constants": []
    },
    "src/Daemon/Daemon.cpp": {
      "path": "src/Daemon/Daemon.cpp",
      "size": 15249,
      "lines": 410,
      "hash": "4baef0d2f1ba871b",
      "functions": [
        {
          "name": "command_line_preprocessor",
          "line": 70,
          "signature": "bool command_line_preprocessor(const boost::program_options::variables_map& vm, LoggerRef& logger);"
        },
        {
          "name": "print_genesis_tx_hex",
          "line": 72,
          "signature": "void print_genesis_tx_hex() {"
        },
        {
          "name": "buildLoggerConfiguration",
          "line": 83,
          "signature": "JsonValue buildLoggerConfiguration(Level level, const std::string& logfile) {"
        },
        {
          "name": "loggerConfiguration",
          "line": 84,
          "signature": "JsonValue loggerConfiguration(JsonValue::OBJECT);"
        },
        {
          "name": "renameDataDir",
          "line": 102,
          "signature": "void renameDataDir() {"
        },
        {
          "name": "logger",
          "line": 130,
          "signature": "LoggerRef logger(logManager, \"daemon\");"
        },
        {
          "name": "dch",
          "line": 301,
          "signature": "DaemonCommandsHandler dch(ccore, p2psrv, logManager, cprotocol);"
        },
        {
          "name": "command_line_preprocessor",
          "line": 391,
          "signature": "bool command_line_preprocessor(const boost::program_options::variables_map &vm, LoggerRef &logger) {"
        }
      ],
      "constants": []
    },
    "src/Daemon/DaemonCommandsHandler.cpp": {
      "path": "src/Daemon/DaemonCommandsHandler.cpp",
      "size": 18899,
      "lines": 490,
      "hash": "c6668c30f6fadc82",
      "functions": [],
      "constants": []
    },
    "src/Daemon/DaemonCommandsHandler.h": {
      "path": "src/Daemon/DaemonCommandsHandler.h",
      "size": 3397,
      "lines": 88,
      "hash": "e7145e7e39fc7672",
      "functions": [
        {
          "name": "start_handling",
          "line": 38,
          "signature": "bool start_handling() {"
        },
        {
          "name": "stop_handling",
          "line": 43,
          "signature": "void stop_handling() {"
        },
        {
          "name": "get_sync_percentage",
          "line": 57,
          "signature": "float get_sync_percentage(uint64_t height, uint64_t target_height);"
        },
        {
          "name": "print_block_by_height",
          "line": 58,
          "signature": "bool print_block_by_height(uint32_t height);"
        },
        {
          "name": "print_block_by_hash",
          "line": 59,
          "signature": "bool print_block_by_hash(const std::string& arg);"
        },
        {
          "name": "calculatePercent",
          "line": 60,
          "signature": "uint64_t calculatePercent(const CryptoNote::Currency& currency, uint64_t value, uint64_t total);"
        },
        {
          "name": "exit",
          "line": 62,
          "signature": "bool exit(const std::vector<std::string>& args);"
        },
        {
          "name": "help",
          "line": 63,
          "signature": "bool help(const std::vector<std::string>& args);"
        },
        {
          "name": "print_pl",
          "line": 64,
          "signature": "bool print_pl(const std::vector<std::string>& args);"
        },
        {
          "name": "show_hr",
          "line": 65,
          "signature": "bool show_hr(const std::vector<std::string>& args);"
        },
        {
          "name": "hide_hr",
          "line": 66,
          "signature": "bool hide_hr(const std::vector<std::string>& args);"
        },
        {
          "name": "rollbackchainto",
          "line": 67,
          "signature": "bool rollbackchainto(uint32_t height);"
        },
        {
          "name": "rollback_chain",
          "line": 68,
          "signature": "bool rollback_chain(const std::vector<std::string>& args);"
        },
        {
          "name": "print_bc_outs",
          "line": 69,
          "signature": "bool print_bc_outs(const std::vector<std::string>& args);"
        },
        {
          "name": "print_cn",
          "line": 70,
          "signature": "bool print_cn(const std::vector<std::string>& args);"
        },
        {
          "name": "print_bc",
          "line": 71,
          "signature": "bool print_bc(const std::vector<std::string>& args);"
        },
        {
          "name": "print_bci",
          "line": 72,
          "signature": "bool print_bci(const std::vector<std::string>& args);"
        },
        {
          "name": "print_height",
          "line": 73,
          "signature": "bool print_height(const std::vector<std::string>& args);"
        },
        {
          "name": "set_log",
          "line": 74,
          "signature": "bool set_log(const std::vector<std::string>& args);"
        },
        {
          "name": "print_block",
          "line": 75,
          "signature": "bool print_block(const std::vector<std::string>& args);"
        },
        {
          "name": "print_tx",
          "line": 76,
          "signature": "bool print_tx(const std::vector<std::string>& args);"
        },
        {
          "name": "print_pool",
          "line": 77,
          "signature": "bool print_pool(const std::vector<std::string>& args);"
        },
        {
          "name": "print_pool_sh",
          "line": 78,
          "signature": "bool print_pool_sh(const std::vector<std::string>& args);"
        },
        {
          "name": "status",
          "line": 79,
          "signature": "bool status(const std::vector<std::string>& args);"
        },
        {
          "name": "save",
          "line": 80,
          "signature": "bool save(const std::vector<std::string> &args);"
        },
        {
          "name": "start_mining",
          "line": 82,
          "signature": "bool start_mining(const std::vector<std::string>& args);"
        },
        {
          "name": "stop_mining",
          "line": 83,
          "signature": "bool stop_mining(const std::vector<std::string>& args);"
        },
        {
          "name": "print_ban",
          "line": 84,
          "signature": "bool print_ban(const std::vector<std::string>& args);"
        },
        {
          "name": "ban",
          "line": 85,
          "signature": "bool ban(const std::vector<std::string>& args);"
        },
        {
          "name": "unban",
          "line": 86,
          "signature": "bool unban(const std::vector<std::string>& args);"
        }
      ],
      "constants": []
    },
    "src/HTTP/HttpParser.cpp": {
      "path": "src/HTTP/HttpParser.cpp",
      "size": 5632,
      "lines": 226,
      "hash": "15fc4325dc111e9b",
      "functions": [
        {
          "name": "throwIfNotGood",
          "line": 26,
          "signature": "void throwIfNotGood(std::istream& stream) {"
        }
      ],
      "constants": []
    },
    "src/HTTP/HttpParser.h": {
      "path": "src/HTTP/HttpParser.h",
      "size": 1728,
      "lines": 48,
      "hash": "a228e1c53ecd4d3f",
      "functions": [
        {
          "name": "receiveRequest",
          "line": 34,
          "signature": "void receiveRequest(std::istream& stream, HttpRequest& request);"
        },
        {
          "name": "receiveResponse",
          "line": 35,
          "signature": "void receiveResponse(std::istream& stream, HttpResponse& response);"
        },
        {
          "name": "readWord",
          "line": 38,
          "signature": "void readWord(std::istream& stream, std::string& word);"
        },
        {
          "name": "readHeaders",
          "line": 39,
          "signature": "void readHeaders(std::istream& stream, HttpRequest::Headers &headers);"
        },
        {
          "name": "readHeader",
          "line": 40,
          "signature": "bool readHeader(std::istream& stream, std::string& name, std::string& value);"
        },
        {
          "name": "getBodyLen",
          "line": 41,
          "signature": "size_t getBodyLen(const HttpRequest::Headers& headers);"
        },
        {
          "name": "readBody",
          "line": 42,
          "signature": "void readBody(std::istream& stream, std::string& body, const size_t bodyLen);"
        }
      ],
      "constants": []
    },
    "src/HTTP/HttpParserErrorCodes.cpp": {
      "path": "src/HTTP/HttpParserErrorCodes.cpp",
      "size": 1022,
      "lines": 27,
      "hash": "b8e028391f1d1ea0",
      "functions": [],
      "constants": []
    },
    "src/HTTP/HttpParserErrorCodes.h": {
      "path": "src/HTTP/HttpParserErrorCodes.h",
      "size": 2052,
      "lines": 67,
      "hash": "d6176dfaa5679ccb",
      "functions": [],
      "constants": []
    },
    "src/HTTP/HttpRequest.cpp": {
      "path": "src/HTTP/HttpRequest.cpp",
      "size": 2038,
      "lines": 74,
      "hash": "fd3cc600602f2c32",
      "functions": [],
      "constants": []
    },
    "src/HTTP/HttpRequest.h": {
      "path": "src/HTTP/HttpRequest.h",
      "size": 1733,
      "lines": 54,
      "hash": "702f97eff38338b5",
      "functions": [
        {
          "name": "addHeader",
          "line": 34,
          "signature": "void addHeader(const std::string& name, const std::string& value);"
        },
        {
          "name": "setBody",
          "line": 35,
          "signature": "void setBody(const std::string& b);"
        },
        {
          "name": "setUrl",
          "line": 36,
          "signature": "void setUrl(const std::string& uri);"
        }
      ],
      "constants": []
    },
    "src/HTTP/HttpResponse.cpp": {
      "path": "src/HTTP/HttpResponse.cpp",
      "size": 2835,
      "lines": 102,
      "hash": "28289fd5cfc0c369",
      "functions": [],
      "constants": []
    },
    "src/HTTP/HttpResponse.h": {
      "path": "src/HTTP/HttpResponse.h",
      "size": 1831,
      "lines": 58,
      "hash": "22a901762bd19b05",
      "functions": [
        {
          "name": "setStatus",
          "line": 36,
          "signature": "void setStatus(HTTP_STATUS s);"
        },
        {
          "name": "addHeader",
          "line": 37,
          "signature": "void addHeader(const std::string& name, const std::string& value);"
        },
        {
          "name": "setBody",
          "line": 38,
          "signature": "void setBody(const std::string& b);"
        }
      ],
      "constants": []
    },
    "src/InProcessNode/InProcessNode.cpp": {
      "path": "src/InProcessNode/InProcessNode.cpp",
      "size": 33986,
      "lines": 1069,
      "hash": "1ae6a43fe9ba2bf7",
      "functions": [
        {
          "name": "doShutdown",
          "line": 86,
          "signature": "return doShutdown();"
        },
        {
          "name": "make_error_code",
          "line": 143,
          "signature": "return make_error_code(CryptoNote::error::NOT_INITIALIZED);"
        },
        {
          "name": "make_error_code",
          "line": 150,
          "signature": "return make_error_code(CryptoNote::error::REQUEST_ERROR);"
        },
        {
          "name": "make_error_code",
          "line": 154,
          "signature": "return make_error_code(CryptoNote::error::REQUEST_ERROR);"
        },
        {
          "name": "make_error_code",
          "line": 178,
          "signature": "return make_error_code(CryptoNote::error::INTERNAL_NODE_ERROR);"
        },
        {
          "name": "make_error_code",
          "line": 216,
          "signature": "return make_error_code(CryptoNote::error::NOT_INITIALIZED);"
        },
        {
          "name": "make_error_code",
          "line": 223,
          "signature": "return make_error_code(CryptoNote::error::REQUEST_ERROR);"
        },
        {
          "name": "make_error_code",
          "line": 228,
          "signature": "return make_error_code(CryptoNote::error::INTERNAL_NODE_ERROR);"
        },
        {
          "name": "make_error_code",
          "line": 267,
          "signature": "return make_error_code(CryptoNote::error::NOT_INITIALIZED);"
        },
        {
          "name": "make_error_code",
          "line": 278,
          "signature": "return make_error_code(CryptoNote::error::REQUEST_ERROR);"
        },
        {
          "name": "make_error_code",
          "line": 285,
          "signature": "return make_error_code(CryptoNote::error::INTERNAL_NODE_ERROR);"
        },
        {
          "name": "make_error_code",
          "line": 320,
          "signature": "return make_error_code(CryptoNote::error::NOT_INITIALIZED);"
        },
        {
          "name": "make_error_code",
          "line": 329,
          "signature": "return make_error_code(CryptoNote::error::REQUEST_ERROR);"
        },
        {
          "name": "make_error_code",
          "line": 333,
          "signature": "return make_error_code(CryptoNote::error::REQUEST_ERROR);"
        },
        {
          "name": "make_error_code",
          "line": 337,
          "signature": "return make_error_code(CryptoNote::error::REQUEST_ERROR);"
        },
        {
          "name": "make_error_code",
          "line": 346,
          "signature": "return make_error_code(CryptoNote::error::INTERNAL_NODE_ERROR);"
        },
        {
          "name": "make_error_code",
          "line": 493,
          "signature": "return make_error_code(CryptoNote::error::INTERNAL_NODE_ERROR);"
        },
        {
          "name": "make_error_code",
          "line": 631,
          "signature": "return make_error_code(CryptoNote::error::REQUEST_ERROR);"
        },
        {
          "name": "make_error_code",
          "line": 636,
          "signature": "return make_error_code(CryptoNote::error::INTERNAL_NODE_ERROR);"
        },
        {
          "name": "make_error_code",
          "line": 640,
          "signature": "return make_error_code(CryptoNote::error::INTERNAL_NODE_ERROR);"
        },
        {
          "name": "make_error_code",
          "line": 651,
          "signature": "return make_error_code(CryptoNote::error::INTERNAL_NODE_ERROR);"
        },
        {
          "name": "make_error_code",
          "line": 660,
          "signature": "return make_error_code(CryptoNote::error::INTERNAL_NODE_ERROR);"
        },
        {
          "name": "make_error_code",
          "line": 713,
          "signature": "return make_error_code(CryptoNote::error::REQUEST_ERROR);"
        },
        {
          "name": "make_error_code",
          "line": 717,
          "signature": "return make_error_code(CryptoNote::error::INTERNAL_NODE_ERROR);"
        },
        {
          "name": "make_error_code",
          "line": 724,
          "signature": "return make_error_code(CryptoNote::error::INTERNAL_NODE_ERROR);"
        },
        {
          "name": "make_error_code",
          "line": 788,
          "signature": "return make_error_code(CryptoNote::error::REQUEST_ERROR);"
        },
        {
          "name": "make_error_code",
          "line": 793,
          "signature": "return make_error_code(CryptoNote::error::INTERNAL_NODE_ERROR);"
        },
        {
          "name": "make_error_code",
          "line": 800,
          "signature": "return make_error_code(CryptoNote::error::INTERNAL_NODE_ERROR);"
        },
        {
          "name": "make_error_code",
          "line": 853,
          "signature": "return make_error_code(CryptoNote::error::REQUEST_ERROR);"
        },
        {
          "name": "make_error_code",
          "line": 858,
          "signature": "return make_error_code(CryptoNote::error::INTERNAL_NODE_ERROR);"
        },
        {
          "name": "make_error_code",
          "line": 865,
          "signature": "return make_error_code(CryptoNote::error::INTERNAL_NODE_ERROR);"
        },
        {
          "name": "make_error_code",
          "line": 912,
          "signature": "return make_error_code(CryptoNote::error::REQUEST_ERROR);"
        },
        {
          "name": "make_error_code",
          "line": 917,
          "signature": "return make_error_code(CryptoNote::error::INTERNAL_NODE_ERROR);"
        },
        {
          "name": "make_error_code",
          "line": 924,
          "signature": "return make_error_code(CryptoNote::error::INTERNAL_NODE_ERROR);"
        },
        {
          "name": "make_error_code",
          "line": 996,
          "signature": "return make_error_code(CryptoNote::error::REQUEST_ERROR);"
        },
        {
          "name": "make_error_code",
          "line": 1006,
          "signature": "return make_error_code(CryptoNote::error::INTERNAL_NODE_ERROR);"
        },
        {
          "name": "make_error_code",
          "line": 1028,
          "signature": "return make_error_code(CryptoNote::error::REQUEST_ERROR);"
        },
        {
          "name": "make_error_code",
          "line": 1033,
          "signature": "return make_error_code(CryptoNote::error::INTERNAL_NODE_ERROR);"
        },
        {
          "name": "make_error_code",
          "line": 1040,
          "signature": "return make_error_code(CryptoNote::error::INTERNAL_NODE_ERROR);"
        }
      ],
      "constants": []
    },
    "src/InProcessNode/InProcessNode.h": {
      "path": "src/InProcessNode/InProcessNode.h",
      "size": 9967,
      "lines": 158,
      "hash": "a6ea1293d0c46243",
      "functions": [
        {
          "name": "getNewBlocksAsync",
          "line": 89,
          "signature": "void getNewBlocksAsync(std::vector<Crypto::Hash>& knownBlockIds, std::vector<CryptoNote::block_complete_entry>& newBlocks, uint32_t& startHeight, const Callback& callback);"
        },
        {
          "name": "getTransactionOutsGlobalIndicesAsync",
          "line": 92,
          "signature": "void getTransactionOutsGlobalIndicesAsync(const Crypto::Hash& transactionHash, std::vector<uint32_t>& outsGlobalIndices, const Callback& callback);"
        },
        {
          "name": "relayTransactionAsync",
          "line": 100,
          "signature": "void relayTransactionAsync(const CryptoNote::Transaction& transaction, const Callback& callback);"
        },
        {
          "name": "getOutByMSigGIndexAsync",
          "line": 110,
          "signature": "void getOutByMSigGIndexAsync(uint64_t amount, uint32_t gindex, MultisignatureOutput& out, const Callback& callback);"
        },
        {
          "name": "getBlocksAsync",
          "line": 112,
          "signature": "void getBlocksAsync(const std::vector<uint32_t>& blockHeights, std::vector<std::vector<BlockDetails>>& blocks, const Callback& callback);"
        },
        {
          "name": "getBlocksAsync",
          "line": 115,
          "signature": "void getBlocksAsync(const std::vector<Crypto::Hash>& blockHashes, std::vector<BlockDetails>& blocks, const Callback& callback);"
        },
        {
          "name": "getBlocksAsync",
          "line": 118,
          "signature": "void getBlocksAsync(uint64_t timestampBegin, uint64_t timestampEnd, uint32_t blocksNumberLimit, std::vector<BlockDetails>& blocks, uint32_t& blocksNumberWithinTimestamps, const Callback& callback);"
        },
        {
          "name": "getTransactionsAsync",
          "line": 121,
          "signature": "void getTransactionsAsync(const std::vector<Crypto::Hash>& transactionHashes, std::vector<TransactionDetails>& transactions, const Callback& callback);"
        },
        {
          "name": "getPoolTransactionsAsync",
          "line": 124,
          "signature": "void getPoolTransactionsAsync(uint64_t timestampBegin, uint64_t timestampEnd, uint32_t transactionsNumberLimit, std::vector<TransactionDetails>& transactions, uint64_t& transactionsNumberWithinTimestamps, const Callback& callback);"
        },
        {
          "name": "getTransactionsByPaymentIdAsync",
          "line": 127,
          "signature": "void getTransactionsByPaymentIdAsync(const Crypto::Hash& paymentId, std::vector<TransactionDetails>& transactions, const Callback& callback);"
        },
        {
          "name": "isSynchronizedAsync",
          "line": 130,
          "signature": "void isSynchronizedAsync(bool& syncStatus, const Callback& callback);"
        },
        {
          "name": "getTransactionAsync",
          "line": 133,
          "signature": "void getTransactionAsync(const Crypto::Hash &transactionHash, CryptoNote::Transaction &transaction, const Callback &callback);"
        },
        {
          "name": "workerFunc",
          "line": 135,
          "signature": "void workerFunc();"
        },
        {
          "name": "doShutdown",
          "line": 136,
          "signature": "bool doShutdown();"
        }
      ],
      "constants": []
    },
    "src/InProcessNode/InProcessNodeErrors.cpp": {
      "path": "src/InProcessNode/InProcessNodeErrors.cpp",
      "size": 1027,
      "lines": 27,
      "hash": "694d08bd2ca8a911",
      "functions": [],
      "constants": []
    },
    "src/InProcessNode/InProcessNodeErrors.h": {
      "path": "src/InProcessNode/InProcessNodeErrors.h",
      "size": 2264,
      "lines": 70,
      "hash": "395477d1ad5abad6",
      "functions": [],
      "constants": []
    },
    "src/JsonRpcServer/JsonRpcServer.cpp": {
      "path": "src/JsonRpcServer/JsonRpcServer.cpp",
      "size": 5560,
      "lines": 191,
      "hash": "12fa16f1ba25fcd8",
      "functions": [
        {
          "name": "error",
          "line": 105,
          "signature": "JsonValue error(JsonValue::OBJECT);"
        },
        {
          "name": "data",
          "line": 113,
          "signature": "JsonValue data(JsonValue::OBJECT);"
        },
        {
          "name": "error",
          "line": 128,
          "signature": "JsonValue error(JsonValue::OBJECT);"
        },
        {
          "name": "error",
          "line": 153,
          "signature": "JsonValue error(JsonValue::OBJECT);"
        },
        {
          "name": "error",
          "line": 178,
          "signature": "JsonValue error(JsonValue::OBJECT);"
        }
      ],
      "constants": []
    },
    "src/JsonRpcServer/JsonRpcServer.h": {
      "path": "src/JsonRpcServer/JsonRpcServer.h",
      "size": 2388,
      "lines": 71,
      "hash": "6ae91a2a77e93a40",
      "functions": [
        {
          "name": "start",
          "line": 49,
          "signature": "void start(const std::string& bindAddress, uint16_t bindPort, const std::string& user = \"\", const std::string& password = \"\");"
        },
        {
          "name": "makeErrorResponse",
          "line": 52,
          "signature": "static void makeErrorResponse(const std::error_code& ec, Common::JsonValue& resp);"
        },
        {
          "name": "makeMethodNotFoundResponse",
          "line": 53,
          "signature": "static void makeMethodNotFoundResponse(Common::JsonValue& resp);"
        },
        {
          "name": "makeGenericErrorReponse",
          "line": 54,
          "signature": "static void makeGenericErrorReponse(Common::JsonValue& resp, const char* what, int errorCode = -32001);"
        },
        {
          "name": "fillJsonResponse",
          "line": 55,
          "signature": "static void fillJsonResponse(const Common::JsonValue& v, Common::JsonValue& resp);"
        },
        {
          "name": "prepareJsonResponse",
          "line": 56,
          "signature": "static void prepareJsonResponse(const Common::JsonValue& req, Common::JsonValue& resp);"
        },
        {
          "name": "makeJsonParsingErrorResponse",
          "line": 57,
          "signature": "static void makeJsonParsingErrorResponse(Common::JsonValue& resp);"
        }
      ],
      "constants": []
    },
    "src/Logging/CommonLogger.cpp": {
      "path": "src/Logging/CommonLogger.cpp",
      "size": 2713,
      "lines": 100,
      "hash": "35803859a48cbfe1",
      "functions": [],
      "constants": []
    },
    "src/Logging/CommonLogger.h": {
      "path": "src/Logging/CommonLogger.h",
      "size": 1492,
      "lines": 45,
      "hash": "704286797fd8b458",
      "functions": [
        {
          "name": "enableCategory",
          "line": 29,
          "signature": "virtual void enableCategory(const std::string& category);"
        },
        {
          "name": "disableCategory",
          "line": 30,
          "signature": "virtual void disableCategory(const std::string& category);"
        },
        {
          "name": "setMaxLevel",
          "line": 31,
          "signature": "virtual void setMaxLevel(Level level);"
        },
        {
          "name": "setPattern",
          "line": 33,
          "signature": "void setPattern(const std::string& pattern);"
        },
        {
          "name": "doLogString",
          "line": 41,
          "signature": "virtual void doLogString(const std::string& message);"
        }
      ],
      "constants": []
    },
    "src/Logging/ConsoleLogger.cpp": {
      "path": "src/Logging/ConsoleLogger.cpp",
      "size": 2473,
      "lines": 80,
      "hash": "f5b61c46ccc0fda7",
      "functions": [],
      "constants": []
    },
    "src/Logging/ConsoleLogger.h": {
      "path": "src/Logging/ConsoleLogger.h",
      "size": 1126,
      "lines": 37,
      "hash": "2f5311d32104ef74",
      "functions": [],
      "constants": []
    },
    "src/Logging/FileLogger.cpp": {
      "path": "src/Logging/FileLogger.cpp",
      "size": 1095,
      "lines": 31,
      "hash": "1338d464dff1ec62",
      "functions": [],
      "constants": []
    },
    "src/Logging/FileLogger.h": {
      "path": "src/Logging/FileLogger.h",
      "size": 1095,
      "lines": 35,
      "hash": "90464401d349d671",
      "functions": [
        {
          "name": "init",
          "line": 28,
          "signature": "void init(const std::string& filename);"
        }
      ],
      "constants": []
    },
    "src/Logging/ILogger.cpp": {
      "path": "src/Logging/ILogger.cpp",
      "size": 1836,
      "lines": 50,
      "hash": "c5d13634dbdd3260",
      "functions": [],
      "constants": []
    },
    "src/Logging/ILogger.h": {
      "path": "src/Logging/ILogger.h",
      "size": 1904,
      "lines": 67,
      "hash": "d11503e44bca8f80",
      "functions": [],
      "constants": [
        {
          "name": "ENDL",
          "line": 63,
          "value": "std::endl"
        }
      ]
    },
    "src/Logging/LoggerGroup.cpp": {
      "path": "src/Logging/LoggerGroup.cpp",
      "size": 1487,
      "lines": 43,
      "hash": "2a8828ed8acfc7ab",
      "functions": [],
      "constants": []
    },
    "src/Logging/LoggerGroup.h": {
      "path": "src/Logging/LoggerGroup.h",
      "size": 1269,
      "lines": 38,
      "hash": "93e9f6034da61963",
      "functions": [
        {
          "name": "addLogger",
          "line": 29,
          "signature": "void addLogger(ILogger& logger);"
        },
        {
          "name": "removeLogger",
          "line": 30,
          "signature": "void removeLogger(ILogger& logger);"
        }
      ],
      "constants": []
    },
    "src/Logging/LoggerManager.cpp": {
      "path": "src/Logging/LoggerManager.cpp",
      "size": 4545,
      "lines": 128,
      "hash": "06f403fa91da035b",
      "functions": [],
      "constants": []
    },
    "src/Logging/LoggerManager.h": {
      "path": "src/Logging/LoggerManager.h",
      "size": 1337,
      "lines": 40,
      "hash": "d88d5d7bec4d57d1",
      "functions": [
        {
          "name": "configure",
          "line": 31,
          "signature": "void configure(const Common::JsonValue& val);"
        }
      ],
      "constants": []
    },
    "src/Logging/LoggerMessage.cpp": {
      "path": "src/Logging/LoggerMessage.cpp",
      "size": 3201,
      "lines": 114,
      "hash": "ed4e5006466a6944",
      "functions": [],
      "constants": []
    },
    "src/Logging/LoggerMessage.h": {
      "path": "src/Logging/LoggerMessage.h",
      "size": 1470,
      "lines": 46,
      "hash": "960a6aa5c15fb73b",
      "functions": [],
      "constants": []
    },
    "src/Logging/LoggerRef.cpp": {
      "path": "src/Logging/LoggerRef.cpp",
      "size": 1201,
      "lines": 34,
      "hash": "403eebf0daf8afd1",
      "functions": [
        {
          "name": "LoggerMessage",
          "line": 26,
          "signature": "return LoggerMessage(*logger, category, level, color);"
        }
      ],
      "constants": []
    },
    "src/Logging/LoggerRef.h": {
      "path": "src/Logging/LoggerRef.h",
      "size": 1188,
      "lines": 37,
      "hash": "fd39db1bbdbc405d",
      "functions": [],
      "constants": []
    },
    "src/Logging/StreamLogger.cpp": {
      "path": "src/Logging/StreamLogger.cpp",
      "size": 1749,
      "lines": 56,
      "hash": "fe682c863ad9c796",
      "functions": [],
      "constants": []
    },
    "src/Logging/StreamLogger.h": {
      "path": "src/Logging/StreamLogger.h",
      "size": 1268,
      "lines": 42,
      "hash": "13a59cb9b31d6eb1",
      "functions": [
        {
          "name": "attachToStream",
          "line": 29,
          "signature": "void attachToStream(std::ostream& stream);"
        }
      ],
      "constants": []
    },
    "src/Miner/BlockchainMonitor.cpp": {
      "path": "src/Miner/BlockchainMonitor.cpp",
      "size": 3497,
      "lines": 106,
      "hash": "dd537c3dc9516ee7",
      "functions": [],
      "constants": []
    },
    "src/Miner/BlockchainMonitor.h": {
      "path": "src/Miner/BlockchainMonitor.h",
      "size": 1529,
      "lines": 47,
      "hash": "e3292f29637548ed",
      "functions": [
        {
          "name": "waitBlockchainUpdate",
          "line": 32,
          "signature": "void waitBlockchainUpdate();"
        },
        {
          "name": "stop",
          "line": 33,
          "signature": "void stop();"
        }
      ],
      "constants": []
    },
    "src/Miner/Miner.cpp": {
      "path": "src/Miner/Miner.cpp",
      "size": 4618,
      "lines": 158,
      "hash": "df3d812aa046810d",
      "functions": [],
      "constants": []
    },
    "src/Miner/Miner.h": {
      "path": "src/Miner/Miner.h",
      "size": 1993,
      "lines": 68,
      "hash": "f80fd855985b040b",
      "functions": [
        {
          "name": "mine",
          "line": 44,
          "signature": "Block mine(const BlockMiningParameters& blockMiningParameters, size_t threadCount);"
        },
        {
          "name": "stop",
          "line": 47,
          "signature": "void stop();"
        },
        {
          "name": "runWorkers",
          "line": 62,
          "signature": "void runWorkers(BlockMiningParameters blockMiningParameters, size_t threadCount);"
        },
        {
          "name": "workerFunc",
          "line": 63,
          "signature": "void workerFunc(const Block& blockTemplate, difficulty_type difficulty, uint32_t nonceStep);"
        },
        {
          "name": "setStateBlockFound",
          "line": 64,
          "signature": "bool setStateBlockFound();"
        }
      ],
      "constants": []
    },
    "src/Miner/MinerEvent.h": {
      "path": "src/Miner/MinerEvent.h",
      "size": 1017,
      "lines": 31,
      "hash": "100d655996707a2a",
      "functions": [],
      "constants": []
    },
    "src/Miner/MinerManager.cpp": {
      "path": "src/Miner/MinerManager.cpp",
      "size": 8741,
      "lines": 277,
      "hash": "743c2f471f3e01cb",
      "functions": [
        {
          "name": "BlockMinedEvent",
          "line": 39,
          "signature": "MinerEvent BlockMinedEvent() {"
        },
        {
          "name": "BlockchainUpdatedEvent",
          "line": 45,
          "signature": "MinerEvent BlockchainUpdatedEvent() {"
        },
        {
          "name": "adjustMergeMiningTag",
          "line": 51,
          "signature": "void adjustMergeMiningTag(Block& blockTemplate) {"
        },
        {
          "name": "client",
          "line": 210,
          "signature": "HttpClient client(m_dispatcher, daemonHost, daemonPort);"
        },
        {
          "name": "client",
          "line": 230,
          "signature": "HttpClient client(dispatcher, daemonHost, daemonPort);"
        }
      ],
      "constants": []
    },
    "src/Miner/MinerManager.h": {
      "path": "src/Miner/MinerManager.h",
      "size": 2322,
      "lines": 77,
      "hash": "b899f558f15d5139",
      "functions": [
        {
          "name": "start",
          "line": 42,
          "signature": "void start();"
        },
        {
          "name": "eventLoop",
          "line": 60,
          "signature": "void eventLoop();"
        },
        {
          "name": "waitEvent",
          "line": 61,
          "signature": "MinerEvent waitEvent();"
        },
        {
          "name": "pushEvent",
          "line": 62,
          "signature": "void pushEvent(MinerEvent&& event);"
        },
        {
          "name": "startMining",
          "line": 64,
          "signature": "void startMining(const CryptoNote::BlockMiningParameters& params);"
        },
        {
          "name": "stopMining",
          "line": 65,
          "signature": "void stopMining();"
        },
        {
          "name": "startBlockchainMonitoring",
          "line": 67,
          "signature": "void startBlockchainMonitoring();"
        },
        {
          "name": "stopBlockchainMonitoring",
          "line": 68,
          "signature": "void stopBlockchainMonitoring();"
        },
        {
          "name": "submitBlock",
          "line": 70,
          "signature": "bool submitBlock(const CryptoNote::Block& minedBlock, const std::string& daemonHost, uint16_t daemonPort);"
        }
      ],
      "constants": []
    },
    "src/Miner/MiningConfig.cpp": {
      "path": "src/Miner/MiningConfig.cpp",
      "size": 5643,
      "lines": 139,
      "hash": "a372a7cd3b21b978",
      "functions": [
        {
          "name": "parseDaemonAddress",
          "line": 43,
          "signature": "void parseDaemonAddress(const std::string& daemonAddress, std::string& daemonHost, uint16_t& daemonPort) {"
        }
      ],
      "constants": [
        {
          "name": "DEFAULT_SCANT_PERIOD",
          "line": 37,
          "value": "30"
        },
        {
          "name": "CONCURRENCY_LEVEL",
          "line": 39,
          "value": "std::thread::hardware_concurrency()"
        }
      ]
    },
    "src/Miner/MiningConfig.h": {
      "path": "src/Miner/MiningConfig.h",
      "size": 1286,
      "lines": 44,
      "hash": "93cf43afca3b22eb",
      "functions": [
        {
          "name": "parse",
          "line": 28,
          "signature": "void parse(int argc, char** argv);"
        },
        {
          "name": "printHelp",
          "line": 29,
          "signature": "void printHelp();"
        }
      ],
      "constants": []
    },
    "src/Miner/main.cpp": {
      "path": "src/Miner/main.cpp",
      "size": 1618,
      "lines": 53,
      "hash": "9f548d1fb4326814",
      "functions": [
        {
          "name": "main",
          "line": 28,
          "signature": "int main(int argc, char** argv) {"
        }
      ],
      "constants": []
    },
    "src/Mnemonics/chinese_simplified.h": {
      "path": "src/Mnemonics/chinese_simplified.h",
      "size": 21225,
      "lines": 1710,
      "hash": "e66b5a5d040c96aa",
      "functions": [],
      "constants": []
    },
    "src/Mnemonics/dutch.h": {
      "path": "src/Mnemonics/dutch.h",
      "size": 32650,
      "lines": 1687,
      "hash": "db695886f73e3311",
      "functions": [],
      "constants": []
    },
    "src/Mnemonics/electrum-words.cpp": {
      "path": "src/Mnemonics/electrum-words.cpp",
      "size": 17630,
      "lines": 491,
      "hash": "ec43e0785e291f83",
      "functions": [
        {
          "name": "checksum_test",
          "line": 74,
          "signature": "bool checksum_test(std::vector<std::string> seed, uint32_t unique_prefix_length);"
        }
      ],
      "constants": [
        {
          "name": "expected",
          "line": 262,
          "value": "len * 8 * 3 / 32"
        },
        {
          "name": "expected",
          "line": 310,
          "value": "len * 3 / 32"
        }
      ]
    },
    "src/Mnemonics/electrum-words.h": {
      "path": "src/Mnemonics/electrum-words.h",
      "size": 5149,
      "lines": 122,
      "hash": "73be0c5731a633bc",
      "functions": [
        {
          "name": "get_language_list",
          "line": 110,
          "signature": "void get_language_list(std::vector<std::string> &languages);"
        },
        {
          "name": "get_is_old_style_seed",
          "line": 117,
          "signature": "bool get_is_old_style_seed(std::string seed);"
        }
      ],
      "constants": [
        {
          "name": "seed_length",
          "line": 62,
          "value": "24"
        }
      ]
    },
    "src/Mnemonics/english.h": {
      "path": "src/Mnemonics/english.h",
      "size": 31406,
      "lines": 1687,
      "hash": "e49d4f520738911b",
      "functions": [],
      "constants": []
    },
    "src/Mnemonics/english_old.h": {
      "path": "src/Mnemonics/english_old.h",
      "size": 30615,
      "lines": 1689,
      "hash": "8e5decc21e4e9c21",
      "functions": [],
      "constants": []
    },
    "src/Mnemonics/esperanto.h": {
      "path": "src/Mnemonics/esperanto.h",
      "size": 29138,
      "lines": 1696,
      "hash": "7e82fc5526abd97b",
      "functions": [],
      "constants": []
    },
    "src/Mnemonics/french.h": {
      "path": "src/Mnemonics/french.h",
      "size": 30821,
      "lines": 1687,
      "hash": "415c7419e9b49747",
      "functions": [],
      "constants": []
    },
    "src/Mnemonics/german.h": {
      "path": "src/Mnemonics/german.h",
      "size": 32159,
      "lines": 1689,
      "hash": "fcf3f0ec58768b6d",
      "functions": [],
      "constants": []
    },
    "src/Mnemonics/italian.h": {
      "path": "src/Mnemonics/italian.h",
      "size": 32765,
      "lines": 1689,
      "hash": "2efcbfbf7f9167ad",
      "functions": [],
      "constants": []
    },
    "src/Mnemonics/japanese.h": {
      "path": "src/Mnemonics/japanese.h",
      "size": 28717,
      "lines": 1709,
      "hash": "c8dae372e7660bc9",
      "functions": [],
      "constants": []
    },
    "src/Mnemonics/language_base.h": {
      "path": "src/Mnemonics/language_base.h",
      "size": 6127,
      "lines": 182,
      "hash": "54390ae3083b2da1",
      "functions": [],
      "constants": []
    },
    "src/Mnemonics/lojban.h": {
      "path": "src/Mnemonics/lojban.h",
      "size": 26828,
      "lines": 1694,
      "hash": "332b9bac45be5c60",
      "functions": [],
      "constants": []
    },
    "src/Mnemonics/portuguese.h": {
      "path": "src/Mnemonics/portuguese.h",
      "size": 34317,
      "lines": 1710,
      "hash": "b120437cbecf590f",
      "functions": [],
      "constants": []
    },
    "src/Mnemonics/russian.h": {
      "path": "src/Mnemonics/russian.h",
      "size": 31184,
      "lines": 1689,
      "hash": "f100c885af2a3ba7",
      "functions": [],
      "constants": []
    },
    "src/Mnemonics/singleton.h": {
      "path": "src/Mnemonics/singleton.h",
      "size": 2201,
      "lines": 63,
      "hash": "8eb3eaef769e9ae0",
      "functions": [],
      "constants": []
    },
    "src/Mnemonics/spanish.h": {
      "path": "src/Mnemonics/spanish.h",
      "size": 31800,
      "lines": 1710,
      "hash": "f396152e329ab3cf",
      "functions": [],
      "constants": []
    },
    "src/NodeRpcProxy/NodeErrors.cpp": {
      "path": "src/NodeRpcProxy/NodeErrors.cpp",
      "size": 959,
      "lines": 27,
      "hash": "8eca1773dfd2a75d",
      "functions": [],
      "constants": []
    },
    "src/NodeRpcProxy/NodeErrors.h": {
      "path": "src/NodeRpcProxy/NodeErrors.h",
      "size": 2286,
      "lines": 74,
      "hash": "60917007f1a08d4c",
      "functions": [],
      "constants": []
    },
    "src/NodeRpcProxy/NodeRpcProxy.cpp": {
      "path": "src/NodeRpcProxy/NodeRpcProxy.cpp",
      "size": 25286,
      "lines": 754,
      "hash": "e2321163c7caf49c",
      "functions": [
        {
          "name": "make_error_code",
          "line": 56,
          "signature": "return make_error_code(error::NODE_BUSY);"
        },
        {
          "name": "make_error_code",
          "line": 58,
          "signature": "return make_error_code(error::INTERNAL_NODE_ERROR);"
        },
        {
          "name": "contextGroup",
          "line": 136,
          "signature": "ContextGroup contextGroup(dispatcher);"
        },
        {
          "name": "httpClient",
          "line": 138,
          "signature": "HttpClient httpClient(dispatcher, m_nodeHost, m_nodePort);"
        },
        {
          "name": "httpEvent",
          "line": 140,
          "signature": "Event httpEvent(dispatcher);"
        },
        {
          "name": "pullTimer",
          "line": 154,
          "signature": "Timer pullTimer(*m_dispatcher);"
        },
        {
          "name": "jsonCommand",
          "line": 480,
          "signature": "return jsonCommand(\"/sendrawtransaction\", req, rsp);"
        },
        {
          "name": "make_error_code",
          "line": 612,
          "signature": "return make_error_code(CryptoNote::error::REQUEST_ERROR);"
        },
        {
          "name": "make_error_code",
          "line": 618,
          "signature": "return make_error_code(error::INTERNAL_NODE_ERROR);"
        },
        {
          "name": "make_error_code",
          "line": 625,
          "signature": "return make_error_code(error::INTERNAL_NODE_ERROR);"
        },
        {
          "name": "eventLock",
          "line": 687,
          "signature": "EventLock eventLock(*m_httpEvent);"
        },
        {
          "name": "eventLock",
          "line": 704,
          "signature": "EventLock eventLock(*m_httpEvent);"
        },
        {
          "name": "eventLock",
          "line": 721,
          "signature": "EventLock eventLock(*m_httpEvent);"
        }
      ],
      "constants": []
    },
    "src/NodeRpcProxy/NodeRpcProxy.h": {
      "path": "src/NodeRpcProxy/NodeRpcProxy.h",
      "size": 8146,
      "lines": 159,
      "hash": "fad01f3023bca136",
      "functions": [
        {
          "name": "connectionStatusUpdated",
          "line": 43,
          "signature": "virtual void connectionStatusUpdated(bool connected) {}"
        },
        {
          "name": "addObserver",
          "line": 54,
          "signature": "virtual bool addObserver(CryptoNote::INodeRpcProxyObserver* observer);"
        },
        {
          "name": "removeObserver",
          "line": 55,
          "signature": "virtual bool removeObserver(CryptoNote::INodeRpcProxyObserver* observer);"
        },
        {
          "name": "rpcTimeout",
          "line": 84,
          "signature": "void rpcTimeout(unsigned int val) { m_rpcTimeout = val; }"
        },
        {
          "name": "resetInternalState",
          "line": 87,
          "signature": "void resetInternalState();"
        },
        {
          "name": "workerThread",
          "line": 88,
          "signature": "void workerThread(const Callback& initialized_callback);"
        },
        {
          "name": "pullNodeStatusAndScheduleTheNext",
          "line": 91,
          "signature": "void pullNodeStatusAndScheduleTheNext();"
        },
        {
          "name": "updateNodeStatus",
          "line": 92,
          "signature": "void updateNodeStatus();"
        },
        {
          "name": "updateBlockchainStatus",
          "line": 93,
          "signature": "void updateBlockchainStatus();"
        },
        {
          "name": "updatePoolStatus",
          "line": 94,
          "signature": "bool updatePoolStatus();"
        },
        {
          "name": "updatePeerCount",
          "line": 95,
          "signature": "void updatePeerCount(size_t peerCount);"
        },
        {
          "name": "updatePoolState",
          "line": 96,
          "signature": "void updatePoolState(const std::vector<std::unique_ptr<ITransactionReader>>& addedTxs, const std::vector<Crypto::Hash>& deletedTxsIds);"
        }
      ],
      "constants": []
    },
    "src/Optimizer/Optimizer.cpp": {
      "path": "src/Optimizer/Optimizer.cpp",
      "size": 13778,
      "lines": 343,
      "hash": "11bd2d96eec0fa3e",
      "functions": [
        {
          "name": "validAddress",
          "line": 62,
          "signature": "bool validAddress(po::variables_map& vm, const std::string& address) {"
        },
        {
          "name": "isWalletEligible",
          "line": 114,
          "signature": "bool isWalletEligible(po::variables_map& vm, std::string address) {"
        },
        {
          "name": "optimizeWallet",
          "line": 150,
          "signature": "bool optimizeWallet(po::variables_map& vm, std::string address) {"
        },
        {
          "name": "processWallets",
          "line": 188,
          "signature": "void processWallets(po::variables_map& vm, std::vector<std::string>& containerAddresses, int& optimized, int& notOptimized, const std::chrono::time_point<std::chrono::steady_clock>& start) {"
        },
        {
          "name": "canConnect",
          "line": 246,
          "signature": "bool canConnect(po::variables_map& vm) {"
        },
        {
          "name": "run_optimizer",
          "line": 268,
          "signature": "bool run_optimizer(po::variables_map& vm) {"
        },
        {
          "name": "main",
          "line": 303,
          "signature": "int main(int argc, char *argv[]) {"
        }
      ],
      "constants": [
        {
          "name": "ENDL",
          "line": 41,
          "value": "std::endl"
        },
        {
          "name": "DEFAULT_THRESHOLD",
          "line": 44,
          "value": "UINT64_C(100)"
        }
      ]
    },
    "src/P2p/ConnectionContext.h": {
      "path": "src/P2p/ConnectionContext.h",
      "size": 2401,
      "lines": 77,
      "hash": "7c061d45f5cff03e",
      "functions": [],
      "constants": []
    },
    "src/P2p/IP2pNodeInternal.cpp": {
      "path": "src/P2p/IP2pNodeInternal.cpp",
      "size": 870,
      "lines": 19,
      "hash": "546bbde79df6f490",
      "functions": [],
      "constants": []
    },
    "src/P2p/IP2pNodeInternal.h": {
      "path": "src/P2p/IP2pNodeInternal.h",
      "size": 1441,
      "lines": 40,
      "hash": "5c8537d64be37766",
      "functions": [],
      "constants": []
    },
    "src/P2p/LevinProtocol.cpp": {
      "path": "src/P2p/LevinProtocol.cpp",
      "size": 4186,
      "lines": 146,
      "hash": "79e28a126278d6b9",
      "functions": [],
      "constants": [
        {
          "name": "LEVIN_SIGNATURE",
          "line": 25,
          "value": "0x0101010101012101LL"
        },
        {
          "name": "LEVIN_PACKET_REQUEST",
          "line": 26,
          "value": "0x00000001"
        },
        {
          "name": "LEVIN_PACKET_RESPONSE",
          "line": 27,
          "value": "0x00000002"
        },
        {
          "name": "LEVIN_DEFAULT_MAX_PACKET_SIZE",
          "line": 28,
          "value": "100000000"
        },
        {
          "name": "LEVIN_PROTOCOL_VER_1",
          "line": 29,
          "value": "1"
        }
      ]
    },
    "src/P2p/LevinProtocol.h": {
      "path": "src/P2p/LevinProtocol.h",
      "size": 3123,
      "lines": 114,
      "hash": "4ce8d9700a7f92e8",
      "functions": [
        {
          "name": "invoke",
          "line": 51,
          "signature": "bool invoke(uint32_t command, const Request& request, Response& response) {"
        },
        {
          "name": "decode",
          "line": 61,
          "signature": "return decode(cmd.buf, response);"
        },
        {
          "name": "notify",
          "line": 65,
          "signature": "void notify(uint32_t command, const Request& request, int) {"
        },
        {
          "name": "readCommand",
          "line": 78,
          "signature": "bool readCommand(Command& cmd);"
        },
        {
          "name": "sendMessage",
          "line": 80,
          "signature": "void sendMessage(uint32_t command, const BinaryArray& out, bool needResponse);"
        },
        {
          "name": "sendReply",
          "line": 81,
          "signature": "void sendReply(uint32_t command, const BinaryArray& out, int32_t returnCode);"
        },
        {
          "name": "decode",
          "line": 84,
          "signature": "static bool decode(const BinaryArray& buf, T& value) {"
        },
        {
          "name": "serializer",
          "line": 87,
          "signature": "KVBinaryInputStreamSerializer serializer(stream);"
        },
        {
          "name": "encode",
          "line": 97,
          "signature": "static BinaryArray encode(const T& value) {"
        },
        {
          "name": "readStrict",
          "line": 108,
          "signature": "bool readStrict(uint8_t* ptr, size_t size);"
        },
        {
          "name": "writeStrict",
          "line": 109,
          "signature": "void writeStrict(const uint8_t* ptr, size_t size);"
        }
      ],
      "constants": [
        {
          "name": "LEVIN_PROTOCOL_RETCODE_SUCCESS",
          "line": 43,
          "value": "1"
        }
      ]
    },
    "src/P2p/NetNode.cpp": {
      "path": "src/P2p/NetNode.cpp",
      "size": 63932,
      "lines": 1732,
      "hash": "4be3bd83ca3c6c23",
      "functions": [
        {
          "name": "get_random_index_with_fixed_probability",
          "line": 54,
          "signature": "size_t get_random_index_with_fixed_probability(size_t max_index) {"
        },
        {
          "name": "addPortMapping",
          "line": 64,
          "signature": "void addPortMapping(Logging::LoggerRef& logger, uint32_t port) {"
        },
        {
          "name": "parse_peer_from_string",
          "line": 98,
          "signature": "bool parse_peer_from_string(NetworkAddress& pe, const std::string& node_addr) {"
        },
        {
          "name": "invokeAdaptor",
          "line": 192,
          "signature": "int invokeAdaptor(const BinaryArray& reqBuf, BinaryArray& resBuf, P2pConnectionContext& ctx, Handler handler) {"
        },
        {
          "name": "inputStream",
          "line": 310,
          "signature": "StdInputStream inputStream(p2p_data);"
        },
        {
          "name": "a",
          "line": 311,
          "signature": "BinaryInputStreamSerializer a(inputStream);"
        },
        {
          "name": "unblock_host",
          "line": 453,
          "signature": "return unblock_host(address_ip);"
        },
        {
          "name": "block_host",
          "line": 461,
          "signature": "return block_host(address_ip, seconds);"
        },
        {
          "name": "unblock_host",
          "line": 467,
          "signature": "return unblock_host(address_ip);"
        },
        {
          "name": "store_config",
          "line": 661,
          "signature": "return store_config();"
        },
        {
          "name": "stream",
          "line": 682,
          "signature": "StdOutputStream stream(p2p_data);"
        },
        {
          "name": "a",
          "line": 683,
          "signature": "BinaryOutputStreamSerializer a(stream);"
        },
        {
          "name": "handshake",
          "line": 883,
          "signature": "return handshake(proto, ctx, just_take_peerlist);"
        },
        {
          "name": "proto",
          "line": 1624,
          "signature": "LevinProtocol proto(ctx.connection);"
        },
        {
          "name": "proto",
          "line": 1685,
          "signature": "LevinProtocol proto(ctx.connection);"
        }
      ],
      "constants": []
    },
    "src/P2p/NetNode.h": {
      "path": "src/P2p/NetNode.h",
      "size": 11073,
      "lines": 290,
      "hash": "94be366f2940f939",
      "functions": [
        {
          "name": "size",
          "line": 63,
          "signature": "size_t size() {"
        },
        {
          "name": "pushMessage",
          "line": 101,
          "signature": "bool pushMessage(P2pMessage&& msg);"
        },
        {
          "name": "interrupt",
          "line": 103,
          "signature": "void interrupt();"
        },
        {
          "name": "init_options",
          "line": 120,
          "signature": "static void init_options(boost::program_options::options_description& desc);"
        },
        {
          "name": "run",
          "line": 124,
          "signature": "bool run();"
        },
        {
          "name": "init",
          "line": 125,
          "signature": "bool init(const NetNodeConfig& config);"
        },
        {
          "name": "deinit",
          "line": 126,
          "signature": "bool deinit();"
        },
        {
          "name": "sendStopSignal",
          "line": 127,
          "signature": "bool sendStopSignal();"
        },
        {
          "name": "get_this_peer_port",
          "line": 128,
          "signature": "uint32_t get_this_peer_port(){return m_listeningPort;}"
        },
        {
          "name": "serialize",
          "line": 131,
          "signature": "void serialize(ISerializer& s);"
        },
        {
          "name": "log_peerlist",
          "line": 134,
          "signature": "bool log_peerlist();"
        },
        {
          "name": "log_connections",
          "line": 135,
          "signature": "bool log_connections();"
        },
        {
          "name": "log_banlist",
          "line": 136,
          "signature": "bool log_banlist();"
        },
        {
          "name": "get_outgoing_connections_count",
          "line": 138,
          "signature": "size_t get_outgoing_connections_count();"
        },
        {
          "name": "handleCommand",
          "line": 152,
          "signature": "int handleCommand(const LevinProtocol::Command& cmd, BinaryArray& buff_out, P2pConnectionContext& context, bool& handled);"
        },
        {
          "name": "handle_handshake",
          "line": 155,
          "signature": "int handle_handshake(int command, COMMAND_HANDSHAKE::request& arg, COMMAND_HANDSHAKE::response& rsp, P2pConnectionContext& context);"
        },
        {
          "name": "handle_timed_sync",
          "line": 156,
          "signature": "int handle_timed_sync(int command, COMMAND_TIMED_SYNC::request& arg, COMMAND_TIMED_SYNC::response& rsp, P2pConnectionContext& context);"
        },
        {
          "name": "handle_ping",
          "line": 157,
          "signature": "int handle_ping(int command, COMMAND_PING::request& arg, COMMAND_PING::response& rsp, P2pConnectionContext& context);"
        },
        {
          "name": "handle_get_stat_info",
          "line": 160,
          "signature": "int handle_get_stat_info(int command, COMMAND_REQUEST_STAT_INFO::request& arg, COMMAND_REQUEST_STAT_INFO::response& rsp, P2pConnectionContext& context);"
        },
        {
          "name": "handle_get_network_state",
          "line": 161,
          "signature": "int handle_get_network_state(int command, COMMAND_REQUEST_NETWORK_STATE::request& arg, COMMAND_REQUEST_NETWORK_STATE::response& rsp, P2pConnectionContext& context);"
        },
        {
          "name": "handle_get_peer_id",
          "line": 162,
          "signature": "int handle_get_peer_id(int command, COMMAND_REQUEST_PEER_ID::request& arg, COMMAND_REQUEST_PEER_ID::response& rsp, P2pConnectionContext& context);"
        },
        {
          "name": "init_config",
          "line": 165,
          "signature": "bool init_config();"
        },
        {
          "name": "make_default_config",
          "line": 166,
          "signature": "bool make_default_config();"
        },
        {
          "name": "store_config",
          "line": 167,
          "signature": "bool store_config();"
        },
        {
          "name": "check_trust",
          "line": 168,
          "signature": "bool check_trust(const proof_of_trust& tr);"
        },
        {
          "name": "initUpnp",
          "line": 169,
          "signature": "void initUpnp();"
        },
        {
          "name": "handshake",
          "line": 171,
          "signature": "bool handshake(CryptoNote::LevinProtocol& proto, P2pConnectionContext& context, bool just_take_peerlist = false);"
        },
        {
          "name": "timedSync",
          "line": 172,
          "signature": "bool timedSync();"
        },
        {
          "name": "handleTimedSyncResponse",
          "line": 173,
          "signature": "bool handleTimedSyncResponse(const BinaryArray& in, P2pConnectionContext& context);"
        },
        {
          "name": "on_connection_new",
          "line": 176,
          "signature": "void on_connection_new(P2pConnectionContext& context);"
        },
        {
          "name": "on_connection_close",
          "line": 177,
          "signature": "void on_connection_close(P2pConnectionContext& context);"
        },
        {
          "name": "add_host_fail",
          "line": 187,
          "signature": "bool add_host_fail(const uint32_t address_ip);"
        },
        {
          "name": "block_host",
          "line": 188,
          "signature": "bool block_host(const uint32_t address_ip, time_t seconds = P2P_IP_BLOCKTIME);"
        },
        {
          "name": "unblock_host",
          "line": 189,
          "signature": "bool unblock_host(const uint32_t address_ip);"
        },
        {
          "name": "handle_command_line",
          "line": 190,
          "signature": "bool handle_command_line(const boost::program_options::variables_map& vm);"
        },
        {
          "name": "is_addr_recently_failed",
          "line": 191,
          "signature": "bool is_addr_recently_failed(const uint32_t address_ip);"
        },
        {
          "name": "is_remote_host_allowed",
          "line": 192,
          "signature": "bool is_remote_host_allowed(const uint32_t address_ip);"
        },
        {
          "name": "handleConfig",
          "line": 193,
          "signature": "bool handleConfig(const NetNodeConfig& config);"
        },
        {
          "name": "append_net_address",
          "line": 194,
          "signature": "bool append_net_address(std::vector<NetworkAddress>& nodes, const std::string& addr);"
        },
        {
          "name": "idle_worker",
          "line": 195,
          "signature": "bool idle_worker();"
        },
        {
          "name": "handle_remote_peerlist",
          "line": 196,
          "signature": "bool handle_remote_peerlist(const std::list<PeerlistEntry>& peerlist, time_t local_time, const CryptoNoteConnectionContext& context);"
        },
        {
          "name": "get_local_node_data",
          "line": 197,
          "signature": "bool get_local_node_data(basic_node_data& node_data);"
        },
        {
          "name": "merge_peerlist_with_local",
          "line": 198,
          "signature": "bool merge_peerlist_with_local(const std::list<PeerlistEntry>& bs);"
        },
        {
          "name": "fix_time_delta",
          "line": 199,
          "signature": "bool fix_time_delta(std::list<PeerlistEntry>& local_peerlist, time_t local_time, int64_t& delta);"
        },
        {
          "name": "connections_maker",
          "line": 201,
          "signature": "bool connections_maker();"
        },
        {
          "name": "make_new_connection_from_peerlist",
          "line": 202,
          "signature": "bool make_new_connection_from_peerlist(bool use_white_list);"
        },
        {
          "name": "make_new_connection_from_anchor_peerlist",
          "line": 203,
          "signature": "bool make_new_connection_from_anchor_peerlist(const std::vector<AnchorPeerlistEntry> &anchor_peerlist);"
        },
        {
          "name": "try_to_connect_and_handshake_with_new_peer",
          "line": 204,
          "signature": "bool try_to_connect_and_handshake_with_new_peer(const NetworkAddress &na, bool just_take_peerlist = false, uint64_t last_seen_stamp = 0, PeerType peer_type = white, uint64_t first_seen_stamp = 0);"
        },
        {
          "name": "is_peer_used",
          "line": 205,
          "signature": "bool is_peer_used(const PeerlistEntry &peer);"
        },
        {
          "name": "is_peer_used",
          "line": 206,
          "signature": "bool is_peer_used(const AnchorPeerlistEntry &peer);"
        },
        {
          "name": "is_addr_connected",
          "line": 207,
          "signature": "bool is_addr_connected(const NetworkAddress& peer);"
        },
        {
          "name": "try_ping",
          "line": 208,
          "signature": "bool try_ping(basic_node_data& node_data, P2pConnectionContext& context);"
        },
        {
          "name": "make_expected_connections_count",
          "line": 209,
          "signature": "bool make_expected_connections_count(PeerType peer_type, size_t expected_connections);"
        },
        {
          "name": "is_priority_node",
          "line": 210,
          "signature": "bool is_priority_node(const NetworkAddress& na);"
        },
        {
          "name": "connect_to_peerlist",
          "line": 212,
          "signature": "bool connect_to_peerlist(const std::vector<NetworkAddress>& peers);"
        },
        {
          "name": "acceptLoop",
          "line": 224,
          "signature": "void acceptLoop();"
        },
        {
          "name": "connectionHandler",
          "line": 225,
          "signature": "void connectionHandler(const boost::uuids::uuid& connectionId, P2pConnectionContext& connection);"
        },
        {
          "name": "writeHandler",
          "line": 226,
          "signature": "void writeHandler(P2pConnectionContext& ctx);"
        },
        {
          "name": "onIdle",
          "line": 227,
          "signature": "void onIdle();"
        },
        {
          "name": "timedSyncLoop",
          "line": 228,
          "signature": "void timedSyncLoop();"
        },
        {
          "name": "timeoutLoop",
          "line": 229,
          "signature": "void timeoutLoop();"
        },
        {
          "name": "safeInterrupt",
          "line": 232,
          "signature": "void safeInterrupt(T& obj);"
        },
        {
          "name": "serialize",
          "line": 239,
          "signature": "void serialize(ISerializer& s) {"
        }
      ],
      "constants": []
    },
    "src/P2p/NetNodeCommon.h": {
      "path": "src/P2p/NetNodeCommon.h",
      "size": 3371,
      "lines": 57,
      "hash": "ff5ee5ae10762165",
      "functions": [],
      "constants": []
    },
    "src/P2p/NetNodeConfig.cpp": {
      "path": "src/P2p/NetNodeConfig.cpp",
      "size": 8259,
      "lines": 247,
      "hash": "c04c56a098e9a046",
      "functions": [
        {
          "name": "parsePeerFromString",
          "line": 42,
          "signature": "bool parsePeerFromString(NetworkAddress& pe, const std::string& node_addr) {"
        }
      ],
      "constants": []
    },
    "src/P2p/NetNodeConfig.h": {
      "path": "src/P2p/NetNodeConfig.h",
      "size": 2664,
      "lines": 77,
      "hash": "1347068b291c2d76",
      "functions": [
        {
          "name": "initOptions",
          "line": 32,
          "signature": "static void initOptions(boost::program_options::options_description& desc);"
        },
        {
          "name": "init",
          "line": 33,
          "signature": "bool init(const boost::program_options::variables_map& vm);"
        },
        {
          "name": "setP2pStateFilename",
          "line": 48,
          "signature": "void setP2pStateFilename(const std::string& filename);"
        },
        {
          "name": "setTestnet",
          "line": 49,
          "signature": "void setTestnet(bool isTestnet);"
        },
        {
          "name": "setBindIp",
          "line": 50,
          "signature": "void setBindIp(const std::string& ip);"
        },
        {
          "name": "setBindPort",
          "line": 51,
          "signature": "void setBindPort(uint16_t port);"
        },
        {
          "name": "setExternalPort",
          "line": 52,
          "signature": "void setExternalPort(uint16_t port);"
        },
        {
          "name": "setAllowLocalIp",
          "line": 53,
          "signature": "void setAllowLocalIp(bool allow);"
        },
        {
          "name": "setPeers",
          "line": 54,
          "signature": "void setPeers(const std::vector<PeerlistEntry>& peerList);"
        },
        {
          "name": "setPriorityNodes",
          "line": 55,
          "signature": "void setPriorityNodes(const std::vector<NetworkAddress>& addresses);"
        },
        {
          "name": "setExclusiveNodes",
          "line": 56,
          "signature": "void setExclusiveNodes(const std::vector<NetworkAddress>& addresses);"
        },
        {
          "name": "setSeedNodes",
          "line": 57,
          "signature": "void setSeedNodes(const std::vector<NetworkAddress>& addresses);"
        },
        {
          "name": "setHideMyPort",
          "line": 58,
          "signature": "void setHideMyPort(bool hide);"
        },
        {
          "name": "setConfigFolder",
          "line": 59,
          "signature": "void setConfigFolder(const std::string& folder);"
        }
      ],
      "constants": []
    },
    "src/P2p/P2pConnectionProxy.cpp": {
      "path": "src/P2p/P2pConnectionProxy.cpp",
      "size": 5411,
      "lines": 169,
      "hash": "29aa19cbdb44a0b2",
      "functions": [
        {
          "name": "InterruptedException",
          "line": 67,
          "signature": "throw InterruptedException();"
        }
      ],
      "constants": []
    },
    "src/P2p/P2pConnectionProxy.h": {
      "path": "src/P2p/P2pConnectionProxy.h",
      "size": 1833,
      "lines": 60,
      "hash": "9799ea9bd6bb2007",
      "functions": [
        {
          "name": "processIncomingHandshake",
          "line": 38,
          "signature": "bool processIncomingHandshake();"
        },
        {
          "name": "writeHandshake",
          "line": 48,
          "signature": "void writeHandshake(const P2pMessage &message);"
        },
        {
          "name": "handleHandshakeRequest",
          "line": 49,
          "signature": "void handleHandshakeRequest(const LevinProtocol::Command& cmd);"
        },
        {
          "name": "handleHandshakeResponse",
          "line": 50,
          "signature": "void handleHandshakeResponse(const LevinProtocol::Command& cmd, P2pMessage& message);"
        },
        {
          "name": "handleTimedSync",
          "line": 51,
          "signature": "void handleTimedSync(const LevinProtocol::Command& cmd);"
        }
      ],
      "constants": []
    },
    "src/P2p/P2pContext.cpp": {
      "path": "src/P2p/P2pContext.cpp",
      "size": 5017,
      "lines": 194,
      "hash": "a3a368dfaa788b1f",
      "functions": [
        {
          "name": "InterruptedException",
          "line": 102,
          "signature": "throw InterruptedException();"
        },
        {
          "name": "lk",
          "line": 105,
          "signature": "EventLock lk(readEvent);"
        },
        {
          "name": "InterruptedException",
          "line": 113,
          "signature": "throw InterruptedException();"
        },
        {
          "name": "lk",
          "line": 116,
          "signature": "EventLock lk(writeEvent);"
        },
        {
          "name": "proto",
          "line": 117,
          "signature": "LevinProtocol proto(connection);"
        }
      ],
      "constants": []
    },
    "src/P2p/P2pContext.h": {
      "path": "src/P2p/P2pContext.h",
      "size": 2995,
      "lines": 105,
      "hash": "c8fb6b6230321ac3",
      "functions": [
        {
          "name": "setPeerInfo",
          "line": 65,
          "signature": "void setPeerInfo(uint8_t protocolVersion, PeerIdType id, uint16_t port);"
        },
        {
          "name": "readCommand",
          "line": 66,
          "signature": "bool readCommand(LevinProtocol::Command& cmd);"
        },
        {
          "name": "writeMessage",
          "line": 67,
          "signature": "void writeMessage(const Message& msg);"
        },
        {
          "name": "start",
          "line": 69,
          "signature": "void start();"
        },
        {
          "name": "stop",
          "line": 70,
          "signature": "void stop();"
        },
        {
          "name": "timedSyncLoop",
          "line": 96,
          "signature": "void timedSyncLoop();"
        }
      ],
      "constants": []
    },
    "src/P2p/P2pContextOwner.cpp": {
      "path": "src/P2p/P2pContextOwner.cpp",
      "size": 1636,
      "lines": 48,
      "hash": "4d89896414e084ce",
      "functions": [],
      "constants": []
    },
    "src/P2p/P2pContextOwner.h": {
      "path": "src/P2p/P2pContextOwner.h",
      "size": 1352,
      "lines": 47,
      "hash": "5ed9c4b0a47aefe2",
      "functions": [],
      "constants": []
    },
    "src/P2p/P2pInterfaces.cpp": {
      "path": "src/P2p/P2pInterfaces.cpp",
      "size": 933,
      "lines": 26,
      "hash": "5dd4ba877487f755",
      "functions": [],
      "constants": []
    },
    "src/P2p/P2pInterfaces.h": {
      "path": "src/P2p/P2pInterfaces.h",
      "size": 1343,
      "lines": 48,
      "hash": "33ff568f26609293",
      "functions": [],
      "constants": []
    },
    "src/P2p/P2pNetworks.h": {
      "path": "src/P2p/P2pNetworks.h",
      "size": 1037,
      "lines": 24,
      "hash": "12137142d614846a",
      "functions": [],
      "constants": []
    },
    "src/P2p/P2pNode.cpp": {
      "path": "src/P2p/P2pNode.cpp",
      "size": 17074,
      "lines": 569,
      "hash": "b7d37567302f101f",
      "functions": [
        {
          "name": "generate",
          "line": 57,
          "signature": "bool generate(size_t& num) {"
        },
        {
          "name": "getRandomIndex",
          "line": 73,
          "signature": "size_t getRandomIndex() {"
        },
        {
          "name": "getRemoteAddress",
          "line": 88,
          "signature": "NetworkAddress getRemoteAddress(const TcpConnection& connection) {"
        },
        {
          "name": "InterruptedException",
          "line": 148,
          "signature": "throw InterruptedException();"
        },
        {
          "name": "stream",
          "line": 189,
          "signature": "StdOutputStream stream(os);"
        },
        {
          "name": "a",
          "line": 190,
          "signature": "BinaryOutputStreamSerializer a(stream);"
        },
        {
          "name": "stream",
          "line": 195,
          "signature": "StdInputStream stream(in);"
        },
        {
          "name": "a",
          "line": 196,
          "signature": "BinaryInputStreamSerializer a(stream);"
        },
        {
          "name": "connector",
          "line": 365,
          "signature": "TcpConnector connector(m_dispatcher);"
        },
        {
          "name": "ContextPtr",
          "line": 381,
          "signature": "return ContextPtr();"
        },
        {
          "name": "handleRemotePeerList",
          "line": 419,
          "signature": "return handleRemotePeerList(response.local_peerlist, response.node_data.local_time);"
        },
        {
          "name": "connector",
          "line": 516,
          "signature": "TcpConnector connector(m_dispatcher);"
        },
        {
          "name": "proto",
          "line": 524,
          "signature": "LevinProtocol proto(connection);"
        }
      ],
      "constants": [
        {
          "name": "totalExpectedConnectionsCount",
          "line": 253,
          "value": "m_cfg.getExpectedOutgoingConnectionsCount()"
        },
        {
          "name": "expectedWhiteConnections",
          "line": 254,
          "value": "(totalExpectedConnectionsCount * m_cfg.getWhiteListConnectionsPercent()) / 100"
        },
        {
          "name": "outgoingConnections",
          "line": 255,
          "value": "getOutgoingConnectionsCount()"
        }
      ]
    },
    "src/P2p/P2pNode.h": {
      "path": "src/P2p/P2pNode.h",
      "size": 3893,
      "lines": 123,
      "hash": "d915312cbe4b8d69",
      "functions": [
        {
          "name": "start",
          "line": 68,
          "signature": "void start();"
        },
        {
          "name": "serialize",
          "line": 69,
          "signature": "void serialize(ISerializer& s);"
        },
        {
          "name": "acceptLoop",
          "line": 102,
          "signature": "void acceptLoop();"
        },
        {
          "name": "connectorLoop",
          "line": 103,
          "signature": "void connectorLoop();"
        },
        {
          "name": "connectPeers",
          "line": 106,
          "signature": "void connectPeers();"
        },
        {
          "name": "connectPeerList",
          "line": 107,
          "signature": "void connectPeerList(const std::vector<NetworkAddress>& peers);"
        },
        {
          "name": "isPeerConnected",
          "line": 108,
          "signature": "bool isPeerConnected(const NetworkAddress& address);"
        },
        {
          "name": "isPeerUsed",
          "line": 109,
          "signature": "bool isPeerUsed(const PeerlistEntry& peer);"
        },
        {
          "name": "tryToConnectPeer",
          "line": 110,
          "signature": "ContextPtr tryToConnectPeer(const NetworkAddress& address);"
        },
        {
          "name": "fetchPeerList",
          "line": 111,
          "signature": "bool fetchPeerList(ContextPtr connection);"
        },
        {
          "name": "makeExpectedConnectionsCount",
          "line": 115,
          "signature": "void makeExpectedConnectionsCount(const PeerlistManager::Peerlist& peerlist, size_t connectionsCount);"
        },
        {
          "name": "makeNewConnectionFromPeerlist",
          "line": 116,
          "signature": "bool makeNewConnectionFromPeerlist(const PeerlistManager::Peerlist& peerlist);"
        },
        {
          "name": "preprocessIncomingConnection",
          "line": 117,
          "signature": "void preprocessIncomingConnection(ContextPtr ctx);"
        },
        {
          "name": "enqueueConnection",
          "line": 118,
          "signature": "void enqueueConnection(std::unique_ptr<P2pConnectionProxy> proxy);"
        }
      ],
      "constants": []
    },
    "src/P2p/P2pNodeConfig.cpp": {
      "path": "src/P2p/P2pNodeConfig.cpp",
      "size": 3824,
      "lines": 131,
      "hash": "ed0629a9db9b352e",
      "functions": [],
      "constants": [
        {
          "name": "P2P_DEFAULT_CONNECT_RANGE",
          "line": 28,
          "value": "20"
        },
        {
          "name": "P2P_DEFAULT_PEERLIST_GET_TRY_COUNT",
          "line": 29,
          "value": "10"
        }
      ]
    },
    "src/P2p/P2pNodeConfig.h": {
      "path": "src/P2p/P2pNodeConfig.h",
      "size": 2346,
      "lines": 64,
      "hash": "9da3bfdbb3f95d2d",
      "functions": [
        {
          "name": "setTimedSyncInterval",
          "line": 41,
          "signature": "void setTimedSyncInterval(std::chrono::nanoseconds interval);"
        },
        {
          "name": "setHandshakeTimeout",
          "line": 42,
          "signature": "void setHandshakeTimeout(std::chrono::nanoseconds timeout);"
        },
        {
          "name": "setConnectInterval",
          "line": 43,
          "signature": "void setConnectInterval(std::chrono::nanoseconds interval);"
        },
        {
          "name": "setConnectTimeout",
          "line": 44,
          "signature": "void setConnectTimeout(std::chrono::nanoseconds timeout);"
        },
        {
          "name": "setExpectedOutgoingConnectionsCount",
          "line": 45,
          "signature": "void setExpectedOutgoingConnectionsCount(size_t count);"
        },
        {
          "name": "setWhiteListConnectionsPercent",
          "line": 46,
          "signature": "void setWhiteListConnectionsPercent(size_t percent);"
        },
        {
          "name": "setNetworkId",
          "line": 47,
          "signature": "void setNetworkId(const boost::uuids::uuid& id);"
        },
        {
          "name": "setPeerListConnectRange",
          "line": 48,
          "signature": "void setPeerListConnectRange(size_t range);"
        },
        {
          "name": "setPeerListGetTryCount",
          "line": 49,
          "signature": "void setPeerListGetTryCount(size_t count);"
        }
      ],
      "constants": []
    },
    "src/P2p/P2pProtocolDefinitions.h": {
      "path": "src/P2p/P2pProtocolDefinitions.h",
      "size": 7428,
      "lines": 294,
      "hash": "dd4dc962a1516890",
      "functions": [
        {
          "name": "serialize",
          "line": 24,
          "signature": "inline bool serialize(uuid& v, Common::StringView name, ISerializer& s) {"
        },
        {
          "name": "serialize",
          "line": 30,
          "signature": "void serialize(ISerializer& s) {"
        },
        {
          "name": "serialize",
          "line": 54,
          "signature": "void serialize(ISerializer& s) {"
        },
        {
          "name": "serialize",
          "line": 71,
          "signature": "void serialize(ISerializer& s) {"
        },
        {
          "name": "serialize",
          "line": 91,
          "signature": "void serialize(ISerializer& s) {"
        },
        {
          "name": "serialize",
          "line": 104,
          "signature": "void serialize(ISerializer& s) {"
        },
        {
          "name": "serialize",
          "line": 124,
          "signature": "void serialize(ISerializer& s) {"
        },
        {
          "name": "serialize",
          "line": 136,
          "signature": "void serialize(ISerializer& s) {"
        },
        {
          "name": "serialize",
          "line": 162,
          "signature": "void serialize(ISerializer& s) {}"
        },
        {
          "name": "serialize",
          "line": 170,
          "signature": "void serialize(ISerializer& s) {"
        },
        {
          "name": "serialize",
          "line": 188,
          "signature": "void serialize(ISerializer& s) {"
        },
        {
          "name": "serialize",
          "line": 210,
          "signature": "void serialize(ISerializer& s) {"
        },
        {
          "name": "serialize",
          "line": 223,
          "signature": "void serialize(ISerializer& s) {"
        },
        {
          "name": "serialize",
          "line": 245,
          "signature": "void serialize(ISerializer& s) {"
        },
        {
          "name": "serialize",
          "line": 258,
          "signature": "void serialize(ISerializer& s) {"
        },
        {
          "name": "serialize",
          "line": 277,
          "signature": "void serialize(ISerializer& s) {}"
        },
        {
          "name": "serialize",
          "line": 284,
          "signature": "void serialize(ISerializer& s) {"
        }
      ],
      "constants": [
        {
          "name": "P2P_COMMANDS_POOL_BASE",
          "line": 77,
          "value": "1000"
        },
        {
          "name": "PING_OK_RESPONSE_STATUS_TEXT",
          "line": 157,
          "value": "\"OK\""
        }
      ]
    },
    "src/P2p/P2pProtocolTypes.h": {
      "path": "src/P2p/P2pProtocolTypes.h",
      "size": 2177,
      "lines": 83,
      "hash": "71ff4e6d00dd3cc7",
      "functions": [
        {
          "name": "hostToNetwork",
          "line": 74,
          "signature": "inline uint32_t hostToNetwork(uint32_t n) {"
        },
        {
          "name": "networkToHost",
          "line": 78,
          "signature": "inline uint32_t networkToHost(uint32_t n) {"
        },
        {
          "name": "hostToNetwork",
          "line": 79,
          "signature": "return hostToNetwork(n); // the same"
        }
      ],
      "constants": []
    },
    "src/P2p/PeerListManager.cpp": {
      "path": "src/P2p/PeerListManager.cpp",
      "size": 9966,
      "lines": 348,
      "hash": "48faa6a0757e76b5",
      "functions": [
        {
          "name": "serialize",
          "line": 30,
          "signature": "bool serialize(boost::multi_index_container<T, Indexes>& value, Common::StringView name, ISerializer& s) {"
        },
        {
          "name": "serialize",
          "line": 40,
          "signature": "void serialize(NetworkAddress& na, ISerializer& s) {"
        },
        {
          "name": "serialize",
          "line": 45,
          "signature": "void serialize(PeerlistEntry& pe, ISerializer& s) {"
        },
        {
          "name": "set_peer_just_seen",
          "line": 198,
          "signature": "return set_peer_just_seen(peer, addr);"
        },
        {
          "name": "append_with_peer_white",
          "line": 211,
          "signature": "return append_with_peer_white(ple);"
        }
      ],
      "constants": [
        {
          "name": "currentVersion",
          "line": 64,
          "value": "2"
        }
      ]
    },
    "src/P2p/PeerListManager.h": {
      "path": "src/P2p/PeerListManager.h",
      "size": 4379,
      "lines": 113,
      "hash": "06c3267c161d6cac",
      "functions": [
        {
          "name": "trim",
          "line": 67,
          "signature": "void trim();"
        },
        {
          "name": "init",
          "line": 76,
          "signature": "bool init(bool allow_local_ip);"
        },
        {
          "name": "merge_peerlist",
          "line": 79,
          "signature": "bool merge_peerlist(const std::list<PeerlistEntry>& outer_bs);"
        },
        {
          "name": "append_with_peer_anchor",
          "line": 84,
          "signature": "bool append_with_peer_anchor(const AnchorPeerlistEntry &pr);"
        },
        {
          "name": "append_with_peer_white",
          "line": 86,
          "signature": "bool append_with_peer_white(const PeerlistEntry& pr);"
        },
        {
          "name": "append_with_peer_gray",
          "line": 87,
          "signature": "bool append_with_peer_gray(const PeerlistEntry& pr);"
        },
        {
          "name": "set_peer_just_seen",
          "line": 88,
          "signature": "bool set_peer_just_seen(PeerIdType peer, uint32_t ip, uint32_t port);"
        },
        {
          "name": "set_peer_just_seen",
          "line": 89,
          "signature": "bool set_peer_just_seen(PeerIdType peer, const NetworkAddress& addr);"
        },
        {
          "name": "set_peer_unreachable",
          "line": 90,
          "signature": "bool set_peer_unreachable(const PeerlistEntry& pr);"
        },
        {
          "name": "trim_white_peerlist",
          "line": 92,
          "signature": "void trim_white_peerlist();"
        },
        {
          "name": "trim_gray_peerlist",
          "line": 93,
          "signature": "void trim_gray_peerlist();"
        },
        {
          "name": "serialize",
          "line": 95,
          "signature": "void serialize(ISerializer& s);"
        },
        {
          "name": "get_and_empty_anchor_peerlist",
          "line": 99,
          "signature": "bool get_and_empty_anchor_peerlist(std::vector<AnchorPeerlistEntry> &apl);"
        },
        {
          "name": "remove_from_peer_anchor",
          "line": 100,
          "signature": "bool remove_from_peer_anchor(const NetworkAddress &addr);"
        }
      ],
      "constants": []
    },
    "src/P2p/PendingLiteBlock.h": {
      "path": "src/P2p/PendingLiteBlock.h",
      "size": 421,
      "lines": 19,
      "hash": "ea575db1aefe24e3",
      "functions": [],
      "constants": []
    },
    "src/PaymentGate/NodeFactory.cpp": {
      "path": "src/PaymentGate/NodeFactory.cpp",
      "size": 5752,
      "lines": 135,
      "hash": "77f25ce9bc842615",
      "functions": [
        {
          "name": "initCompleted",
          "line": 97,
          "signature": "void initCompleted(std::error_code result) {"
        },
        {
          "name": "waitForInitEnd",
          "line": 101,
          "signature": "void waitForInitEnd() {"
        },
        {
          "name": "NodeRpcStub",
          "line": 131,
          "signature": "return new NodeRpcStub();"
        }
      ],
      "constants": []
    },
    "src/PaymentGate/NodeFactory.h": {
      "path": "src/PaymentGate/NodeFactory.h",
      "size": 1284,
      "lines": 40,
      "hash": "82b85c6a4184263a",
      "functions": [],
      "constants": []
    },
    "src/PaymentGate/PaymentServiceJsonRpcMessages.cpp": {
      "path": "src/PaymentGate/PaymentServiceJsonRpcMessages.cpp",
      "size": 13848,
      "lines": 539,
      "hash": "a374369ac0c92f2e",
      "functions": [
        {
          "name": "RequestSerializationError",
          "line": 153,
          "signature": "throw RequestSerializationError();"
        },
        {
          "name": "RequestSerializationError",
          "line": 166,
          "signature": "throw RequestSerializationError();"
        },
        {
          "name": "RequestSerializationError",
          "line": 179,
          "signature": "throw RequestSerializationError();"
        },
        {
          "name": "RequestSerializationError",
          "line": 191,
          "signature": "throw RequestSerializationError();"
        },
        {
          "name": "RequestSerializationError",
          "line": 221,
          "signature": "throw RequestSerializationError();"
        },
        {
          "name": "RequestSerializationError",
          "line": 242,
          "signature": "throw RequestSerializationError();"
        },
        {
          "name": "RequestSerializationError",
          "line": 247,
          "signature": "throw RequestSerializationError();"
        },
        {
          "name": "RequestSerializationError",
          "line": 310,
          "signature": "throw RequestSerializationError();"
        },
        {
          "name": "RequestSerializationError",
          "line": 331,
          "signature": "throw RequestSerializationError();"
        },
        {
          "name": "RequestSerializationError",
          "line": 336,
          "signature": "throw RequestSerializationError();"
        },
        {
          "name": "RequestSerializationError",
          "line": 365,
          "signature": "throw RequestSerializationError();"
        },
        {
          "name": "RequestSerializationError",
          "line": 376,
          "signature": "throw RequestSerializationError();"
        },
        {
          "name": "RequestSerializationError",
          "line": 386,
          "signature": "throw RequestSerializationError();"
        },
        {
          "name": "RequestSerializationError",
          "line": 393,
          "signature": "throw RequestSerializationError();"
        },
        {
          "name": "RequestSerializationError",
          "line": 398,
          "signature": "throw RequestSerializationError();"
        },
        {
          "name": "RequestSerializationError",
          "line": 406,
          "signature": "throw RequestSerializationError();"
        },
        {
          "name": "RequestSerializationError",
          "line": 424,
          "signature": "throw RequestSerializationError();"
        },
        {
          "name": "RequestSerializationError",
          "line": 431,
          "signature": "throw RequestSerializationError();"
        },
        {
          "name": "RequestSerializationError",
          "line": 436,
          "signature": "throw RequestSerializationError();"
        },
        {
          "name": "RequestSerializationError",
          "line": 444,
          "signature": "throw RequestSerializationError();"
        },
        {
          "name": "RequestSerializationError",
          "line": 468,
          "signature": "throw RequestSerializationError();"
        },
        {
          "name": "RequestSerializationError",
          "line": 480,
          "signature": "throw RequestSerializationError();"
        },
        {
          "name": "RequestSerializationError",
          "line": 492,
          "signature": "throw RequestSerializationError();"
        },
        {
          "name": "RequestSerializationError",
          "line": 505,
          "signature": "throw RequestSerializationError();"
        },
        {
          "name": "RequestSerializationError",
          "line": 521,
          "signature": "throw RequestSerializationError();"
        },
        {
          "name": "RequestSerializationError",
          "line": 526,
          "signature": "throw RequestSerializationError();"
        }
      ],
      "constants": []
    },
    "src/PaymentGate/PaymentServiceJsonRpcMessages.h": {
      "path": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
      "size": 12165,
      "lines": 658,
      "hash": "53977fee3d74da50",
      "functions": [
        {
          "name": "serialize",
          "line": 41,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 46,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 55,
          "signature": "void serialize(CryptoNote::ISerializer& serializer);"
        },
        {
          "name": "serialize",
          "line": 59,
          "signature": "void serialize(CryptoNote::ISerializer& serializer);"
        },
        {
          "name": "serialize",
          "line": 69,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 74,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 84,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 89,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 97,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 104,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 112,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 125,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 138,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 145,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 156,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 163,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 177,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 184,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 194,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 209,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 217,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 224,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 235,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 242,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 252,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 258,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 268,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 273,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 283,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 291,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 301,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 311,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 322,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 329,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 338,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 351,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 358,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 369,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 375,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 385,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 393,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 404,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 424,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 433,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 440,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 449,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 462,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 469,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 479,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 486,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 496,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 504,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 520,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 528,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 545,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 552,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 560,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 567,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 577,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 582,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 592,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 597,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 607,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 614,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 625,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 633,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 646,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        },
        {
          "name": "serialize",
          "line": 653,
          "signature": "void serialize(CryptoNote::ISerializer &serializer);"
        }
      ],
      "constants": [
        {
          "name": "DEFAULT_ANONYMITY_LEVEL",
          "line": 29,
          "value": "4"
        }
      ]
    },
    "src/PaymentGate/PaymentServiceJsonRpcServer.cpp": {
      "path": "src/PaymentGate/PaymentServiceJsonRpcServer.cpp",
      "size": 19092,
      "lines": 285,
      "hash": "b9e0cb2e8a752365",
      "functions": [],
      "constants": []
    },
    "src/PaymentGate/PaymentServiceJsonRpcServer.h": {
      "path": "src/PaymentGate/PaymentServiceJsonRpcServer.h",
      "size": 6482,
      "lines": 108,
      "hash": "2d735e4e356b8831",
      "functions": [
        {
          "name": "jsonHandler",
          "line": 47,
          "signature": "HandlerFunction jsonHandler(RequestHandler handler) {"
        }
      ],
      "constants": []
    },
    "src/PaymentGate/WalletService.cpp": {
      "path": "src/PaymentGate/WalletService.cpp",
      "size": 72407,
      "lines": 2108,
      "hash": "2330e849b3d07c8f",
      "functions": [
        {
          "name": "make_error_code",
          "line": 652,
          "signature": "return make_error_code(CryptoNote::error::NOT_INITIALIZED);"
        },
        {
          "name": "make_error_code",
          "line": 665,
          "signature": "return make_error_code(CryptoNote::error::INTERNAL_WALLET_ERROR);"
        },
        {
          "name": "make_error_code",
          "line": 699,
          "signature": "return make_error_code(CryptoNote::error::NOT_INITIALIZED);"
        },
        {
          "name": "make_error_code",
          "line": 713,
          "signature": "return make_error_code(CryptoNote::error::INTERNAL_WALLET_ERROR);"
        },
        {
          "name": "make_error_code",
          "line": 730,
          "signature": "return make_error_code(CryptoNote::error::NOT_INITIALIZED);"
        },
        {
          "name": "make_error_code",
          "line": 749,
          "signature": "return make_error_code(CryptoNote::error::INTERNAL_WALLET_ERROR);"
        },
        {
          "name": "make_error_code",
          "line": 767,
          "signature": "return make_error_code(CryptoNote::error::NOT_INITIALIZED);"
        },
        {
          "name": "make_error_code",
          "line": 786,
          "signature": "return make_error_code(CryptoNote::error::INTERNAL_WALLET_ERROR);"
        },
        {
          "name": "make_error_code",
          "line": 803,
          "signature": "return make_error_code(CryptoNote::error::NOT_INITIALIZED);"
        },
        {
          "name": "make_error_code",
          "line": 817,
          "signature": "return make_error_code(CryptoNote::error::INTERNAL_WALLET_ERROR);"
        },
        {
          "name": "make_error_code",
          "line": 837,
          "signature": "return make_error_code(CryptoNote::error::WalletServiceErrorCode::WRONG_KEY_FORMAT);"
        },
        {
          "name": "make_error_code",
          "line": 890,
          "signature": "return make_error_code(CryptoNote::error::WalletServiceErrorCode::DUPLICATE_KEY);"
        },
        {
          "name": "make_error_code",
          "line": 897,
          "signature": "return make_error_code(CryptoNote::error::WalletServiceErrorCode::WRONG_KEY_FORMAT);"
        },
        {
          "name": "make_error_code",
          "line": 925,
          "signature": "return make_error_code(CryptoNote::error::WalletServiceErrorCode::WRONG_KEY_FORMAT);"
        },
        {
          "name": "transactionFilter",
          "line": 1078,
          "signature": "TransactionsInBlockInfoFilter transactionFilter(addresses, paymentId);"
        },
        {
          "name": "make_error_code",
          "line": 1091,
          "signature": "return make_error_code(CryptoNote::error::INTERNAL_WALLET_ERROR);"
        },
        {
          "name": "transactionFilter",
          "line": 1110,
          "signature": "TransactionsInBlockInfoFilter transactionFilter(addresses, paymentId);"
        },
        {
          "name": "make_error_code",
          "line": 1121,
          "signature": "return make_error_code(CryptoNote::error::INTERNAL_WALLET_ERROR);"
        },
        {
          "name": "make_error_code",
          "line": 1162,
          "signature": "return make_error_code(CryptoNote::error::INTERNAL_WALLET_ERROR);"
        },
        {
          "name": "transactionFilter",
          "line": 1185,
          "signature": "TransactionsInBlockInfoFilter transactionFilter(addresses, paymentId);"
        },
        {
          "name": "make_error_code",
          "line": 1199,
          "signature": "return make_error_code(CryptoNote::error::INTERNAL_WALLET_ERROR);"
        },
        {
          "name": "transactionFilter",
          "line": 1218,
          "signature": "TransactionsInBlockInfoFilter transactionFilter(addresses, paymentId);"
        },
        {
          "name": "make_error_code",
          "line": 1230,
          "signature": "return make_error_code(CryptoNote::error::INTERNAL_WALLET_ERROR);"
        },
        {
          "name": "make_error_code",
          "line": 1250,
          "signature": "return make_error_code(CryptoNote::error::OBJECT_NOT_FOUND);"
        },
        {
          "name": "make_error_code",
          "line": 1308,
          "signature": "return make_error_code(CryptoNote::error::INTERNAL_WALLET_ERROR);"
        },
        {
          "name": "make_error_code",
          "line": 1330,
          "signature": "return make_error_code(CryptoNote::error::INTERNAL_WALLET_ERROR);"
        },
        {
          "name": "make_error_code",
          "line": 1349,
          "signature": "return make_error_code(CryptoNote::error::DAEMON_NOT_SYNCED);"
        },
        {
          "name": "make_error_code",
          "line": 1392,
          "signature": "return make_error_code(CryptoNote::error::INTERNAL_WALLET_ERROR);"
        },
        {
          "name": "make_error_code",
          "line": 1443,
          "signature": "return make_error_code(CryptoNote::error::INTERNAL_WALLET_ERROR);"
        },
        {
          "name": "make_error_code",
          "line": 1483,
          "signature": "return make_error_code(CryptoNote::error::BAD_INTEGRATED_ADDRESS);"
        },
        {
          "name": "make_error_code",
          "line": 1497,
          "signature": "return make_error_code(CryptoNote::error::BAD_PREFIX);"
        },
        {
          "name": "make_error_code",
          "line": 1508,
          "signature": "return make_error_code(CryptoNote::error::BAD_ADDRESS);"
        },
        {
          "name": "make_error_code",
          "line": 1539,
          "signature": "return make_error_code(CryptoNote::error::INTERNAL_WALLET_ERROR);"
        },
        {
          "name": "make_error_code",
          "line": 1556,
          "signature": "return make_error_code(CryptoNote::error::WalletServiceErrorCode::OBJECT_NOT_FOUND);"
        },
        {
          "name": "make_error_code",
          "line": 1572,
          "signature": "return make_error_code(CryptoNote::error::INTERNAL_WALLET_ERROR);"
        },
        {
          "name": "make_error_code",
          "line": 1589,
          "signature": "return make_error_code(CryptoNote::error::WalletServiceErrorCode::OBJECT_NOT_FOUND);"
        },
        {
          "name": "make_error_code",
          "line": 1605,
          "signature": "return make_error_code(CryptoNote::error::INTERNAL_WALLET_ERROR);"
        },
        {
          "name": "transactionFilter",
          "line": 1621,
          "signature": "TransactionsInBlockInfoFilter transactionFilter(addresses, \"\");"
        },
        {
          "name": "make_error_code",
          "line": 1639,
          "signature": "return make_error_code(CryptoNote::error::INTERNAL_WALLET_ERROR);"
        },
        {
          "name": "make_error_code",
          "line": 1676,
          "signature": "return make_error_code(CryptoNote::error::INTERNAL_WALLET_ERROR);"
        },
        {
          "name": "make_error_code",
          "line": 1699,
          "signature": "return make_error_code(CryptoNote::error::DAEMON_NOT_SYNCED);"
        },
        {
          "name": "make_error_code",
          "line": 1715,
          "signature": "return make_error_code(CryptoNote::error::DEPOSIT_WRONG_TERM);"
        },
        {
          "name": "make_error_code",
          "line": 1721,
          "signature": "return make_error_code(CryptoNote::error::DEPOSIT_TERM_TOO_BIG);"
        },
        {
          "name": "make_error_code",
          "line": 1727,
          "signature": "return make_error_code(CryptoNote::error::DEPOSIT_TERM_TOO_BIG);"
        },
        {
          "name": "make_error_code",
          "line": 1733,
          "signature": "return make_error_code(CryptoNote::error::DEPOSIT_AMOUNT_TOO_SMALL);"
        },
        {
          "name": "make_error_code",
          "line": 1748,
          "signature": "return make_error_code(CryptoNote::error::INTERNAL_WALLET_ERROR);"
        },
        {
          "name": "make_error_code",
          "line": 1794,
          "signature": "return make_error_code(CryptoNote::error::DEPOSIT_TERM_TOO_SMALL);"
        },
        {
          "name": "make_error_code",
          "line": 1799,
          "signature": "return make_error_code(CryptoNote::error::DEPOSIT_TERM_TOO_BIG);"
        },
        {
          "name": "make_error_code",
          "line": 1804,
          "signature": "return make_error_code(CryptoNote::error::DEPOSIT_AMOUNT_TOO_SMALL);"
        },
        {
          "name": "make_error_code",
          "line": 1819,
          "signature": "return make_error_code(CryptoNote::error::INTERNAL_WALLET_ERROR);"
        },
        {
          "name": "make_error_code",
          "line": 1843,
          "signature": "return make_error_code(CryptoNote::error::INTERNAL_WALLET_ERROR);"
        },
        {
          "name": "make_error_code",
          "line": 1884,
          "signature": "return make_error_code(CryptoNote::error::DAEMON_NOT_SYNCED);"
        },
        {
          "name": "make_error_code",
          "line": 1905,
          "signature": "return make_error_code(CryptoNote::error::INTERNAL_WALLET_ERROR);"
        },
        {
          "name": "make_error_code",
          "line": 1924,
          "signature": "return make_error_code(CryptoNote::error::DAEMON_NOT_SYNCED);"
        },
        {
          "name": "make_error_code",
          "line": 1946,
          "signature": "return make_error_code(CryptoNote::error::INTERNAL_WALLET_ERROR);"
        },
        {
          "name": "make_error_code",
          "line": 2006,
          "signature": "return make_error_code(CryptoNote::error::WalletServiceErrorCode::WRONG_KEY_FORMAT);"
        },
        {
          "name": "make_error_code",
          "line": 2013,
          "signature": "return make_error_code(CryptoNote::error::WalletServiceErrorCode::WRONG_KEY_FORMAT);"
        },
        {
          "name": "make_error_code",
          "line": 2027,
          "signature": "return make_error_code(CryptoNote::error::INTERNAL_WALLET_ERROR);"
        },
        {
          "name": "convertTransactionsInBlockInfoToTransactionHashesInBlockRpcInfo",
          "line": 2081,
          "signature": "return convertTransactionsInBlockInfoToTransactionHashesInBlockRpcInfo(filteredTransactions);"
        },
        {
          "name": "convertTransactionsInBlockInfoToTransactionHashesInBlockRpcInfo",
          "line": 2088,
          "signature": "return convertTransactionsInBlockInfoToTransactionHashesInBlockRpcInfo(filteredTransactions);"
        },
        {
          "name": "convertTransactionsInBlockInfoToTransactionsInBlockRpcInfo",
          "line": 2096,
          "signature": "return convertTransactionsInBlockInfoToTransactionsInBlockRpcInfo(filteredTransactions, knownBlockCount);"
        },
        {
          "name": "convertTransactionsInBlockInfoToTransactionsInBlockRpcInfo",
          "line": 2104,
          "signature": "return convertTransactionsInBlockInfoToTransactionsInBlockRpcInfo(filteredTransactions, knownBlockCount);"
        }
      ],
      "constants": []
    },
    "src/PaymentGate/WalletService.h": {
      "path": "src/PaymentGate/WalletService.h",
      "size": 8610,
      "lines": 146,
      "hash": "fd61da37b067dd59",
      "functions": [
        {
          "name": "generateNewWallet",
          "line": 52,
          "signature": "void generateNewWallet(const CryptoNote::Currency &currency, const WalletConfiguration &conf, Logging::ILogger &logger, System::Dispatcher &dispatcher);"
        },
        {
          "name": "init",
          "line": 62,
          "signature": "void init();"
        },
        {
          "name": "saveWallet",
          "line": 63,
          "signature": "void saveWallet();"
        },
        {
          "name": "refresh",
          "line": 111,
          "signature": "void refresh();"
        },
        {
          "name": "reset",
          "line": 112,
          "signature": "void reset();"
        },
        {
          "name": "loadWallet",
          "line": 114,
          "signature": "void loadWallet();"
        },
        {
          "name": "loadTransactionIdIndex",
          "line": 115,
          "signature": "void loadTransactionIdIndex();"
        },
        {
          "name": "replaceWithNewWallet",
          "line": 117,
          "signature": "void replaceWithNewWallet(const Crypto::SecretKey &viewSecretKey);"
        }
      ],
      "constants": []
    },
    "src/PaymentGate/WalletServiceErrorCategory.cpp": {
      "path": "src/PaymentGate/WalletServiceErrorCategory.cpp",
      "size": 993,
      "lines": 27,
      "hash": "b28fa74aa7f3301b",
      "functions": [],
      "constants": []
    },
    "src/PaymentGate/WalletServiceErrorCategory.h": {
      "path": "src/PaymentGate/WalletServiceErrorCategory.h",
      "size": 2622,
      "lines": 80,
      "hash": "0b466a8abd8ce87c",
      "functions": [],
      "constants": []
    },
    "src/PaymentGateService/ConfigurationManager.cpp": {
      "path": "src/PaymentGateService/ConfigurationManager.cpp",
      "size": 3935,
      "lines": 115,
      "hash": "f97802de78c237c3",
      "functions": [
        {
          "name": "ConfigurationError",
          "line": 81,
          "signature": "throw ConfigurationError(\"Cannot open configuration file\");"
        }
      ],
      "constants": []
    },
    "src/PaymentGateService/ConfigurationManager.h": {
      "path": "src/PaymentGateService/ConfigurationManager.h",
      "size": 1340,
      "lines": 40,
      "hash": "480012f608ef719a",
      "functions": [
        {
          "name": "init",
          "line": 30,
          "signature": "bool init(int argc, char** argv);"
        }
      ],
      "constants": []
    },
    "src/PaymentGateService/PaymentGateService.cpp": {
      "path": "src/PaymentGateService/PaymentGateService.cpp",
      "size": 8189,
      "lines": 265,
      "hash": "672863754e0b1549",
      "functions": [
        {
          "name": "changeDirectory",
          "line": 47,
          "signature": "void changeDirectory(const std::string& path) {"
        },
        {
          "name": "stopSignalHandler",
          "line": 53,
          "signature": "void stopSignalHandler(PaymentGateService* pg) {"
        }
      ],
      "constants": []
    },
    "src/PaymentGateService/PaymentGateService.h": {
      "path": "src/PaymentGateService/PaymentGateService.h",
      "size": 2123,
      "lines": 65,
      "hash": "e3d9b8116634fbdc",
      "functions": [
        {
          "name": "init",
          "line": 36,
          "signature": "bool init(int argc, char** argv);"
        },
        {
          "name": "run",
          "line": 42,
          "signature": "void run();"
        },
        {
          "name": "stop",
          "line": 43,
          "signature": "void stop();"
        },
        {
          "name": "runInProcess",
          "line": 49,
          "signature": "void runInProcess(Logging::LoggerRef& log);"
        },
        {
          "name": "runRpcProxy",
          "line": 50,
          "signature": "void runRpcProxy(Logging::LoggerRef& log);"
        },
        {
          "name": "runWalletService",
          "line": 52,
          "signature": "void runWalletService(const CryptoNote::Currency& currency, CryptoNote::INode& node);"
        }
      ],
      "constants": []
    },
    "src/PaymentGateService/PaymentServiceConfiguration.cpp": {
      "path": "src/PaymentGateService/PaymentServiceConfiguration.cpp",
      "size": 5411,
      "lines": 148,
      "hash": "4885eb0a16f506fa",
      "functions": [
        {
          "name": "ConfigurationError",
          "line": 77,
          "signature": "throw ConfigurationError(\"It's impossible to use both \\\"register-service\\\" and \\\"unregister-service\\\" at the same time\");"
        },
        {
          "name": "ConfigurationError",
          "line": 142,
          "signature": "throw ConfigurationError(\"Both container-file and container-password parameters are required\");"
        }
      ],
      "constants": []
    },
    "src/PaymentGateService/PaymentServiceConfiguration.h": {
      "path": "src/PaymentGateService/PaymentServiceConfiguration.h",
      "size": 1765,
      "lines": 62,
      "hash": "b01db6f59a393abb",
      "functions": [
        {
          "name": "init",
          "line": 36,
          "signature": "void init(const boost::program_options::variables_map& options);"
        },
        {
          "name": "initOptions",
          "line": 37,
          "signature": "static void initOptions(boost::program_options::options_description& desc);"
        }
      ],
      "constants": []
    },
    "src/PaymentGateService/RpcNodeConfiguration.cpp": {
      "path": "src/PaymentGateService/RpcNodeConfiguration.cpp",
      "size": 1837,
      "lines": 47,
      "hash": "974393016f3df9b3",
      "functions": [],
      "constants": []
    },
    "src/PaymentGateService/RpcNodeConfiguration.h": {
      "path": "src/PaymentGateService/RpcNodeConfiguration.h",
      "size": 1231,
      "lines": 37,
      "hash": "a8dd95149227ff06",
      "functions": [
        {
          "name": "initOptions",
          "line": 29,
          "signature": "static void initOptions(boost::program_options::options_description& desc);"
        },
        {
          "name": "init",
          "line": 30,
          "signature": "void init(const boost::program_options::variables_map& options);"
        }
      ],
      "constants": []
    },
    "src/PaymentGateService/main.cpp": {
      "path": "src/PaymentGateService/main.cpp",
      "size": 9207,
      "lines": 340,
      "hash": "f546cf8d8e62766a",
      "functions": [
        {
          "name": "serviceHandler",
          "line": 59,
          "signature": "void __stdcall serviceHandler(DWORD fdwControl) {"
        },
        {
          "name": "serviceMain",
          "line": 71,
          "signature": "void __stdcall serviceMain(DWORD dwArgc, char **lpszArgv) {"
        },
        {
          "name": "daemonize",
          "line": 102,
          "signature": "int daemonize() {"
        },
        {
          "name": "runDaemon",
          "line": 133,
          "signature": "int runDaemon() {"
        },
        {
          "name": "registerService",
          "line": 169,
          "signature": "int registerService() {"
        },
        {
          "name": "unregisterService",
          "line": 226,
          "signature": "int unregisterService() {"
        },
        {
          "name": "main",
          "line": 295,
          "signature": "int main(int argc, char** argv) {"
        },
        {
          "name": "registerService",
          "line": 315,
          "signature": "return registerService();"
        },
        {
          "name": "unregisterService",
          "line": 319,
          "signature": "return unregisterService();"
        }
      ],
      "constants": [
        {
          "name": "SERVICE_NAME",
          "line": 39,
          "value": "\"Payment Gate\""
        }
      ]
    },
    "src/Platform/Linux/System/Dispatcher.cpp": {
      "path": "src/Platform/Linux/System/Dispatcher.cpp",
      "size": 15543,
      "lines": 489,
      "hash": "f3d1145e03074512",
      "functions": [],
      "constants": [
        {
          "name": "STACK_SIZE",
          "line": 61,
          "value": "512 * 1024"
        }
      ]
    },
    "src/Platform/Linux/System/Dispatcher.h": {
      "path": "src/Platform/Linux/System/Dispatcher.h",
      "size": 3143,
      "lines": 123,
      "hash": "e546ea29194ed2c7",
      "functions": [
        {
          "name": "clear",
          "line": 70,
          "signature": "void clear();"
        },
        {
          "name": "dispatch",
          "line": 71,
          "signature": "void dispatch();"
        },
        {
          "name": "interrupt",
          "line": 73,
          "signature": "void interrupt();"
        },
        {
          "name": "interrupt",
          "line": 74,
          "signature": "void interrupt(NativeContext* context);"
        },
        {
          "name": "interrupted",
          "line": 75,
          "signature": "bool interrupted();"
        },
        {
          "name": "pushContext",
          "line": 76,
          "signature": "void pushContext(NativeContext* context);"
        },
        {
          "name": "yield",
          "line": 78,
          "signature": "void yield();"
        },
        {
          "name": "pushReusableContext",
          "line": 83,
          "signature": "void pushReusableContext(NativeContext&);"
        },
        {
          "name": "getTimer",
          "line": 84,
          "signature": "int getTimer();"
        },
        {
          "name": "pushTimer",
          "line": 85,
          "signature": "void pushTimer(int timer);"
        },
        {
          "name": "contextProcedure",
          "line": 118,
          "signature": "void contextProcedure(void* ucontext);"
        },
        {
          "name": "contextProcedureStatic",
          "line": 119,
          "signature": "static void contextProcedureStatic(void* context);"
        }
      ],
      "constants": [
        {
          "name": "SIZEOF_PTHREAD_MUTEX_T",
          "line": 89,
          "value": "40"
        },
        {
          "name": "SIZEOF_PTHREAD_MUTEX_T",
          "line": 91,
          "value": "32"
        },
        {
          "name": "SIZEOF_PTHREAD_MUTEX_T",
          "line": 95,
          "value": "48"
        },
        {
          "name": "SIZEOF_PTHREAD_MUTEX_T",
          "line": 97,
          "value": "24"
        }
      ]
    },
    "src/Platform/Linux/System/ErrorMessage.cpp": {
      "path": "src/Platform/Linux/System/ErrorMessage.cpp",
      "size": 580,
      "lines": 22,
      "hash": "00281279aa584adb",
      "functions": [
        {
          "name": "errorMessage",
          "line": 14,
          "signature": "return errorMessage(errno);"
        }
      ],
      "constants": []
    },
    "src/Platform/Linux/System/ErrorMessage.h": {
      "path": "src/Platform/Linux/System/ErrorMessage.h",
      "size": 436,
      "lines": 15,
      "hash": "ab1ec95c364222c3",
      "functions": [],
      "constants": []
    },
    "src/Platform/Linux/System/Future.h": {
      "path": "src/Platform/Linux/System/Future.h",
      "size": 1102,
      "lines": 35,
      "hash": "c4a48305cc9d633f",
      "functions": [],
      "constants": []
    },
    "src/Platform/Linux/System/Ipv4Resolver.cpp": {
      "path": "src/Platform/Linux/System/Ipv4Resolver.cpp",
      "size": 2139,
      "lines": 76,
      "hash": "785be1f4dc564520",
      "functions": [
        {
          "name": "InterruptedException",
          "line": 48,
          "signature": "throw InterruptedException();"
        }
      ],
      "constants": []
    },
    "src/Platform/Linux/System/Ipv4Resolver.h": {
      "path": "src/Platform/Linux/System/Ipv4Resolver.h",
      "size": 805,
      "lines": 32,
      "hash": "118430b6afc94115",
      "functions": [
        {
          "name": "Ipv4Resolver",
          "line": 19,
          "signature": "explicit Ipv4Resolver(Dispatcher& dispatcher);"
        },
        {
          "name": "resolve",
          "line": 25,
          "signature": "Ipv4Address resolve(const std::string& host);"
        }
      ],
      "constants": []
    },
    "src/Platform/Linux/System/MemoryMappedFile.cpp": {
      "path": "src/Platform/Linux/System/MemoryMappedFile.cpp",
      "size": 5951,
      "lines": 260,
      "hash": "32143d64cb6cf38e",
      "functions": [],
      "constants": []
    },
    "src/Platform/Linux/System/MemoryMappedFile.h": {
      "path": "src/Platform/Linux/System/MemoryMappedFile.h",
      "size": 1732,
      "lines": 60,
      "hash": "b85315be1fca6fc9",
      "functions": [
        {
          "name": "create",
          "line": 31,
          "signature": "void create(const std::string& path, uint64_t size, bool overwrite, std::error_code& ec);"
        },
        {
          "name": "create",
          "line": 32,
          "signature": "void create(const std::string& path, uint64_t size, bool overwrite);"
        },
        {
          "name": "open",
          "line": 33,
          "signature": "void open(const std::string& path, std::error_code& ec);"
        },
        {
          "name": "open",
          "line": 34,
          "signature": "void open(const std::string& path);"
        },
        {
          "name": "close",
          "line": 35,
          "signature": "void close(std::error_code& ec);"
        },
        {
          "name": "close",
          "line": 36,
          "signature": "void close();"
        },
        {
          "name": "rename",
          "line": 44,
          "signature": "void rename(const std::string& newPath, std::error_code& ec);"
        },
        {
          "name": "rename",
          "line": 45,
          "signature": "void rename(const std::string& newPath);"
        },
        {
          "name": "flush",
          "line": 47,
          "signature": "void flush(uint8_t* data, uint64_t size, std::error_code& ec);"
        },
        {
          "name": "flush",
          "line": 48,
          "signature": "void flush(uint8_t* data, uint64_t size);"
        },
        {
          "name": "swap",
          "line": 50,
          "signature": "void swap(MemoryMappedFile& other);"
        }
      ],
      "constants": []
    },
    "src/Platform/Linux/System/TcpConnection.cpp": {
      "path": "src/Platform/Linux/System/TcpConnection.cpp",
      "size": 10068,
      "lines": 282,
      "hash": "36193e89fee742f9",
      "functions": [
        {
          "name": "InterruptedException",
          "line": 78,
          "signature": "throw InterruptedException();"
        },
        {
          "name": "InterruptedException",
          "line": 126,
          "signature": "throw InterruptedException();"
        },
        {
          "name": "InterruptedException",
          "line": 166,
          "signature": "throw InterruptedException();"
        },
        {
          "name": "InterruptedException",
          "line": 222,
          "signature": "throw InterruptedException();"
        }
      ],
      "constants": []
    },
    "src/Platform/Linux/System/TcpConnection.h": {
      "path": "src/Platform/Linux/System/TcpConnection.h",
      "size": 1101,
      "lines": 42,
      "hash": "66d596fa03d025be",
      "functions": [],
      "constants": []
    },
    "src/Platform/Linux/System/TcpConnector.cpp": {
      "path": "src/Platform/Linux/System/TcpConnector.cpp",
      "size": 5863,
      "lines": 171,
      "hash": "562434916a6bc0b2",
      "functions": [
        {
          "name": "InterruptedException",
          "line": 64,
          "signature": "throw InterruptedException();"
        },
        {
          "name": "InterruptedException",
          "line": 128,
          "signature": "throw InterruptedException();"
        },
        {
          "name": "TcpConnection",
          "line": 150,
          "signature": "return TcpConnection(*dispatcher, connection);"
        },
        {
          "name": "TcpConnection",
          "line": 157,
          "signature": "return TcpConnection(*dispatcher, connection);"
        }
      ],
      "constants": []
    },
    "src/Platform/Linux/System/TcpConnector.h": {
      "path": "src/Platform/Linux/System/TcpConnector.h",
      "size": 873,
      "lines": 35,
      "hash": "be59cb419424ac2a",
      "functions": [
        {
          "name": "connect",
          "line": 27,
          "signature": "TcpConnection connect(const Ipv4Address& address, uint16_t port);"
        }
      ],
      "constants": []
    },
    "src/Platform/Linux/System/TcpListener.cpp": {
      "path": "src/Platform/Linux/System/TcpListener.cpp",
      "size": 5891,
      "lines": 187,
      "hash": "75354b6abb45960a",
      "functions": [
        {
          "name": "InterruptedException",
          "line": 112,
          "signature": "throw InterruptedException();"
        },
        {
          "name": "InterruptedException",
          "line": 158,
          "signature": "throw InterruptedException();"
        },
        {
          "name": "TcpConnection",
          "line": 175,
          "signature": "return TcpConnection(*dispatcher, connection);"
        }
      ],
      "constants": []
    },
    "src/Platform/Linux/System/TcpListener.h": {
      "path": "src/Platform/Linux/System/TcpListener.h",
      "size": 878,
      "lines": 36,
      "hash": "560fd9510499ac5b",
      "functions": [
        {
          "name": "accept",
          "line": 27,
          "signature": "TcpConnection accept();"
        }
      ],
      "constants": []
    },
    "src/Platform/Linux/System/Timer.cpp": {
      "path": "src/Platform/Linux/System/Timer.cpp",
      "size": 4585,
      "lines": 143,
      "hash": "a08983a70a80c0d4",
      "functions": [
        {
          "name": "InterruptedException",
          "line": 69,
          "signature": "throw InterruptedException();"
        },
        {
          "name": "InterruptedException",
          "line": 137,
          "signature": "throw InterruptedException();"
        }
      ],
      "constants": []
    },
    "src/Platform/Linux/System/Timer.h": {
      "path": "src/Platform/Linux/System/Timer.h",
      "size": 733,
      "lines": 33,
      "hash": "49397bcd1c2b275e",
      "functions": [
        {
          "name": "Timer",
          "line": 18,
          "signature": "explicit Timer(Dispatcher& dispatcher);"
        },
        {
          "name": "sleep",
          "line": 24,
          "signature": "void sleep(std::chrono::nanoseconds duration);"
        }
      ],
      "constants": []
    },
    "src/Platform/OSX/System/Context.c": {
      "path": "src/Platform/OSX/System/Context.c",
      "size": 838,
      "lines": 31,
      "hash": "47888b6fe1d85879",
      "functions": [],
      "constants": []
    },
    "src/Platform/OSX/System/Context.h": {
      "path": "src/Platform/OSX/System/Context.h",
      "size": 2775,
      "lines": 103,
      "hash": "ea510316c795ae8a",
      "functions": [
        {
          "name": "swapcontext",
          "line": 31,
          "signature": "extern\tint\t\tswapcontext(uctx*, const uctx*);"
        },
        {
          "name": "getmcontext",
          "line": 33,
          "signature": "extern\tint\t\tgetmcontext(mctx*);"
        },
        {
          "name": "setmcontext",
          "line": 34,
          "signature": "extern\tvoid\t\tsetmcontext(const mctx*);"
        }
      ],
      "constants": [
        {
          "name": "_MC_FPFMT_NODEV",
          "line": 69,
          "value": "0x10000\t/* device not present or configured */"
        },
        {
          "name": "_MC_FPFMT_XMM",
          "line": 70,
          "value": "0x10002"
        },
        {
          "name": "_MC_FPOWNED_NONE",
          "line": 72,
          "value": "0x20000\t/* FP state not used */"
        },
        {
          "name": "_MC_FPOWNED_FPU",
          "line": 73,
          "value": "0x20001\t/* FP state came from FPU */"
        },
        {
          "name": "_MC_FPOWNED_PCB",
          "line": 74,
          "value": "0x20002\t/* FP state came from PCB */"
        }
      ]
    },
    "src/Platform/OSX/System/Dispatcher.cpp": {
      "path": "src/Platform/OSX/System/Dispatcher.cpp",
      "size": 14016,
      "lines": 456,
      "hash": "d6ae040f127191e5",
      "functions": [],
      "constants": [
        {
          "name": "STACK_SIZE",
          "line": 59,
          "value": "512 * 1024"
        }
      ]
    },
    "src/Platform/OSX/System/Dispatcher.h": {
      "path": "src/Platform/OSX/System/Dispatcher.h",
      "size": 2827,
      "lines": 106,
      "hash": "fd0a53fe18e8910a",
      "functions": [
        {
          "name": "clear",
          "line": 61,
          "signature": "void clear();"
        },
        {
          "name": "dispatch",
          "line": 62,
          "signature": "void dispatch();"
        },
        {
          "name": "interrupt",
          "line": 64,
          "signature": "void interrupt();"
        },
        {
          "name": "interrupt",
          "line": 65,
          "signature": "void interrupt(NativeContext* context);"
        },
        {
          "name": "interrupted",
          "line": 66,
          "signature": "bool interrupted();"
        },
        {
          "name": "pushContext",
          "line": 67,
          "signature": "void pushContext(NativeContext* context);"
        },
        {
          "name": "yield",
          "line": 69,
          "signature": "void yield();"
        },
        {
          "name": "pushReusableContext",
          "line": 73,
          "signature": "void pushReusableContext(NativeContext&);"
        },
        {
          "name": "getTimer",
          "line": 74,
          "signature": "int getTimer();"
        },
        {
          "name": "pushTimer",
          "line": 75,
          "signature": "void pushTimer(int timer);"
        },
        {
          "name": "contextProcedure",
          "line": 101,
          "signature": "void contextProcedure(void* uctx);"
        },
        {
          "name": "contextProcedureStatic",
          "line": 102,
          "signature": "static void contextProcedureStatic(intptr_t context);"
        }
      ],
      "constants": [
        {
          "name": "SIZEOF_PTHREAD_MUTEX_T",
          "line": 78,
          "value": "56 + sizeof(long)"
        },
        {
          "name": "SIZEOF_PTHREAD_MUTEX_T",
          "line": 80,
          "value": "40 + sizeof(long)"
        }
      ]
    },
    "src/Platform/OSX/System/ErrorMessage.cpp": {
      "path": "src/Platform/OSX/System/ErrorMessage.cpp",
      "size": 580,
      "lines": 22,
      "hash": "00281279aa584adb",
      "functions": [
        {
          "name": "errorMessage",
          "line": 14,
          "signature": "return errorMessage(errno);"
        }
      ],
      "constants": []
    },
    "src/Platform/OSX/System/ErrorMessage.h": {
      "path": "src/Platform/OSX/System/ErrorMessage.h",
      "size": 436,
      "lines": 15,
      "hash": "ab1ec95c364222c3",
      "functions": [],
      "constants": []
    },
    "src/Platform/OSX/System/Future.h": {
      "path": "src/Platform/OSX/System/Future.h",
      "size": 4201,
      "lines": 160,
      "hash": "cab8085055e212ac",
      "functions": [
        {
          "name": "asyncOp",
          "line": 71,
          "signature": "void asyncOp() {"
        },
        {
          "name": "asyncOp",
          "line": 132,
          "signature": "void asyncOp() {"
        }
      ],
      "constants": []
    },
    "src/Platform/OSX/System/Ipv4Resolver.cpp": {
      "path": "src/Platform/OSX/System/Ipv4Resolver.cpp",
      "size": 2139,
      "lines": 76,
      "hash": "785be1f4dc564520",
      "functions": [
        {
          "name": "InterruptedException",
          "line": 48,
          "signature": "throw InterruptedException();"
        }
      ],
      "constants": []
    },
    "src/Platform/OSX/System/Ipv4Resolver.h": {
      "path": "src/Platform/OSX/System/Ipv4Resolver.h",
      "size": 805,
      "lines": 32,
      "hash": "118430b6afc94115",
      "functions": [
        {
          "name": "Ipv4Resolver",
          "line": 19,
          "signature": "explicit Ipv4Resolver(Dispatcher& dispatcher);"
        },
        {
          "name": "resolve",
          "line": 25,
          "signature": "Ipv4Address resolve(const std::string& host);"
        }
      ],
      "constants": []
    },
    "src/Platform/OSX/System/MemoryMappedFile.cpp": {
      "path": "src/Platform/OSX/System/MemoryMappedFile.cpp",
      "size": 5951,
      "lines": 260,
      "hash": "32143d64cb6cf38e",
      "functions": [],
      "constants": []
    },
    "src/Platform/OSX/System/MemoryMappedFile.h": {
      "path": "src/Platform/OSX/System/MemoryMappedFile.h",
      "size": 1732,
      "lines": 60,
      "hash": "b85315be1fca6fc9",
      "functions": [
        {
          "name": "create",
          "line": 31,
          "signature": "void create(const std::string& path, uint64_t size, bool overwrite, std::error_code& ec);"
        },
        {
          "name": "create",
          "line": 32,
          "signature": "void create(const std::string& path, uint64_t size, bool overwrite);"
        },
        {
          "name": "open",
          "line": 33,
          "signature": "void open(const std::string& path, std::error_code& ec);"
        },
        {
          "name": "open",
          "line": 34,
          "signature": "void open(const std::string& path);"
        },
        {
          "name": "close",
          "line": 35,
          "signature": "void close(std::error_code& ec);"
        },
        {
          "name": "close",
          "line": 36,
          "signature": "void close();"
        },
        {
          "name": "rename",
          "line": 44,
          "signature": "void rename(const std::string& newPath, std::error_code& ec);"
        },
        {
          "name": "rename",
          "line": 45,
          "signature": "void rename(const std::string& newPath);"
        },
        {
          "name": "flush",
          "line": 47,
          "signature": "void flush(uint8_t* data, uint64_t size, std::error_code& ec);"
        },
        {
          "name": "flush",
          "line": 48,
          "signature": "void flush(uint8_t* data, uint64_t size);"
        },
        {
          "name": "swap",
          "line": 50,
          "signature": "void swap(MemoryMappedFile& other);"
        }
      ],
      "constants": []
    },
    "src/Platform/OSX/System/TcpConnection.cpp": {
      "path": "src/Platform/OSX/System/TcpConnection.cpp",
      "size": 7820,
      "lines": 229,
      "hash": "ac839c9fc1af9b65",
      "functions": [
        {
          "name": "InterruptedException",
          "line": 72,
          "signature": "throw InterruptedException();"
        },
        {
          "name": "InterruptedException",
          "line": 115,
          "signature": "throw InterruptedException();"
        },
        {
          "name": "InterruptedException",
          "line": 139,
          "signature": "throw InterruptedException();"
        },
        {
          "name": "InterruptedException",
          "line": 190,
          "signature": "throw InterruptedException();"
        }
      ],
      "constants": []
    },
    "src/Platform/OSX/System/TcpConnection.h": {
      "path": "src/Platform/OSX/System/TcpConnection.h",
      "size": 1110,
      "lines": 43,
      "hash": "9645ee6a4a2732dc",
      "functions": [],
      "constants": []
    },
    "src/Platform/OSX/System/TcpConnector.cpp": {
      "path": "src/Platform/OSX/System/TcpConnector.cpp",
      "size": 5654,
      "lines": 164,
      "hash": "c7c7d5f3b99c7fcb",
      "functions": [
        {
          "name": "InterruptedException",
          "line": 67,
          "signature": "throw InterruptedException();"
        },
        {
          "name": "InterruptedException",
          "line": 126,
          "signature": "throw InterruptedException();"
        },
        {
          "name": "TcpConnection",
          "line": 144,
          "signature": "return TcpConnection(*dispatcher, connection);"
        },
        {
          "name": "TcpConnection",
          "line": 151,
          "signature": "return TcpConnection(*dispatcher, connection);"
        }
      ],
      "constants": []
    },
    "src/Platform/OSX/System/TcpConnector.h": {
      "path": "src/Platform/OSX/System/TcpConnector.h",
      "size": 873,
      "lines": 35,
      "hash": "be59cb419424ac2a",
      "functions": [
        {
          "name": "connect",
          "line": 27,
          "signature": "TcpConnection connect(const Ipv4Address& address, uint16_t port);"
        }
      ],
      "constants": []
    },
    "src/Platform/OSX/System/TcpListener.cpp": {
      "path": "src/Platform/OSX/System/TcpListener.cpp",
      "size": 5596,
      "lines": 175,
      "hash": "4f6928fb61c92a95",
      "functions": [
        {
          "name": "InterruptedException",
          "line": 114,
          "signature": "throw InterruptedException();"
        },
        {
          "name": "InterruptedException",
          "line": 153,
          "signature": "throw InterruptedException();"
        },
        {
          "name": "TcpConnection",
          "line": 166,
          "signature": "return TcpConnection(*dispatcher, connection);"
        }
      ],
      "constants": []
    },
    "src/Platform/OSX/System/TcpListener.h": {
      "path": "src/Platform/OSX/System/TcpListener.h",
      "size": 878,
      "lines": 36,
      "hash": "0a5ce648c2b0cf7e",
      "functions": [
        {
          "name": "accept",
          "line": 27,
          "signature": "TcpConnection accept();"
        }
      ],
      "constants": []
    },
    "src/Platform/OSX/System/Timer.cpp": {
      "path": "src/Platform/OSX/System/Timer.cpp",
      "size": 3070,
      "lines": 107,
      "hash": "ce7432ebb15877c7",
      "functions": [
        {
          "name": "InterruptedException",
          "line": 60,
          "signature": "throw InterruptedException();"
        },
        {
          "name": "InterruptedException",
          "line": 102,
          "signature": "throw InterruptedException();"
        }
      ],
      "constants": []
    },
    "src/Platform/OSX/System/Timer.h": {
      "path": "src/Platform/OSX/System/Timer.h",
      "size": 733,
      "lines": 33,
      "hash": "ef49e3b682d1d413",
      "functions": [
        {
          "name": "Timer",
          "line": 18,
          "signature": "explicit Timer(Dispatcher& dispatcher);"
        },
        {
          "name": "sleep",
          "line": 24,
          "signature": "void sleep(std::chrono::nanoseconds duration);"
        }
      ],
      "constants": []
    },
    "src/Platform/Windows/System/Dispatcher.cpp": {
      "path": "src/Platform/Windows/System/Dispatcher.cpp",
      "size": 14302,
      "lines": 439,
      "hash": "c3ac58176d6c1982",
      "functions": [],
      "constants": [
        {
          "name": "STACK_SIZE",
          "line": 39,
          "value": "16384"
        },
        {
          "name": "RESERVE_STACK_SIZE",
          "line": 40,
          "value": "2097152"
        }
      ]
    },
    "src/Platform/Windows/System/Dispatcher.h": {
      "path": "src/Platform/Windows/System/Dispatcher.h",
      "size": 2735,
      "lines": 94,
      "hash": "31dfb2ee6389bb1f",
      "functions": [
        {
          "name": "clear",
          "line": 54,
          "signature": "void clear();"
        },
        {
          "name": "dispatch",
          "line": 55,
          "signature": "void dispatch();"
        },
        {
          "name": "interrupt",
          "line": 57,
          "signature": "void interrupt();"
        },
        {
          "name": "interrupt",
          "line": 58,
          "signature": "void interrupt(NativeContext* context);"
        },
        {
          "name": "interrupted",
          "line": 59,
          "signature": "bool interrupted();"
        },
        {
          "name": "pushContext",
          "line": 60,
          "signature": "void pushContext(NativeContext* context);"
        },
        {
          "name": "yield",
          "line": 62,
          "signature": "void yield();"
        },
        {
          "name": "addTimer",
          "line": 65,
          "signature": "void addTimer(uint64_t time, NativeContext* context);"
        },
        {
          "name": "pushReusableContext",
          "line": 68,
          "signature": "void pushReusableContext(NativeContext&);"
        },
        {
          "name": "interruptTimer",
          "line": 69,
          "signature": "void interruptTimer(uint64_t time, NativeContext* context);"
        },
        {
          "name": "contextProcedure",
          "line": 89,
          "signature": "void contextProcedure();"
        },
        {
          "name": "contextProcedureStatic",
          "line": 90,
          "signature": "static void __stdcall contextProcedureStatic(void* context);"
        }
      ],
      "constants": []
    },
    "src/Platform/Windows/System/ErrorMessage.cpp": {
      "path": "src/Platform/Windows/System/ErrorMessage.cpp",
      "size": 996,
      "lines": 35,
      "hash": "60b87be7d3f3134f",
      "functions": [],
      "constants": []
    },
    "src/Platform/Windows/System/ErrorMessage.h": {
      "path": "src/Platform/Windows/System/ErrorMessage.h",
      "size": 438,
      "lines": 17,
      "hash": "c6b81f9aa3a637f7",
      "functions": [],
      "constants": []
    },
    "src/Platform/Windows/System/Future.h": {
      "path": "src/Platform/Windows/System/Future.h",
      "size": 582,
      "lines": 25,
      "hash": "bb94c1ba649905eb",
      "functions": [],
      "constants": []
    },
    "src/Platform/Windows/System/Ipv4Resolver.cpp": {
      "path": "src/Platform/Windows/System/Ipv4Resolver.cpp",
      "size": 2188,
      "lines": 77,
      "hash": "84177320ffa8befd",
      "functions": [
        {
          "name": "InterruptedException",
          "line": 49,
          "signature": "throw InterruptedException();"
        }
      ],
      "constants": []
    },
    "src/Platform/Windows/System/Ipv4Resolver.h": {
      "path": "src/Platform/Windows/System/Ipv4Resolver.h",
      "size": 809,
      "lines": 32,
      "hash": "1d809ecd2205b7d5",
      "functions": [
        {
          "name": "Ipv4Resolver",
          "line": 19,
          "signature": "explicit Ipv4Resolver(Dispatcher& dispatcher);"
        },
        {
          "name": "resolve",
          "line": 25,
          "signature": "Ipv4Address resolve(const std::string& host);"
        }
      ],
      "constants": []
    },
    "src/Platform/Windows/System/MemoryMappedFile.cpp": {
      "path": "src/Platform/Windows/System/MemoryMappedFile.cpp",
      "size": 6943,
      "lines": 294,
      "hash": "12aa1b5ec02df1a0",
      "functions": [],
      "constants": []
    },
    "src/Platform/Windows/System/MemoryMappedFile.h": {
      "path": "src/Platform/Windows/System/MemoryMappedFile.h",
      "size": 1777,
      "lines": 61,
      "hash": "843f8af390dadb0b",
      "functions": [
        {
          "name": "create",
          "line": 31,
          "signature": "void create(const std::string& path, uint64_t size, bool overwrite, std::error_code& ec);"
        },
        {
          "name": "create",
          "line": 32,
          "signature": "void create(const std::string& path, uint64_t size, bool overwrite);"
        },
        {
          "name": "open",
          "line": 33,
          "signature": "void open(const std::string& path, std::error_code& ec);"
        },
        {
          "name": "open",
          "line": 34,
          "signature": "void open(const std::string& path);"
        },
        {
          "name": "close",
          "line": 35,
          "signature": "void close(std::error_code& ec);"
        },
        {
          "name": "close",
          "line": 36,
          "signature": "void close();"
        },
        {
          "name": "rename",
          "line": 44,
          "signature": "void rename(const std::string& newPath, std::error_code& ec);"
        },
        {
          "name": "rename",
          "line": 45,
          "signature": "void rename(const std::string& newPath);"
        },
        {
          "name": "flush",
          "line": 47,
          "signature": "void flush(uint8_t* data, uint64_t size, std::error_code& ec);"
        },
        {
          "name": "flush",
          "line": 48,
          "signature": "void flush(uint8_t* data, uint64_t size);"
        },
        {
          "name": "swap",
          "line": 50,
          "signature": "void swap(MemoryMappedFile& other);"
        }
      ],
      "constants": []
    },
    "src/Platform/Windows/System/TcpConnection.cpp": {
      "path": "src/Platform/Windows/System/TcpConnection.cpp",
      "size": 7019,
      "lines": 222,
      "hash": "30f9e44bba73b238",
      "functions": [
        {
          "name": "InterruptedException",
          "line": 80,
          "signature": "throw InterruptedException();"
        },
        {
          "name": "InterruptedException",
          "line": 130,
          "signature": "throw InterruptedException();"
        },
        {
          "name": "InterruptedException",
          "line": 142,
          "signature": "throw InterruptedException();"
        },
        {
          "name": "InterruptedException",
          "line": 199,
          "signature": "throw InterruptedException();"
        }
      ],
      "constants": []
    },
    "src/Platform/Windows/System/TcpConnection.h": {
      "path": "src/Platform/Windows/System/TcpConnection.h",
      "size": 1080,
      "lines": 42,
      "hash": "2cd54cf215f3326e",
      "functions": [
        {
          "name": "read",
          "line": 25,
          "signature": "size_t read(uint8_t* data, size_t size);"
        },
        {
          "name": "write",
          "line": 26,
          "signature": "size_t write(const uint8_t* data, size_t size);"
        }
      ],
      "constants": []
    },
    "src/Platform/Windows/System/TcpConnector.cpp": {
      "path": "src/Platform/Windows/System/TcpConnector.cpp",
      "size": 6435,
      "lines": 173,
      "hash": "8a97d278449c6ea9",
      "functions": [
        {
          "name": "InterruptedException",
          "line": 69,
          "signature": "throw InterruptedException();"
        },
        {
          "name": "InterruptedException",
          "line": 146,
          "signature": "throw InterruptedException();"
        },
        {
          "name": "TcpConnection",
          "line": 156,
          "signature": "return TcpConnection(*dispatcher, connection);"
        }
      ],
      "constants": []
    },
    "src/Platform/Windows/System/TcpConnector.h": {
      "path": "src/Platform/Windows/System/TcpConnector.h",
      "size": 882,
      "lines": 35,
      "hash": "7a44de7afa51f0fa",
      "functions": [
        {
          "name": "TcpConnector",
          "line": 21,
          "signature": "explicit TcpConnector(Dispatcher& dispatcher);"
        },
        {
          "name": "connect",
          "line": 27,
          "signature": "TcpConnection connect(const Ipv4Address& address, uint16_t port);"
        }
      ],
      "constants": []
    },
    "src/Platform/Windows/System/TcpListener.cpp": {
      "path": "src/Platform/Windows/System/TcpListener.cpp",
      "size": 6850,
      "lines": 198,
      "hash": "6dc86046be17a8e9",
      "functions": [
        {
          "name": "InterruptedException",
          "line": 114,
          "signature": "throw InterruptedException();"
        },
        {
          "name": "InterruptedException",
          "line": 171,
          "signature": "throw InterruptedException();"
        },
        {
          "name": "TcpConnection",
          "line": 183,
          "signature": "return TcpConnection(*dispatcher, connection);"
        }
      ],
      "constants": []
    },
    "src/Platform/Windows/System/TcpListener.h": {
      "path": "src/Platform/Windows/System/TcpListener.h",
      "size": 881,
      "lines": 36,
      "hash": "285d052170d380a6",
      "functions": [
        {
          "name": "accept",
          "line": 27,
          "signature": "TcpConnection accept();"
        }
      ],
      "constants": []
    },
    "src/Platform/Windows/System/Timer.cpp": {
      "path": "src/Platform/Windows/System/Timer.cpp",
      "size": 2632,
      "lines": 97,
      "hash": "e05e008310e7503b",
      "functions": [
        {
          "name": "InterruptedException",
          "line": 63,
          "signature": "throw InterruptedException();"
        },
        {
          "name": "InterruptedException",
          "line": 92,
          "signature": "throw InterruptedException();"
        }
      ],
      "constants": []
    },
    "src/Platform/Windows/System/Timer.h": {
      "path": "src/Platform/Windows/System/Timer.h",
      "size": 720,
      "lines": 32,
      "hash": "34a2c9ea8d2ccb25",
      "functions": [
        {
          "name": "Timer",
          "line": 18,
          "signature": "explicit Timer(Dispatcher& dispatcher);"
        },
        {
          "name": "sleep",
          "line": 24,
          "signature": "void sleep(std::chrono::nanoseconds duration);"
        }
      ],
      "constants": []
    },
    "src/Platform/mingw/alloca.h": {
      "path": "src/Platform/mingw/alloca.h",
      "size": 353,
      "lines": 10,
      "hash": "6ec33046caf4acfc",
      "functions": [],
      "constants": []
    },
    "src/Platform/msc/alloca.h": {
      "path": "src/Platform/msc/alloca.h",
      "size": 395,
      "lines": 12,
      "hash": "b10856ab5542d294",
      "functions": [],
      "constants": []
    },
    "src/Platform/msc/stdbool.h": {
      "path": "src/Platform/msc/stdbool.h",
      "size": 417,
      "lines": 16,
      "hash": "beb880f046f6cd67",
      "functions": [],
      "constants": [
        {
          "name": "true",
          "line": 12,
          "value": "1"
        },
        {
          "name": "false",
          "line": 13,
          "value": "0"
        }
      ]
    },
    "src/Platform/msc/sys/param.h": {
      "path": "src/Platform/msc/sys/param.h",
      "size": 441,
      "lines": 13,
      "hash": "e030552ae1e7697e",
      "functions": [],
      "constants": [
        {
          "name": "LITTLE_ENDIAN",
          "line": 9,
          "value": "1234"
        },
        {
          "name": "BIG_ENDIAN",
          "line": 10,
          "value": "4321"
        },
        {
          "name": "PDP_ENDIAN",
          "line": 11,
          "value": "3412"
        },
        {
          "name": "BYTE_ORDER",
          "line": 12,
          "value": "LITTLE_ENDIAN"
        }
      ]
    },
    "src/Rpc/CoreRpcServerCommandsDefinitions.h": {
      "path": "src/Rpc/CoreRpcServerCommandsDefinitions.h",
      "size": 21688,
      "lines": 949,
      "hash": "b5d167411367caf3",
      "functions": [
        {
          "name": "serialize",
          "line": 33,
          "signature": "void serialize(ISerializer &s) {}"
        },
        {
          "name": "serialize",
          "line": 39,
          "signature": "void serialize(ISerializer &s) {"
        },
        {
          "name": "serialize",
          "line": 51,
          "signature": "void serialize(ISerializer &s) {"
        },
        {
          "name": "serialize",
          "line": 63,
          "signature": "void serialize(ISerializer &s) {"
        },
        {
          "name": "serialize",
          "line": 74,
          "signature": "void serialize(ISerializer &s) {"
        },
        {
          "name": "serialize",
          "line": 87,
          "signature": "void serialize(ISerializer &s) {"
        },
        {
          "name": "serialize",
          "line": 97,
          "signature": "void serialize(ISerializer &s) {"
        },
        {
          "name": "serialize",
          "line": 131,
          "signature": "void serialize(ISerializer &s) {"
        },
        {
          "name": "serialize",
          "line": 143,
          "signature": "void serialize(ISerializer &s) {"
        },
        {
          "name": "serialize",
          "line": 174,
          "signature": "void serialize(ISerializer &s) {"
        },
        {
          "name": "serialize",
          "line": 186,
          "signature": "void serialize(ISerializer &s) {"
        },
        {
          "name": "serialize",
          "line": 201,
          "signature": "void serialize(ISerializer &s) {"
        },
        {
          "name": "serialize",
          "line": 210,
          "signature": "void serialize(ISerializer &s) {"
        },
        {
          "name": "serialize",
          "line": 221,
          "signature": "void serialize(ISerializer &s) {"
        },
        {
          "name": "serialize",
          "line": 238,
          "signature": "void serialize(ISerializer &s) {"
        },
        {
          "name": "serialize",
          "line": 248,
          "signature": "void serialize(ISerializer &s) {"
        },
        {
          "name": "request",
          "line": 268,
          "signature": "explicit request(const Transaction &);"
        },
        {
          "name": "serialize",
          "line": 270,
          "signature": "void serialize(ISerializer &s) {"
        },
        {
          "name": "serialize",
          "line": 278,
          "signature": "void serialize(ISerializer &s) {"
        },
        {
          "name": "serialize",
          "line": 289,
          "signature": "void serialize(ISerializer &s) {"
        },
        {
          "name": "serialize",
          "line": 298,
          "signature": "void serialize(ISerializer &s) {"
        },
        {
          "name": "serialize",
          "line": 330,
          "signature": "void serialize(ISerializer &s) {"
        },
        {
          "name": "serialize",
          "line": 364,
          "signature": "void serialize(ISerializer &s) {"
        },
        {
          "name": "serialize",
          "line": 391,
          "signature": "void serialize(ISerializer &s) {"
        },
        {
          "name": "serialize",
          "line": 405,
          "signature": "void serialize(ISerializer &s) {"
        },
        {
          "name": "serialize",
          "line": 422,
          "signature": "void serialize(ISerializer &s) {"
        },
        {
          "name": "serialize",
          "line": 435,
          "signature": "void serialize(ISerializer &s) {"
        },
        {
          "name": "serialize",
          "line": 451,
          "signature": "void serialize(ISerializer &s) {"
        },
        {
          "name": "serialize",
          "line": 476,
          "signature": "void serialize(ISerializer &s) {"
        },
        {
          "name": "serialize",
          "line": 496,
          "signature": "void serialize(ISerializer &s) {"
        },
        {
          "name": "serialize",
          "line": 509,
          "signature": "void serialize(ISerializer &s) {"
        },
        {
          "name": "serialize",
          "line": 525,
          "signature": "void serialize(ISerializer &s) {"
        },
        {
          "name": "serialize",
          "line": 543,
          "signature": "void serialize(ISerializer &s) {"
        },
        {
          "name": "serialize",
          "line": 576,
          "signature": "void serialize(ISerializer &s) {"
        },
        {
          "name": "serialize",
          "line": 604,
          "signature": "void serialize(ISerializer &s) {"
        },
        {
          "name": "serialize",
          "line": 635,
          "signature": "void serialize(ISerializer &s) {"
        },
        {
          "name": "serialize",
          "line": 675,
          "signature": "void serialize(ISerializer &s) {"
        },
        {
          "name": "serialize",
          "line": 687,
          "signature": "void serialize(ISerializer &s) {"
        },
        {
          "name": "serialize",
          "line": 701,
          "signature": "void serialize(ISerializer &s) {"
        },
        {
          "name": "serialize",
          "line": 710,
          "signature": "void serialize(ISerializer &s) {"
        },
        {
          "name": "serialize",
          "line": 721,
          "signature": "void serialize(ISerializer &s) {"
        },
        {
          "name": "serialize",
          "line": 730,
          "signature": "void serialize(ISerializer &s) {"
        },
        {
          "name": "serialize",
          "line": 741,
          "signature": "void serialize(ISerializer &s) {"
        },
        {
          "name": "serialize",
          "line": 752,
          "signature": "void serialize(ISerializer &s) {"
        },
        {
          "name": "serialize",
          "line": 768,
          "signature": "void serialize(ISerializer &s) {"
        },
        {
          "name": "serialize",
          "line": 783,
          "signature": "void serialize(ISerializer &s) {"
        },
        {
          "name": "serialize",
          "line": 799,
          "signature": "void serialize(ISerializer &s) {"
        },
        {
          "name": "serialize",
          "line": 812,
          "signature": "void serialize(ISerializer &s) {"
        },
        {
          "name": "serialize",
          "line": 827,
          "signature": "void serialize(ISerializer &s) {"
        },
        {
          "name": "serialize",
          "line": 840,
          "signature": "void serialize(ISerializer &s) {"
        },
        {
          "name": "serialize",
          "line": 856,
          "signature": "void serialize(ISerializer &s) {"
        },
        {
          "name": "serialize",
          "line": 886,
          "signature": "void serialize(ISerializer &s) {"
        },
        {
          "name": "serialize",
          "line": 898,
          "signature": "void serialize(ISerializer &s) {"
        },
        {
          "name": "serialize",
          "line": 912,
          "signature": "void serialize(ISerializer &s) {"
        },
        {
          "name": "serialize",
          "line": 928,
          "signature": "void serialize(ISerializer &s) {"
        },
        {
          "name": "serialize",
          "line": 940,
          "signature": "void serialize(ISerializer &s) {"
        }
      ],
      "constants": [
        {
          "name": "CORE_RPC_STATUS_OK",
          "line": 29,
          "value": "\"OK\""
        },
        {
          "name": "CORE_RPC_STATUS_BUSY",
          "line": 30,
          "value": "\"BUSY\""
        }
      ]
    },
    "src/Rpc/CoreRpcServerErrorCodes.h": {
      "path": "src/Rpc/CoreRpcServerErrorCodes.h",
      "size": 1278,
      "lines": 28,
      "hash": "01f8fc9b7716535a",
      "functions": [],
      "constants": [
        {
          "name": "CORE_RPC_ERROR_CODE_WRONG_PARAM",
          "line": 20,
          "value": "-1"
        },
        {
          "name": "CORE_RPC_ERROR_CODE_TOO_BIG_HEIGHT",
          "line": 21,
          "value": "-2"
        },
        {
          "name": "CORE_RPC_ERROR_CODE_TOO_BIG_RESERVE_SIZE",
          "line": 22,
          "value": "-3"
        },
        {
          "name": "CORE_RPC_ERROR_CODE_WRONG_WALLET_ADDRESS",
          "line": 23,
          "value": "-4"
        },
        {
          "name": "CORE_RPC_ERROR_CODE_INTERNAL_ERROR",
          "line": 24,
          "value": "-5"
        },
        {
          "name": "CORE_RPC_ERROR_CODE_WRONG_BLOCKBLOB",
          "line": 25,
          "value": "-6"
        },
        {
          "name": "CORE_RPC_ERROR_CODE_BLOCK_NOT_ACCEPTED",
          "line": 26,
          "value": "-7"
        },
        {
          "name": "CORE_RPC_ERROR_CODE_CORE_BUSY",
          "line": 27,
          "value": "-9"
        }
      ]
    },
    "src/Rpc/HttpClient.cpp": {
      "path": "src/Rpc/HttpClient.cpp",
      "size": 2465,
      "lines": 90,
      "hash": "fe692b97bef3d855",
      "functions": [],
      "constants": []
    },
    "src/Rpc/HttpClient.h": {
      "path": "src/Rpc/HttpClient.h",
      "size": 4314,
      "lines": 137,
      "hash": "d77042ceef054c1e",
      "functions": [
        {
          "name": "request",
          "line": 43,
          "signature": "void request(const HttpRequest& req, HttpResponse& res);"
        },
        {
          "name": "connect",
          "line": 48,
          "signature": "void connect();"
        },
        {
          "name": "disconnect",
          "line": 49,
          "signature": "void disconnect();"
        },
        {
          "name": "invokeJsonCommand",
          "line": 61,
          "signature": "void invokeJsonCommand(HttpClient& client, const std::string& url, const Request& req, Response& res, const std::string& user = \"\", const std::string& password = \"\") {"
        },
        {
          "name": "invokeJsonRpcCommand",
          "line": 83,
          "signature": "void invokeJsonRpcCommand(HttpClient& client, const std::string& method, const Request& req, Response& res, const std::string& user = \"\", const std::string& password = \"\") {"
        },
        {
          "name": "invokeBinaryCommand",
          "line": 120,
          "signature": "void invokeBinaryCommand(HttpClient& client, const std::string& url, const Request& req, Response& res, const std::string& user = \"\", const std::string& password = \"\") {"
        }
      ],
      "constants": []
    },
    "src/Rpc/HttpServer.cpp": {
      "path": "src/Rpc/HttpServer.cpp",
      "size": 4490,
      "lines": 150,
      "hash": "745977efbe871bc2",
      "functions": [
        {
          "name": "fillUnauthorizedResponse",
          "line": 30,
          "signature": "void fillUnauthorizedResponse(CryptoNote::HttpResponse& response) {"
        }
      ],
      "constants": []
    },
    "src/Rpc/HttpServer.h": {
      "path": "src/Rpc/HttpServer.h",
      "size": 1922,
      "lines": 65,
      "hash": "a6faada1d66fd88a",
      "functions": [
        {
          "name": "start",
          "line": 41,
          "signature": "void start(const std::string& address, uint16_t port, const std::string& user = \"\", const std::string& password = \"\");"
        },
        {
          "name": "stop",
          "line": 42,
          "signature": "void stop();"
        },
        {
          "name": "acceptLoop",
          "line": 53,
          "signature": "void acceptLoop();"
        },
        {
          "name": "connectionHandler",
          "line": 54,
          "signature": "void connectionHandler(System::TcpConnection&& conn);"
        }
      ],
      "constants": []
    },
    "src/Rpc/JsonRpc.cpp": {
      "path": "src/Rpc/JsonRpc.cpp",
      "size": 2310,
      "lines": 70,
      "hash": "184732eedeb5cf66",
      "functions": [
        {
          "name": "invokeJsonRpcCommand",
          "line": 42,
          "signature": "void invokeJsonRpcCommand(HttpClient& httpClient, JsonRpcRequest& jsReq, JsonRpcResponse& jsRes, const std::string& user, const std::string& password) {"
        }
      ],
      "constants": []
    },
    "src/Rpc/JsonRpc.h": {
      "path": "src/Rpc/JsonRpc.h",
      "size": 5797,
      "lines": 237,
      "hash": "275eee122120cef1",
      "functions": [
        {
          "name": "serialize",
          "line": 55,
          "signature": "void serialize(ISerializer& s) {"
        },
        {
          "name": "parseRequest",
          "line": 71,
          "signature": "bool parseRequest(const std::string& requestBody) {"
        },
        {
          "name": "JsonRpcError",
          "line": 75,
          "signature": "throw JsonRpcError(errParseError);"
        },
        {
          "name": "JsonRpcError",
          "line": 79,
          "signature": "throw JsonRpcError(errInvalidRequest);"
        },
        {
          "name": "setParams",
          "line": 99,
          "signature": "bool setParams(const T& v) {"
        },
        {
          "name": "setMethod",
          "line": 108,
          "signature": "void setMethod(const std::string& m) {"
        },
        {
          "name": "parse",
          "line": 135,
          "signature": "void parse(const std::string& responseBody) {"
        },
        {
          "name": "JsonRpcError",
          "line": 139,
          "signature": "throw JsonRpcError(errParseError);"
        },
        {
          "name": "setId",
          "line": 143,
          "signature": "void setId(const OptionalId& id) {"
        },
        {
          "name": "setError",
          "line": 149,
          "signature": "void setError(const JsonRpcError& err) {"
        },
        {
          "name": "setResult",
          "line": 168,
          "signature": "bool setResult(const T& v) {"
        },
        {
          "name": "invokeJsonRpcCommand",
          "line": 188,
          "signature": "void invokeJsonRpcCommand(HttpClient& httpClient, JsonRpcRequest& req, JsonRpcResponse& res, const std::string& user = \"\", const std::string& password = \"\");"
        },
        {
          "name": "invokeJsonRpcCommand",
          "line": 191,
          "signature": "void invokeJsonRpcCommand(HttpClient& httpClient, const std::string& method, const Request& req, Response& res, const std::string& user = \"\", const std::string& password = \"\") {"
        },
        {
          "name": "invokeMethod",
          "line": 204,
          "signature": "bool invokeMethod(const JsonRpcRequest& jsReq, JsonRpcResponse& jsRes, Handler handler) {"
        },
        {
          "name": "JsonRpcError",
          "line": 209,
          "signature": "throw JsonRpcError(JsonRpc::errInvalidParams);"
        },
        {
          "name": "JsonRpcError",
          "line": 216,
          "signature": "throw JsonRpcError(JsonRpc::errInternalError);"
        }
      ],
      "constants": [
        {
          "name": "errParseError",
          "line": 35,
          "value": "-32700"
        },
        {
          "name": "errInvalidRequest",
          "line": 36,
          "value": "-32600"
        },
        {
          "name": "errMethodNotFound",
          "line": 37,
          "value": "-32601"
        },
        {
          "name": "errInvalidParams",
          "line": 38,
          "value": "-32602"
        },
        {
          "name": "errInternalError",
          "line": 39,
          "value": "-32603"
        }
      ]
    },
    "src/Rpc/RpcServer.cpp": {
      "path": "src/Rpc/RpcServer.cpp",
      "size": 53242,
      "lines": 1411,
      "hash": "6b7897b8ffe6f7ad",
      "functions": [
        {
          "name": "JsonRpcError",
          "line": 178,
          "signature": "throw JsonRpcError(JsonRpc::errMethodNotFound);"
        },
        {
          "name": "JsonRpcError",
          "line": 182,
          "signature": "throw JsonRpcError(CORE_RPC_ERROR_CODE_CORE_BUSY, \"Core is busy\");"
        },
        {
          "name": "received",
          "line": 331,
          "signature": "uint64_t received(0);"
        },
        {
          "name": "keyIndex",
          "line": 332,
          "signature": "size_t keyIndex(0);"
        },
        {
          "name": "get_block_reward",
          "line": 1283,
          "signature": "uint64_t get_block_reward(const Block& blk) {"
        }
      ],
      "constants": [
        {
          "name": "header_len",
          "line": 266,
          "value": "strlen(\"ProofV1\")"
        },
        {
          "name": "rA_len",
          "line": 272,
          "value": "Tools::Base58::encode(std::string((const char *)&rA, sizeof(Crypto::PublicKey))).size()"
        },
        {
          "name": "sig_len",
          "line": 273,
          "value": "Tools::Base58::encode(std::string((const char *)&sig, sizeof(Crypto::Signature))).size()"
        },
        {
          "name": "out_key",
          "line": 337,
          "value": "boost::get<KeyOutput>(o.target)"
        },
        {
          "name": "header_len",
          "line": 379,
          "value": "strlen(header)"
        },
        {
          "name": "out_key",
          "line": 432,
          "value": "boost::get<KeyOutput>(tx.outputs[proof.index_in_tx].target)"
        }
      ]
    },
    "src/Rpc/RpcServer.h": {
      "path": "src/Rpc/RpcServer.h",
      "size": 6699,
      "lines": 112,
      "hash": "6ca6d9a8bda4712d",
      "functions": [
        {
          "name": "setFeeAddress",
          "line": 37,
          "signature": "bool setFeeAddress(const std::string& fee_address, const AccountPublicAddress& fee_acc);"
        },
        {
          "name": "setViewKey",
          "line": 38,
          "signature": "bool setViewKey(const std::string& view_key);"
        },
        {
          "name": "restrictRPC",
          "line": 39,
          "signature": "bool restrictRPC(const bool is_resctricted);"
        },
        {
          "name": "k_on_check_tx_proof",
          "line": 40,
          "signature": "bool k_on_check_tx_proof(const K_COMMAND_RPC_CHECK_TX_PROOF::request& req, K_COMMAND_RPC_CHECK_TX_PROOF::response& res);"
        },
        {
          "name": "k_on_check_reserve_proof",
          "line": 41,
          "signature": "bool k_on_check_reserve_proof(const K_COMMAND_RPC_CHECK_RESERVE_PROOF::request& req, K_COMMAND_RPC_CHECK_RESERVE_PROOF::response& res);"
        },
        {
          "name": "enableCors",
          "line": 42,
          "signature": "bool enableCors(const std::string domain);"
        },
        {
          "name": "remotenode_check_incoming_tx",
          "line": 43,
          "signature": "bool remotenode_check_incoming_tx(const BinaryArray& tx_blob);"
        },
        {
          "name": "processJsonRpcRequest",
          "line": 57,
          "signature": "bool processJsonRpcRequest(const HttpRequest& request, HttpResponse& response);"
        },
        {
          "name": "isCoreReady",
          "line": 58,
          "signature": "bool isCoreReady();"
        },
        {
          "name": "on_get_blocks",
          "line": 61,
          "signature": "bool on_get_blocks(const COMMAND_RPC_GET_BLOCKS_FAST::request& req, COMMAND_RPC_GET_BLOCKS_FAST::response& res);"
        },
        {
          "name": "on_query_blocks",
          "line": 62,
          "signature": "bool on_query_blocks(const COMMAND_RPC_QUERY_BLOCKS::request& req, COMMAND_RPC_QUERY_BLOCKS::response& res);"
        },
        {
          "name": "on_query_blocks_lite",
          "line": 63,
          "signature": "bool on_query_blocks_lite(const COMMAND_RPC_QUERY_BLOCKS_LITE::request& req, COMMAND_RPC_QUERY_BLOCKS_LITE::response& res);"
        },
        {
          "name": "on_get_indexes",
          "line": 64,
          "signature": "bool on_get_indexes(const COMMAND_RPC_GET_TX_GLOBAL_OUTPUTS_INDEXES::request& req, COMMAND_RPC_GET_TX_GLOBAL_OUTPUTS_INDEXES::response& res);"
        },
        {
          "name": "on_get_random_outs",
          "line": 65,
          "signature": "bool on_get_random_outs(const COMMAND_RPC_GET_RANDOM_OUTPUTS_FOR_AMOUNTS::request& req, COMMAND_RPC_GET_RANDOM_OUTPUTS_FOR_AMOUNTS::response& res);"
        },
        {
          "name": "onGetPoolChanges",
          "line": 66,
          "signature": "bool onGetPoolChanges(const COMMAND_RPC_GET_POOL_CHANGES::request& req, COMMAND_RPC_GET_POOL_CHANGES::response& rsp);"
        },
        {
          "name": "onGetPoolChangesLite",
          "line": 67,
          "signature": "bool onGetPoolChangesLite(const COMMAND_RPC_GET_POOL_CHANGES_LITE::request& req, COMMAND_RPC_GET_POOL_CHANGES_LITE::response& rsp);"
        },
        {
          "name": "on_get_info",
          "line": 70,
          "signature": "bool on_get_info(const COMMAND_RPC_GET_INFO::request& req, COMMAND_RPC_GET_INFO::response& res);"
        },
        {
          "name": "on_get_height",
          "line": 71,
          "signature": "bool on_get_height(const COMMAND_RPC_GET_HEIGHT::request& req, COMMAND_RPC_GET_HEIGHT::response& res);"
        },
        {
          "name": "on_get_peer_list",
          "line": 72,
          "signature": "bool on_get_peer_list(const COMMAND_RPC_GET_PEER_LIST::request& req, COMMAND_RPC_GET_PEER_LIST::response& res);"
        },
        {
          "name": "on_get_transactions",
          "line": 73,
          "signature": "bool on_get_transactions(const COMMAND_RPC_GET_TRANSACTIONS::request& req, COMMAND_RPC_GET_TRANSACTIONS::response& res);"
        },
        {
          "name": "on_send_raw_tx",
          "line": 74,
          "signature": "bool on_send_raw_tx(const COMMAND_RPC_SEND_RAW_TX::request& req, COMMAND_RPC_SEND_RAW_TX::response& res);"
        },
        {
          "name": "on_start_mining",
          "line": 75,
          "signature": "bool on_start_mining(const COMMAND_RPC_START_MINING::request& req, COMMAND_RPC_START_MINING::response& res);"
        },
        {
          "name": "on_stop_mining",
          "line": 76,
          "signature": "bool on_stop_mining(const COMMAND_RPC_STOP_MINING::request& req, COMMAND_RPC_STOP_MINING::response& res);"
        },
        {
          "name": "on_stop_daemon",
          "line": 77,
          "signature": "bool on_stop_daemon(const COMMAND_RPC_STOP_DAEMON::request& req, COMMAND_RPC_STOP_DAEMON::response& res);"
        },
        {
          "name": "on_get_fee_address",
          "line": 78,
          "signature": "bool on_get_fee_address(const COMMAND_RPC_GET_FEE_ADDRESS::request& req, COMMAND_RPC_GET_FEE_ADDRESS::response& res);"
        },
        {
          "name": "on_alt_blocks_list_json",
          "line": 79,
          "signature": "bool on_alt_blocks_list_json(const COMMAND_RPC_GET_ALT_BLOCKS_LIST::request &req, COMMAND_RPC_GET_ALT_BLOCKS_LIST::response &res);"
        },
        {
          "name": "on_get_payment_id",
          "line": 80,
          "signature": "bool on_get_payment_id(const COMMAND_RPC_GEN_PAYMENT_ID::request& req, COMMAND_RPC_GEN_PAYMENT_ID::response& res);"
        },
        {
          "name": "on_getblockcount",
          "line": 83,
          "signature": "bool on_getblockcount(const COMMAND_RPC_GETBLOCKCOUNT::request& req, COMMAND_RPC_GETBLOCKCOUNT::response& res);"
        },
        {
          "name": "on_getblockhash",
          "line": 84,
          "signature": "bool on_getblockhash(const COMMAND_RPC_GETBLOCKHASH::request& req, COMMAND_RPC_GETBLOCKHASH::response& res);"
        },
        {
          "name": "on_getblocktemplate",
          "line": 85,
          "signature": "bool on_getblocktemplate(const COMMAND_RPC_GETBLOCKTEMPLATE::request& req, COMMAND_RPC_GETBLOCKTEMPLATE::response& res);"
        },
        {
          "name": "on_get_currency_id",
          "line": 86,
          "signature": "bool on_get_currency_id(const COMMAND_RPC_GET_CURRENCY_ID::request& req, COMMAND_RPC_GET_CURRENCY_ID::response& res);"
        },
        {
          "name": "on_submitblock",
          "line": 87,
          "signature": "bool on_submitblock(const COMMAND_RPC_SUBMITBLOCK::request& req, COMMAND_RPC_SUBMITBLOCK::response& res);"
        },
        {
          "name": "on_get_last_block_header",
          "line": 88,
          "signature": "bool on_get_last_block_header(const COMMAND_RPC_GET_LAST_BLOCK_HEADER::request& req, COMMAND_RPC_GET_LAST_BLOCK_HEADER::response& res);"
        },
        {
          "name": "on_get_block_header_by_hash",
          "line": 89,
          "signature": "bool on_get_block_header_by_hash(const COMMAND_RPC_GET_BLOCK_HEADER_BY_HASH::request& req, COMMAND_RPC_GET_BLOCK_HEADER_BY_HASH::response& res);"
        },
        {
          "name": "on_get_block_header_by_height",
          "line": 90,
          "signature": "bool on_get_block_header_by_height(const COMMAND_RPC_GET_BLOCK_HEADER_BY_HEIGHT::request& req, COMMAND_RPC_GET_BLOCK_HEADER_BY_HEIGHT::response& res);"
        },
        {
          "name": "fill_block_header_response",
          "line": 92,
          "signature": "void fill_block_header_response(const Block& blk, bool orphan_status, uint64_t height, const Crypto::Hash& hash, block_header_response& responce);"
        },
        {
          "name": "f_on_blocks_list_json",
          "line": 94,
          "signature": "bool f_on_blocks_list_json(const F_COMMAND_RPC_GET_BLOCKS_LIST::request& req, F_COMMAND_RPC_GET_BLOCKS_LIST::response& res);"
        },
        {
          "name": "f_on_block_json",
          "line": 95,
          "signature": "bool f_on_block_json(const F_COMMAND_RPC_GET_BLOCK_DETAILS::request& req, F_COMMAND_RPC_GET_BLOCK_DETAILS::response& res);"
        },
        {
          "name": "f_on_transaction_json",
          "line": 96,
          "signature": "bool f_on_transaction_json(const F_COMMAND_RPC_GET_TRANSACTION_DETAILS::request& req, F_COMMAND_RPC_GET_TRANSACTION_DETAILS::response& res);"
        },
        {
          "name": "f_on_transactions_pool_json",
          "line": 97,
          "signature": "bool f_on_transactions_pool_json(const F_COMMAND_RPC_GET_POOL::request& req, F_COMMAND_RPC_GET_POOL::response& res);"
        },
        {
          "name": "f_getMixin",
          "line": 98,
          "signature": "bool f_getMixin(const Transaction& transaction, uint64_t& mixin);"
        }
      ],
      "constants": []
    },
    "src/Rpc/RpcServerConfig.cpp": {
      "path": "src/Rpc/RpcServerConfig.cpp",
      "size": 1921,
      "lines": 52,
      "hash": "cd93857df1b27517",
      "functions": [],
      "constants": [
        {
          "name": "DEFAULT_RPC_PORT",
          "line": 27,
          "value": "RPC_DEFAULT_PORT"
        }
      ]
    },
    "src/Rpc/RpcServerConfig.h": {
      "path": "src/Rpc/RpcServerConfig.h",
      "size": 1205,
      "lines": 39,
      "hash": "90a9fc57944c7653",
      "functions": [
        {
          "name": "initOptions",
          "line": 29,
          "signature": "static void initOptions(boost::program_options::options_description& desc);"
        },
        {
          "name": "init",
          "line": 30,
          "signature": "void init(const boost::program_options::variables_map& options);"
        }
      ],
      "constants": []
    },
    "src/Serialization/BinaryInputStreamSerializer.cpp": {
      "path": "src/Serialization/BinaryInputStreamSerializer.cpp",
      "size": 3999,
      "lines": 142,
      "hash": "297094f5e5c0cead",
      "functions": [
        {
          "name": "readVarintAs",
          "line": 33,
          "signature": "void readVarintAs(IInputStream& s, T &i) {"
        }
      ],
      "constants": []
    },
    "src/Serialization/BinaryInputStreamSerializer.h": {
      "path": "src/Serialization/BinaryInputStreamSerializer.h",
      "size": 2591,
      "lines": 64,
      "hash": "4cb00f7b58be922e",
      "functions": [
        {
          "name": "checkedRead",
          "line": 59,
          "signature": "void checkedRead(char* buf, size_t size);"
        }
      ],
      "constants": []
    },
    "src/Serialization/BinaryOutputStreamSerializer.cpp": {
      "path": "src/Serialization/BinaryOutputStreamSerializer.cpp",
      "size": 3550,
      "lines": 115,
      "hash": "34185fd132432102",
      "functions": [],
      "constants": []
    },
    "src/Serialization/BinaryOutputStreamSerializer.h": {
      "path": "src/Serialization/BinaryOutputStreamSerializer.h",
      "size": 2603,
      "lines": 63,
      "hash": "4328939127621089",
      "functions": [
        {
          "name": "checkedWrite",
          "line": 58,
          "signature": "void checkedWrite(const char* buf, size_t size);"
        }
      ],
      "constants": []
    },
    "src/Serialization/BinarySerializationTools.h": {
      "path": "src/Serialization/BinarySerializationTools.h",
      "size": 2590,
      "lines": 90,
      "hash": "1363091a85bebeb9",
      "functions": [
        {
          "name": "storeToBinary",
          "line": 31,
          "signature": "BinaryArray storeToBinary(const T& obj) {"
        },
        {
          "name": "ba",
          "line": 34,
          "signature": "BinaryOutputStreamSerializer ba(stream);"
        },
        {
          "name": "loadFromBinary",
          "line": 40,
          "signature": "void loadFromBinary(T& obj, const BinaryArray& blob) {"
        },
        {
          "name": "ba",
          "line": 42,
          "signature": "BinaryInputStreamSerializer ba(stream);"
        },
        {
          "name": "storeToBinaryFile",
          "line": 47,
          "signature": "bool storeToBinaryFile(const T& obj, const std::string& filename) {"
        },
        {
          "name": "out",
          "line": 56,
          "signature": "BinaryOutputStreamSerializer out(stream);"
        },
        {
          "name": "loadFromBinaryFile",
          "line": 72,
          "signature": "bool loadFromBinaryFile(T& obj, const std::string& filename) {"
        },
        {
          "name": "in",
          "line": 81,
          "signature": "BinaryInputStreamSerializer in(stream);"
        }
      ],
      "constants": []
    },
    "src/Serialization/ISerializer.h": {
      "path": "src/Serialization/ISerializer.h",
      "size": 2983,
      "lines": 94,
      "hash": "13fac14d0791ab8c",
      "functions": [
        {
          "name": "serialize",
          "line": 65,
          "signature": "return serialize(value, name, *this);"
        },
        {
          "name": "serialize",
          "line": 69,
          "signature": "bool serialize(T& value, Common::StringView name, ISerializer& serializer) {"
        },
        {
          "name": "serialize",
          "line": 80,
          "signature": "void serialize(T& value, ISerializer& serializer) {"
        }
      ],
      "constants": []
    },
    "src/Serialization/IStream.h": {
      "path": "src/Serialization/IStream.h",
      "size": 1094,
      "lines": 36,
      "hash": "77c667d2a89fed9d",
      "functions": [],
      "constants": []
    },
    "src/Serialization/JsonInputStreamSerializer.cpp": {
      "path": "src/Serialization/JsonInputStreamSerializer.cpp",
      "size": 1342,
      "lines": 42,
      "hash": "90e3b42ba8978d61",
      "functions": [],
      "constants": []
    },
    "src/Serialization/JsonInputStreamSerializer.h": {
      "path": "src/Serialization/JsonInputStreamSerializer.h",
      "size": 1195,
      "lines": 36,
      "hash": "7692d1301cbc8d49",
      "functions": [],
      "constants": []
    },
    "src/Serialization/JsonInputValueSerializer.cpp": {
      "path": "src/Serialization/JsonInputValueSerializer.cpp",
      "size": 4866,
      "lines": 179,
      "hash": "3ab1d5dbf9b850d8",
      "functions": [
        {
          "name": "getNumber",
          "line": 99,
          "signature": "return getNumber(name, value);"
        },
        {
          "name": "getNumber",
          "line": 103,
          "signature": "return getNumber(name, value);"
        },
        {
          "name": "getNumber",
          "line": 107,
          "signature": "return getNumber(name, value);"
        },
        {
          "name": "getNumber",
          "line": 111,
          "signature": "return getNumber(name, value);"
        },
        {
          "name": "getNumber",
          "line": 115,
          "signature": "return getNumber(name, value);"
        },
        {
          "name": "getNumber",
          "line": 119,
          "signature": "return getNumber(name, value);"
        },
        {
          "name": "getNumber",
          "line": 123,
          "signature": "return getNumber(name, value);"
        },
        {
          "name": "getNumber",
          "line": 127,
          "signature": "return getNumber(name, value);"
        }
      ],
      "constants": []
    },
    "src/Serialization/JsonInputValueSerializer.h": {
      "path": "src/Serialization/JsonInputValueSerializer.h",
      "size": 2882,
      "lines": 79,
      "hash": "cde1d1793283d74e",
      "functions": [
        {
          "name": "getNumber",
          "line": 66,
          "signature": "bool getNumber(Common::StringView name, T& v) {"
        }
      ],
      "constants": []
    },
    "src/Serialization/JsonOutputStreamSerializer.cpp": {
      "path": "src/Serialization/JsonOutputStreamSerializer.cpp",
      "size": 4341,
      "lines": 145,
      "hash": "1365d68e5d946b6b",
      "functions": [
        {
          "name": "insertOrPush",
          "line": 36,
          "signature": "void insertOrPush(JsonValue& js, Common::StringView name, const T& value) {"
        },
        {
          "name": "obj",
          "line": 59,
          "signature": "JsonValue obj(JsonValue::OBJECT);"
        },
        {
          "name": "val",
          "line": 76,
          "signature": "JsonValue val(JsonValue::ARRAY);"
        }
      ],
      "constants": []
    },
    "src/Serialization/JsonOutputStreamSerializer.h": {
      "path": "src/Serialization/JsonOutputStreamSerializer.h",
      "size": 2665,
      "lines": 69,
      "hash": "622a859dc530cbdc",
      "functions": [],
      "constants": []
    },
    "src/Serialization/KVBinaryCommon.h": {
      "path": "src/Serialization/KVBinaryCommon.h",
      "size": 2301,
      "lines": 67,
      "hash": "35da3557528759e7",
      "functions": [],
      "constants": [
        {
          "name": "PORTABLE_STORAGE_SIGNATUREA",
          "line": 24,
          "value": "0x01011101"
        },
        {
          "name": "PORTABLE_STORAGE_SIGNATUREB",
          "line": 25,
          "value": "0x01020101"
        },
        {
          "name": "PORTABLE_STORAGE_FORMAT_VER",
          "line": 26,
          "value": "1"
        },
        {
          "name": "PORTABLE_RAW_SIZE_MARK_MASK",
          "line": 28,
          "value": "0x03"
        },
        {
          "name": "PORTABLE_RAW_SIZE_MARK_BYTE",
          "line": 29,
          "value": "0"
        },
        {
          "name": "PORTABLE_RAW_SIZE_MARK_WORD",
          "line": 30,
          "value": "1"
        },
        {
          "name": "PORTABLE_RAW_SIZE_MARK_DWORD",
          "line": 31,
          "value": "2"
        },
        {
          "name": "PORTABLE_RAW_SIZE_MARK_INT64",
          "line": 32,
          "value": "3"
        },
        {
          "name": "MAX_STRING_LEN_POSSIBLE",
          "line": 35,
          "value": "2000000000 //do not let string be so big"
        },
        {
          "name": "BIN_KV_SERIALIZE_TYPE_INT64",
          "line": 40,
          "value": "1"
        },
        {
          "name": "BIN_KV_SERIALIZE_TYPE_INT32",
          "line": 41,
          "value": "2"
        },
        {
          "name": "BIN_KV_SERIALIZE_TYPE_INT16",
          "line": 42,
          "value": "3"
        },
        {
          "name": "BIN_KV_SERIALIZE_TYPE_INT8",
          "line": 43,
          "value": "4"
        },
        {
          "name": "BIN_KV_SERIALIZE_TYPE_UINT64",
          "line": 44,
          "value": "5"
        },
        {
          "name": "BIN_KV_SERIALIZE_TYPE_UINT32",
          "line": 45,
          "value": "6"
        },
        {
          "name": "BIN_KV_SERIALIZE_TYPE_UINT16",
          "line": 46,
          "value": "7"
        },
        {
          "name": "BIN_KV_SERIALIZE_TYPE_UINT8",
          "line": 47,
          "value": "8"
        },
        {
          "name": "BIN_KV_SERIALIZE_TYPE_DOUBLE",
          "line": 48,
          "value": "9"
        },
        {
          "name": "BIN_KV_SERIALIZE_TYPE_STRING",
          "line": 49,
          "value": "10"
        },
        {
          "name": "BIN_KV_SERIALIZE_TYPE_BOOL",
          "line": 50,
          "value": "11"
        },
        {
          "name": "BIN_KV_SERIALIZE_TYPE_OBJECT",
          "line": 51,
          "value": "12"
        },
        {
          "name": "BIN_KV_SERIALIZE_TYPE_ARRAY",
          "line": 52,
          "value": "13"
        },
        {
          "name": "BIN_KV_SERIALIZE_FLAG_ARRAY",
          "line": 53,
          "value": "0x80"
        }
      ]
    },
    "src/Serialization/KVBinaryInputStreamSerializer.cpp": {
      "path": "src/Serialization/KVBinaryInputStreamSerializer.cpp",
      "size": 5828,
      "lines": 211,
      "hash": "6da92904d58d2ce5",
      "functions": [
        {
          "name": "readPod",
          "line": 33,
          "signature": "T readPod(Common::IInputStream& s) {"
        },
        {
          "name": "readPodJson",
          "line": 40,
          "signature": "JsonValue readPodJson(Common::IInputStream& s) {"
        },
        {
          "name": "readIntegerJson",
          "line": 47,
          "signature": "JsonValue readIntegerJson(Common::IInputStream& s) {"
        },
        {
          "name": "readVarint",
          "line": 51,
          "signature": "size_t readVarint(Common::IInputStream& s) {"
        },
        {
          "name": "readStringJson",
          "line": 96,
          "signature": "JsonValue readStringJson(Common::IInputStream& s) {"
        },
        {
          "name": "readName",
          "line": 100,
          "signature": "void readName(Common::IInputStream& s, std::string& name) {"
        },
        {
          "name": "loadValue",
          "line": 108,
          "signature": "JsonValue loadValue(Common::IInputStream& stream, uint8_t type);"
        },
        {
          "name": "loadSection",
          "line": 109,
          "signature": "JsonValue loadSection(Common::IInputStream& stream);"
        },
        {
          "name": "loadEntry",
          "line": 110,
          "signature": "JsonValue loadEntry(Common::IInputStream& stream);"
        },
        {
          "name": "loadArray",
          "line": 111,
          "signature": "JsonValue loadArray(Common::IInputStream& stream, uint8_t itemType);"
        },
        {
          "name": "loadSection",
          "line": 114,
          "signature": "JsonValue loadSection(Common::IInputStream& stream) {"
        },
        {
          "name": "sec",
          "line": 115,
          "signature": "JsonValue sec(JsonValue::OBJECT);"
        },
        {
          "name": "loadValue",
          "line": 127,
          "signature": "JsonValue loadValue(Common::IInputStream& stream, uint8_t type) {"
        },
        {
          "name": "loadEntry",
          "line": 148,
          "signature": "JsonValue loadEntry(Common::IInputStream& stream) {"
        },
        {
          "name": "loadArray",
          "line": 153,
          "signature": "return loadArray(stream, type);"
        },
        {
          "name": "loadValue",
          "line": 156,
          "signature": "return loadValue(stream, type);"
        },
        {
          "name": "loadArray",
          "line": 159,
          "signature": "JsonValue loadArray(Common::IInputStream& stream, uint8_t itemType) {"
        },
        {
          "name": "arr",
          "line": 160,
          "signature": "JsonValue arr(JsonValue::ARRAY);"
        },
        {
          "name": "parseBinary",
          "line": 171,
          "signature": "JsonValue parseBinary(Common::IInputStream& stream) {"
        },
        {
          "name": "loadSection",
          "line": 184,
          "signature": "return loadSection(stream);"
        }
      ],
      "constants": []
    },
    "src/Serialization/KVBinaryInputStreamSerializer.h": {
      "path": "src/Serialization/KVBinaryInputStreamSerializer.h",
      "size": 1283,
      "lines": 35,
      "hash": "42ae95cc2d7e9d4b",
      "functions": [],
      "constants": []
    },
    "src/Serialization/KVBinaryOutputStreamSerializer.cpp": {
      "path": "src/Serialization/KVBinaryOutputStreamSerializer.cpp",
      "size": 7310,
      "lines": 251,
      "hash": "1e94c8c58ef997e2",
      "functions": [
        {
          "name": "writePod",
          "line": 31,
          "signature": "void writePod(IOutputStream& s, const T& value) {"
        },
        {
          "name": "packVarint",
          "line": 36,
          "signature": "size_t packVarint(IOutputStream& s, uint8_t type_or, size_t pv) {"
        },
        {
          "name": "sizeof",
          "line": 40,
          "signature": "return sizeof(T);"
        },
        {
          "name": "writeElementName",
          "line": 43,
          "signature": "void writeElementName(IOutputStream& s, Common::StringView name) {"
        },
        {
          "name": "writeArraySize",
          "line": 53,
          "signature": "size_t writeArraySize(IOutputStream& s, size_t val) {"
        }
      ],
      "constants": []
    },
    "src/Serialization/KVBinaryOutputStreamSerializer.h": {
      "path": "src/Serialization/KVBinaryOutputStreamSerializer.h",
      "size": 3250,
      "lines": 99,
      "hash": "9e9c909e83d763fd",
      "functions": [
        {
          "name": "dump",
          "line": 33,
          "signature": "void dump(Common::IOutputStream& target);"
        },
        {
          "name": "writeElementPrefix",
          "line": 63,
          "signature": "void writeElementPrefix(uint8_t type, Common::StringView name);"
        },
        {
          "name": "checkArrayPreamble",
          "line": 64,
          "signature": "void checkArrayPreamble(uint8_t type);"
        },
        {
          "name": "updateState",
          "line": 65,
          "signature": "void updateState(uint8_t type);"
        }
      ],
      "constants": []
    },
    "src/Serialization/MemoryStream.cpp": {
      "path": "src/Serialization/MemoryStream.cpp",
      "size": 866,
      "lines": 19,
      "hash": "61541fd990b8d2ab",
      "functions": [],
      "constants": []
    },
    "src/Serialization/MemoryStream.h": {
      "path": "src/Serialization/MemoryStream.h",
      "size": 1647,
      "lines": 67,
      "hash": "ec4627ad3e692887",
      "functions": [
        {
          "name": "size",
          "line": 48,
          "signature": "size_t size() {"
        },
        {
          "name": "clear",
          "line": 56,
          "signature": "void clear() {"
        }
      ],
      "constants": []
    },
    "src/Serialization/SerializationOverloads.cpp": {
      "path": "src/Serialization/SerializationOverloads.cpp",
      "size": 1747,
      "lines": 47,
      "hash": "f56d3f330f881e8d",
      "functions": [
        {
          "name": "serializeBlockHeight",
          "line": 25,
          "signature": "void serializeBlockHeight(ISerializer& s, uint32_t& blockHeight, Common::StringView name) {"
        },
        {
          "name": "serializeGlobalOutputIndex",
          "line": 42,
          "signature": "void serializeGlobalOutputIndex(ISerializer& s, uint32_t& globalOutputIndex, Common::StringView name) {"
        }
      ],
      "constants": []
    },
    "src/Serialization/SerializationOverloads.h": {
      "path": "src/Serialization/SerializationOverloads.h",
      "size": 8957,
      "lines": 338,
      "hash": "1b5a2a270f5f8231",
      "functions": [
        {
          "name": "serializeContainer",
          "line": 158,
          "signature": "return serializeContainer(value, name, serializer);"
        },
        {
          "name": "serializeContainer",
          "line": 164,
          "signature": "return serializeContainer(value, name, serializer);"
        },
        {
          "name": "serializeSet",
          "line": 245,
          "signature": "return serializeSet(value, name, serializer);"
        },
        {
          "name": "serializeSet",
          "line": 251,
          "signature": "return serializeSet(value, name, serializer);"
        },
        {
          "name": "serializeMap",
          "line": 257,
          "signature": "return serializeMap(value, name, serializer, [&value](size_t size) { value.reserve(size); });"
        },
        {
          "name": "serializeMap",
          "line": 263,
          "signature": "return serializeMap(value, name, serializer, [](size_t size) {});"
        },
        {
          "name": "serializeMap",
          "line": 269,
          "signature": "return serializeMap(value, name, serializer, [](size_t size) {});"
        },
        {
          "name": "serializeMap",
          "line": 275,
          "signature": "return serializeMap(value, name, serializer, [&value](size_t size) { value.reserve(size); });"
        },
        {
          "name": "serializeMap",
          "line": 281,
          "signature": "return serializeMap(value, name, serializer, [](size_t size) {});"
        },
        {
          "name": "serializeMap",
          "line": 287,
          "signature": "return serializeMap(value, name, serializer, [](size_t size) {});"
        },
        {
          "name": "serializeBlockHeight",
          "line": 332,
          "signature": "void serializeBlockHeight(ISerializer & s, uint32_t & blockHeight, Common::StringView name);"
        },
        {
          "name": "serializeGlobalOutputIndex",
          "line": 335,
          "signature": "void serializeGlobalOutputIndex(ISerializer & s, uint32_t & globalOutputIndex, Common::StringView name);"
        }
      ],
      "constants": [
        {
          "name": "blobSize",
          "line": 49,
          "value": "blob.size()"
        }
      ]
    },
    "src/Serialization/SerializationTools.h": {
      "path": "src/Serialization/SerializationTools.h",
      "size": 3704,
      "lines": 135,
      "hash": "d8edb2e207683f11",
      "functions": [
        {
          "name": "getValueAs",
          "line": 32,
          "signature": "T getValueAs(const JsonValue& js) {"
        },
        {
          "name": "loadFromJsonValue",
          "line": 73,
          "signature": "void loadFromJsonValue(T& v, const Common::JsonValue& js) {"
        },
        {
          "name": "s",
          "line": 74,
          "signature": "JsonInputValueSerializer s(js);"
        },
        {
          "name": "loadFromJsonValue",
          "line": 79,
          "signature": "void loadFromJsonValue(std::vector<T>& v, const Common::JsonValue& js) {"
        },
        {
          "name": "loadFromJsonValue",
          "line": 86,
          "signature": "void loadFromJsonValue(std::list<T>& v, const Common::JsonValue& js) {"
        },
        {
          "name": "loadFromJson",
          "line": 98,
          "signature": "bool loadFromJson(T& v, const std::string& buf) {"
        },
        {
          "name": "loadFromBinaryKeyValue",
          "line": 123,
          "signature": "bool loadFromBinaryKeyValue(T& v, const std::string& buf) {"
        },
        {
          "name": "s",
          "line": 126,
          "signature": "KVBinaryInputStreamSerializer s(stream);"
        }
      ],
      "constants": []
    },
    "src/SimpleWallet/PasswordContainer.cpp": {
      "path": "src/SimpleWallet/PasswordContainer.cpp",
      "size": 4851,
      "lines": 245,
      "hash": "fe32a843082126c2",
      "functions": [
        {
          "name": "is_cin_tty",
          "line": 36,
          "signature": "bool is_cin_tty();"
        }
      ],
      "constants": [
        {
          "name": "BACKSPACE",
          "line": 133,
          "value": "8"
        },
        {
          "name": "BACKSPACE",
          "line": 209,
          "value": "127"
        }
      ]
    },
    "src/SimpleWallet/PasswordContainer.h": {
      "path": "src/SimpleWallet/PasswordContainer.h",
      "size": 1496,
      "lines": 49,
      "hash": "1ba9c628392bd381",
      "functions": [
        {
          "name": "clear",
          "line": 34,
          "signature": "void clear();"
        },
        {
          "name": "password",
          "line": 37,
          "signature": "void password(std::string&& val) { m_password = std::move(val); m_empty = false; }"
        },
        {
          "name": "read_password",
          "line": 38,
          "signature": "bool read_password();"
        },
        {
          "name": "read_from_file",
          "line": 41,
          "signature": "bool read_from_file();"
        },
        {
          "name": "read_from_tty",
          "line": 42,
          "signature": "bool read_from_tty();"
        }
      ],
      "constants": [
        {
          "name": "max_password_size",
          "line": 27,
          "value": "1024"
        }
      ]
    },
    "src/SimpleWallet/SimpleWallet.cpp": {
      "path": "src/SimpleWallet/SimpleWallet.cpp",
      "size": 79768,
      "lines": 2137,
      "hash": "12500469da3cae85",
      "functions": [
        {
          "name": "parseUrlAddress",
          "line": 85,
          "signature": "bool parseUrlAddress(const std::string& url, std::string& address, uint16_t& port) {"
        },
        {
          "name": "next",
          "line": 135,
          "signature": "ValueT next() {"
        },
        {
          "name": "parseArguments",
          "line": 165,
          "signature": "bool parseArguments(LoggerRef& logger, const std::vector<std::string> &args) {"
        },
        {
          "name": "buildLoggerConfiguration",
          "line": 281,
          "signature": "JsonValue buildLoggerConfiguration(Level level, const std::string& logfile) {"
        },
        {
          "name": "loggerConfiguration",
          "line": 282,
          "signature": "JsonValue loggerConfiguration(JsonValue::OBJECT);"
        },
        {
          "name": "printListTransfersHeader",
          "line": 417,
          "signature": "void printListTransfersHeader(LoggerRef& logger) {"
        },
        {
          "name": "printListTransfersItem",
          "line": 429,
          "signature": "void printListTransfersItem(LoggerRef& logger, const WalletLegacyTransaction& txInfo, IWalletLegacy& wallet, const Currency& currency) {"
        },
        {
          "name": "writeAddressFile",
          "line": 472,
          "signature": "bool writeAddressFile(const std::string& addressFilename, const std::string& address) {"
        },
        {
          "name": "processServerAliasResponse",
          "line": 483,
          "signature": "bool processServerAliasResponse(const std::string& s, std::string& address) {"
        },
        {
          "name": "splitUrlToHostAndUri",
          "line": 518,
          "signature": "bool splitUrlToHostAndUri(const std::string& aliasUrl, std::string& host, std::string& uri) {"
        },
        {
          "name": "askAliasesTransfersConfirmation",
          "line": 538,
          "signature": "bool askAliasesTransfersConfirmation(const std::map<std::string, std::vector<WalletLegacyTransfer>>& aliases, const Currency& currency) {"
        },
        {
          "name": "processServerFeeAddressResponse",
          "line": 558,
          "signature": "bool processServerFeeAddressResponse(const std::string& response, std::string& fee_address) {"
        },
        {
          "name": "close_wallet",
          "line": 980,
          "signature": "return close_wallet();"
        },
        {
          "name": "httpClient",
          "line": 1173,
          "signature": "HttpClient httpClient(m_dispatcher, m_daemon_host, m_daemon_port);"
        },
        {
          "name": "httpClient",
          "line": 1198,
          "signature": "HttpClient httpClient(m_dispatcher, m_daemon_host, m_daemon_port);"
        },
        {
          "name": "httpClient",
          "line": 1792,
          "signature": "HttpClient httpClient(m_dispatcher, m_daemon_host, m_daemon_port);"
        },
        {
          "name": "cmd",
          "line": 1820,
          "signature": "TransferCommand cmd(m_currency);"
        },
        {
          "name": "main",
          "line": 1954,
          "signature": "int main(int argc, char* argv[]) {"
        }
      ],
      "constants": [
        {
          "name": "EXTENDED_LOGS_FILE",
          "line": 70,
          "value": "\"wallet_details.log\""
        },
        {
          "name": "paymentIDLen",
          "line": 200,
          "value": "64"
        },
        {
          "name": "TIMESTAMP_MAX_WIDTH",
          "line": 410,
          "value": "19"
        },
        {
          "name": "HASH_MAX_WIDTH",
          "line": 411,
          "value": "64"
        },
        {
          "name": "TOTAL_AMOUNT_MAX_WIDTH",
          "line": 412,
          "value": "20"
        },
        {
          "name": "FEE_MAX_WIDTH",
          "line": 413,
          "value": "14"
        },
        {
          "name": "BLOCK_MAX_WIDTH",
          "line": 414,
          "value": "7"
        },
        {
          "name": "UNLOCK_TIME_MAX_WIDTH",
          "line": 415,
          "value": "11"
        },
        {
          "name": "num_of_languages",
          "line": 944,
          "value": "1"
        },
        {
          "name": "mnemonic_phrase_length",
          "line": 945,
          "value": "25"
        },
        {
          "name": "prefix_size",
          "line": 1408,
          "value": "strlen(\"Sig\")"
        }
      ]
    },
    "src/SimpleWallet/SimpleWallet.h": {
      "path": "src/SimpleWallet/SimpleWallet.h",
      "size": 8078,
      "lines": 202,
      "hash": "a2a49b3fcf9b7ab4",
      "functions": [
        {
          "name": "init",
          "line": 52,
          "signature": "bool init(const boost::program_options::variables_map& vm);"
        },
        {
          "name": "deinit",
          "line": 53,
          "signature": "bool deinit();"
        },
        {
          "name": "run",
          "line": 54,
          "signature": "bool run();"
        },
        {
          "name": "stop",
          "line": 55,
          "signature": "void stop();"
        },
        {
          "name": "process_command",
          "line": 57,
          "signature": "bool process_command(const std::vector<std::string> &args);"
        },
        {
          "name": "logger",
          "line": 66,
          "signature": "return logger(Logging::INFO, color ? Logging::GREEN : Logging::DEFAULT);"
        },
        {
          "name": "handle_command_line",
          "line": 75,
          "signature": "void handle_command_line(const boost::program_options::variables_map& vm);"
        },
        {
          "name": "run_console_handler",
          "line": 77,
          "signature": "bool run_console_handler();"
        },
        {
          "name": "new_wallet",
          "line": 79,
          "signature": "bool new_wallet(const std::string &wallet_file, const std::string& password);"
        },
        {
          "name": "new_wallet",
          "line": 80,
          "signature": "bool new_wallet(Crypto::SecretKey &secret_key, Crypto::SecretKey &view_key, const std::string &wallet_file, const std::string& password);"
        },
        {
          "name": "open_wallet",
          "line": 81,
          "signature": "bool open_wallet(const std::string &wallet_file, const std::string& password);"
        },
        {
          "name": "close_wallet",
          "line": 82,
          "signature": "bool close_wallet();"
        },
        {
          "name": "exit",
          "line": 85,
          "signature": "bool exit(const std::vector<std::string> &args);"
        },
        {
          "name": "start_mining",
          "line": 86,
          "signature": "bool start_mining(const std::vector<std::string> &args);"
        },
        {
          "name": "show_dust",
          "line": 87,
          "signature": "bool show_dust(const std::vector<std::string> &args);"
        },
        {
          "name": "stop_mining",
          "line": 88,
          "signature": "bool stop_mining(const std::vector<std::string> &args);"
        },
        {
          "name": "sign_message",
          "line": 90,
          "signature": "bool sign_message(const std::vector<std::string> &args);"
        },
        {
          "name": "verify_signature",
          "line": 91,
          "signature": "bool verify_signature(const std::vector<std::string> &args);"
        },
        {
          "name": "show_incoming_transfers",
          "line": 94,
          "signature": "bool show_incoming_transfers(const std::vector<std::string> &args);"
        },
        {
          "name": "show_payments",
          "line": 95,
          "signature": "bool show_payments(const std::vector<std::string> &args);"
        },
        {
          "name": "show_blockchain_height",
          "line": 96,
          "signature": "bool show_blockchain_height(const std::vector<std::string> &args);"
        },
        {
          "name": "show_num_unlocked_outputs",
          "line": 97,
          "signature": "bool show_num_unlocked_outputs(const std::vector<std::string> &args);"
        },
        {
          "name": "optimize_outputs",
          "line": 98,
          "signature": "bool optimize_outputs(const std::vector<std::string> &args);"
        },
        {
          "name": "get_reserve_proof",
          "line": 99,
          "signature": "bool get_reserve_proof(const std::vector<std::string> &args);"
        },
        {
          "name": "get_tx_proof",
          "line": 100,
          "signature": "bool get_tx_proof(const std::vector<std::string> &args);"
        },
        {
          "name": "optimize_all_outputs",
          "line": 101,
          "signature": "bool optimize_all_outputs(const std::vector<std::string> &args);"
        },
        {
          "name": "listTransfers",
          "line": 102,
          "signature": "bool listTransfers(const std::vector<std::string> &args);"
        },
        {
          "name": "transfer",
          "line": 103,
          "signature": "bool transfer(const std::vector<std::string> &args);"
        },
        {
          "name": "save",
          "line": 105,
          "signature": "bool save(const std::vector<std::string> &args);"
        },
        {
          "name": "reset",
          "line": 106,
          "signature": "bool reset(const std::vector<std::string> &args);"
        },
        {
          "name": "set_log",
          "line": 107,
          "signature": "bool set_log(const std::vector<std::string> &args);"
        },
        {
          "name": "payment_id",
          "line": 108,
          "signature": "bool payment_id(const std::vector<std::string> &args);"
        },
        {
          "name": "ask_wallet_create_if_needed",
          "line": 110,
          "signature": "bool ask_wallet_create_if_needed();"
        },
        {
          "name": "log_incorrect_words",
          "line": 115,
          "signature": "void log_incorrect_words(std::vector<std::string>);"
        },
        {
          "name": "is_valid_mnemonic",
          "line": 116,
          "signature": "bool is_valid_mnemonic(std::string &, Crypto::SecretKey &);"
        }
      ],
      "constants": []
    },
    "src/System/Context.h": {
      "path": "src/System/Context.h",
      "size": 3798,
      "lines": 152,
      "hash": "6ac0c81fb3f93831",
      "functions": [
        {
          "name": "interrupt",
          "line": 66,
          "signature": "void interrupt() {"
        },
        {
          "name": "wait",
          "line": 70,
          "signature": "void wait() {"
        },
        {
          "name": "get",
          "line": 121,
          "signature": "void get() {"
        },
        {
          "name": "interrupt",
          "line": 128,
          "signature": "void interrupt() {"
        },
        {
          "name": "wait",
          "line": 132,
          "signature": "void wait() {"
        }
      ],
      "constants": []
    },
    "src/System/ContextGroup.cpp": {
      "path": "src/System/ContextGroup.cpp",
      "size": 3169,
      "lines": 100,
      "hash": "dfad0acbd8aee026",
      "functions": [],
      "constants": []
    },
    "src/System/ContextGroup.h": {
      "path": "src/System/ContextGroup.h",
      "size": 1354,
      "lines": 42,
      "hash": "710e59ecfa0b6173",
      "functions": [
        {
          "name": "ContextGroup",
          "line": 26,
          "signature": "explicit ContextGroup(Dispatcher& dispatcher);"
        },
        {
          "name": "interrupt",
          "line": 32,
          "signature": "void interrupt();"
        },
        {
          "name": "wait",
          "line": 34,
          "signature": "void wait();"
        }
      ],
      "constants": []
    },
    "src/System/ContextGroupTimeout.cpp": {
      "path": "src/System/ContextGroupTimeout.cpp",
      "size": 1305,
      "lines": 34,
      "hash": "9c9493f9ad669ec8",
      "functions": [],
      "constants": []
    },
    "src/System/ContextGroupTimeout.h": {
      "path": "src/System/ContextGroupTimeout.h",
      "size": 1141,
      "lines": 35,
      "hash": "5a8b9b6a0f52c5cf",
      "functions": [],
      "constants": []
    },
    "src/System/Event.cpp": {
      "path": "src/System/Event.cpp",
      "size": 3691,
      "lines": 147,
      "hash": "06c03458c252fa1b",
      "functions": [
        {
          "name": "InterruptedException",
          "line": 101,
          "signature": "throw InterruptedException();"
        },
        {
          "name": "InterruptedException",
          "line": 141,
          "signature": "throw InterruptedException();"
        }
      ],
      "constants": []
    },
    "src/System/Event.h": {
      "path": "src/System/Event.h",
      "size": 1264,
      "lines": 46,
      "hash": "42c3b8e5ffd8f63c",
      "functions": [
        {
          "name": "Event",
          "line": 27,
          "signature": "explicit Event(Dispatcher& dispatcher);"
        },
        {
          "name": "clear",
          "line": 34,
          "signature": "void clear();"
        },
        {
          "name": "set",
          "line": 35,
          "signature": "void set();"
        },
        {
          "name": "wait",
          "line": 36,
          "signature": "void wait();"
        }
      ],
      "constants": []
    },
    "src/System/EventLock.cpp": {
      "path": "src/System/EventLock.cpp",
      "size": 1076,
      "lines": 36,
      "hash": "d2a07ddbebea1af4",
      "functions": [],
      "constants": []
    },
    "src/System/EventLock.h": {
      "path": "src/System/EventLock.h",
      "size": 1049,
      "lines": 35,
      "hash": "730ea3557662c680",
      "functions": [
        {
          "name": "EventLock",
          "line": 26,
          "signature": "explicit EventLock(Event& event);"
        }
      ],
      "constants": []
    },
    "src/System/InterruptedException.cpp": {
      "path": "src/System/InterruptedException.cpp",
      "size": 922,
      "lines": 23,
      "hash": "3f03473addc4daaf",
      "functions": [],
      "constants": []
    },
    "src/System/InterruptedException.h": {
      "path": "src/System/InterruptedException.h",
      "size": 1055,
      "lines": 32,
      "hash": "85f4de66c75583fe",
      "functions": [],
      "constants": []
    },
    "src/System/Ipv4Address.cpp": {
      "path": "src/System/Ipv4Address.cpp",
      "size": 3694,
      "lines": 126,
      "hash": "f3ca9f5c00f138ea",
      "functions": [
        {
          "name": "readUint8",
          "line": 25,
          "signature": "uint8_t readUint8(const std::string& source, size_t& offset) {"
        }
      ],
      "constants": []
    },
    "src/System/Ipv4Address.h": {
      "path": "src/System/Ipv4Address.h",
      "size": 1295,
      "lines": 41,
      "hash": "93f3ec7ae57878c3",
      "functions": [
        {
          "name": "Ipv4Address",
          "line": 27,
          "signature": "explicit Ipv4Address(uint32_t value);"
        },
        {
          "name": "Ipv4Address",
          "line": 28,
          "signature": "explicit Ipv4Address(const std::string& dottedDecimal);"
        }
      ],
      "constants": []
    },
    "src/System/OperationTimeout.h": {
      "path": "src/System/OperationTimeout.h",
      "size": 1526,
      "lines": 51,
      "hash": "32c7db6ce6f054dc",
      "functions": [],
      "constants": []
    },
    "src/System/RemoteContext.h": {
      "path": "src/System/RemoteContext.h",
      "size": 2934,
      "lines": 103,
      "hash": "c68fac1bf1176ee3",
      "functions": [
        {
          "name": "asyncProcedure",
          "line": 89,
          "signature": "T asyncProcedure() {"
        },
        {
          "name": "guard",
          "line": 90,
          "signature": "NotifyOnDestruction guard(dispatcher, event);"
        },
        {
          "name": "procedure",
          "line": 92,
          "signature": "return procedure();"
        }
      ],
      "constants": []
    },
    "src/System/RemoteEventLock.cpp": {
      "path": "src/System/RemoteEventLock.cpp",
      "size": 1674,
      "lines": 59,
      "hash": "6dbe725bcc5f4000",
      "functions": [],
      "constants": []
    },
    "src/System/RemoteEventLock.h": {
      "path": "src/System/RemoteEventLock.h",
      "size": 1075,
      "lines": 36,
      "hash": "4230a82b70f76fd3",
      "functions": [],
      "constants": []
    },
    "src/System/TcpStream.cpp": {
      "path": "src/System/TcpStream.cpp",
      "size": 2938,
      "lines": 107,
      "hash": "035deff432e4492d",
      "functions": [],
      "constants": []
    },
    "src/System/TcpStream.h": {
      "path": "src/System/TcpStream.h",
      "size": 1480,
      "lines": 47,
      "hash": "ef2d9b02eee1df2d",
      "functions": [
        {
          "name": "TcpStreambuf",
          "line": 30,
          "signature": "explicit TcpStreambuf(TcpConnection& connection);"
        },
        {
          "name": "dumpBuffer",
          "line": 43,
          "signature": "bool dumpBuffer(bool finalize);"
        }
      ],
      "constants": []
    },
    "src/Transfers/BlockchainSynchronizer.cpp": {
      "path": "src/Transfers/BlockchainSynchronizer.cpp",
      "size": 19908,
      "lines": 587,
      "hash": "0df7605a13b5e5ad",
      "functions": [
        {
          "name": "getConsumerSynchronizationState",
          "line": 78,
          "signature": "return getConsumerSynchronizationState(consumer);"
        },
        {
          "name": "setFutureStateIf",
          "line": 167,
          "signature": "return setFutureStateIf(s, [this, s] { return s > m_futureState; });"
        }
      ],
      "constants": []
    },
    "src/Transfers/BlockchainSynchronizer.h": {
      "path": "src/Transfers/BlockchainSynchronizer.h",
      "size": 5043,
      "lines": 147,
      "hash": "9949e72361ccd0c8",
      "functions": [
        {
          "name": "startPoolSync",
          "line": 103,
          "signature": "void startPoolSync();"
        },
        {
          "name": "startBlockchainSync",
          "line": 104,
          "signature": "void startBlockchainSync();"
        },
        {
          "name": "processBlocks",
          "line": 106,
          "signature": "void processBlocks(GetBlocksResponse& response);"
        },
        {
          "name": "updateConsumers",
          "line": 107,
          "signature": "UpdateConsumersResult updateConsumers(const BlockchainInterval& interval, const std::vector<CompleteBlock>& blocks);"
        },
        {
          "name": "doRemoveUnconfirmedTransaction",
          "line": 111,
          "signature": "void doRemoveUnconfirmedTransaction(const Crypto::Hash& transactionHash);"
        },
        {
          "name": "setFutureState",
          "line": 114,
          "signature": "bool setFutureState(State s);"
        },
        {
          "name": "actualizeFutureState",
          "line": 117,
          "signature": "void actualizeFutureState();"
        },
        {
          "name": "workingProcedure",
          "line": 121,
          "signature": "void workingProcedure();"
        },
        {
          "name": "getCommonHistory",
          "line": 123,
          "signature": "GetBlocksRequest getCommonHistory();"
        }
      ],
      "constants": []
    },
    "src/Transfers/CommonTypes.h": {
      "path": "src/Transfers/CommonTypes.h",
      "size": 1306,
      "lines": 44,
      "hash": "4f5224c675da057a",
      "functions": [],
      "constants": []
    },
    "src/Transfers/IBlockchainSynchronizer.h": {
      "path": "src/Transfers/IBlockchainSynchronizer.h",
      "size": 3514,
      "lines": 83,
      "hash": "5f7a6ffc41758294",
      "functions": [
        {
          "name": "synchronizationProgressUpdated",
          "line": 38,
          "signature": "virtual void synchronizationProgressUpdated(uint32_t processedBlockCount, uint32_t totalBlockCount) {}"
        },
        {
          "name": "synchronizationCompleted",
          "line": 39,
          "signature": "virtual void synchronizationCompleted(std::error_code result) {}"
        },
        {
          "name": "onBlocksAdded",
          "line": 59,
          "signature": "virtual void onBlocksAdded(IBlockchainConsumer* consumer, const std::vector<Crypto::Hash>& blockHashes) {}"
        },
        {
          "name": "onBlockchainDetach",
          "line": 60,
          "signature": "virtual void onBlockchainDetach(IBlockchainConsumer* consumer, uint32_t blockIndex) {}"
        },
        {
          "name": "onTransactionDeleteBegin",
          "line": 61,
          "signature": "virtual void onTransactionDeleteBegin(IBlockchainConsumer* consumer, Crypto::Hash transactionHash) {}"
        },
        {
          "name": "onTransactionDeleteEnd",
          "line": 62,
          "signature": "virtual void onTransactionDeleteEnd(IBlockchainConsumer* consumer, Crypto::Hash transactionHash) {}"
        },
        {
          "name": "onTransactionUpdated",
          "line": 63,
          "signature": "virtual void onTransactionUpdated(IBlockchainConsumer* consumer, const Crypto::Hash& transactionHash, const std::vector<ITransfersContainer*>& containers) {}"
        }
      ],
      "constants": []
    },
    "src/Transfers/IObservableImpl.h": {
      "path": "src/Transfers/IObservableImpl.h",
      "size": 1283,
      "lines": 41,
      "hash": "0b27e2352288fcc7",
      "functions": [],
      "constants": []
    },
    "src/Transfers/SynchronizationState.cpp": {
      "path": "src/Transfers/SynchronizationState.cpp",
      "size": 4008,
      "lines": 130,
      "hash": "bd67f173313d29f4",
      "functions": [
        {
          "name": "stream",
          "line": 111,
          "signature": "StdOutputStream stream(os);"
        },
        {
          "name": "stream",
          "line": 117,
          "signature": "StdInputStream stream(in);"
        }
      ],
      "constants": []
    },
    "src/Transfers/SynchronizationState.h": {
      "path": "src/Transfers/SynchronizationState.h",
      "size": 2017,
      "lines": 65,
      "hash": "ef76b88e012c9496",
      "functions": [
        {
          "name": "SynchronizationState",
          "line": 40,
          "signature": "explicit SynchronizationState(const Crypto::Hash& genesisBlockHash) {"
        },
        {
          "name": "detach",
          "line": 47,
          "signature": "void detach(uint32_t height);"
        },
        {
          "name": "addBlocks",
          "line": 48,
          "signature": "void addBlocks(const Crypto::Hash* blockHashes, uint32_t height, uint32_t count);"
        }
      ],
      "constants": []
    },
    "src/Transfers/TransfersConsumer.cpp": {
      "path": "src/Transfers/TransfersConsumer.cpp",
      "size": 20400,
      "lines": 606,
      "hash": "05104517dca60e72",
      "functions": [
        {
          "name": "processTransaction",
          "line": 364,
          "signature": "return processTransaction(unconfirmedBlockInfo, transaction);"
        }
      ],
      "constants": []
    },
    "src/Transfers/TransfersConsumer.h": {
      "path": "src/Transfers/TransfersConsumer.h",
      "size": 4121,
      "lines": 97,
      "hash": "dcf68842a499b066",
      "functions": [
        {
          "name": "removeSubscription",
          "line": 43,
          "signature": "bool removeSubscription(const AccountPublicAddress& address);"
        },
        {
          "name": "getSubscriptions",
          "line": 45,
          "signature": "void getSubscriptions(std::vector<AccountPublicAddress>& subscriptions);"
        },
        {
          "name": "initTransactionPool",
          "line": 47,
          "signature": "void initTransactionPool(const std::unordered_set<Crypto::Hash>& uncommitedTransactions);"
        },
        {
          "name": "addPublicKeysSeen",
          "line": 48,
          "signature": "void addPublicKeysSeen(const Crypto::Hash& transactionHash, const Crypto::PublicKey& outputKey);"
        },
        {
          "name": "forEachSubscription",
          "line": 63,
          "signature": "void forEachSubscription(F action) {"
        },
        {
          "name": "processTransaction",
          "line": 76,
          "signature": "void processTransaction(const TransactionBlockInfo& blockInfo, const ITransactionReader& tx, const PreprocessInfo& info);"
        },
        {
          "name": "updateSyncStart",
          "line": 82,
          "signature": "void updateSyncStart();"
        }
      ],
      "constants": []
    },
    "src/Transfers/TransfersContainer.cpp": {
      "path": "src/Transfers/TransfersContainer.cpp",
      "size": 39431,
      "lines": 1071,
      "hash": "e30798c4c8037189",
      "functions": [
        {
          "name": "serialize",
          "line": 32,
          "signature": "void serialize(TransactionInformation& ti, CryptoNote::ISerializer& s) {"
        },
        {
          "name": "sort",
          "line": 68,
          "signature": "void sort() {"
        },
        {
          "name": "lessTIterator",
          "line": 85,
          "signature": "static bool lessTIterator(const TIterator& it1, const TIterator& it2) {"
        },
        {
          "name": "makeTransferUnlockJob",
          "line": 101,
          "signature": "TransferUnlockJob makeTransferUnlockJob(const TransactionOutputInformationEx& output, uint32_t transactionSpendableAge) {"
        },
        {
          "name": "descriptor",
          "line": 291,
          "signature": "SpentOutputDescriptor descriptor(transfer);"
        },
        {
          "name": "descriptor",
          "line": 328,
          "signature": "SpentOutputDescriptor descriptor(&input.keyImage);"
        },
        {
          "name": "descriptor",
          "line": 440,
          "signature": "SpentOutputDescriptor descriptor(transfer);"
        },
        {
          "name": "updateVisibility",
          "line": 584,
          "signature": "void updateVisibility(C& collection, const T& range, bool visible) {"
        },
        {
          "name": "descriptor",
          "line": 601,
          "signature": "SpentOutputDescriptor descriptor(&keyImage);"
        },
        {
          "name": "doAdvanceHeight",
          "line": 633,
          "signature": "return doAdvanceHeight(height);"
        },
        {
          "name": "getUnlockingTransfers",
          "line": 647,
          "signature": "return getUnlockingTransfers(prevHeight, m_currentHeight);"
        },
        {
          "name": "stream",
          "line": 868,
          "signature": "StdOutputStream stream(os);"
        },
        {
          "name": "stream",
          "line": 883,
          "signature": "StdInputStream stream(in);"
        },
        {
          "name": "isIncluded",
          "line": 962,
          "signature": "return isIncluded(info, state, flags);"
        }
      ],
      "constants": [
        {
          "name": "TRANSFERS_CONTAINER_STORAGE_VERSION",
          "line": 45,
          "value": "1"
        }
      ]
    },
    "src/Transfers/TransfersContainer.h": {
      "path": "src/Transfers/TransfersContainer.h",
      "size": 14883,
      "lines": 391,
      "hash": "aa4ab3b3cbb0b81c",
      "functions": [
        {
          "name": "serialize",
          "line": 61,
          "signature": "void serialize(ISerializer& s) {"
        },
        {
          "name": "assign",
          "line": 80,
          "signature": "void assign(const Crypto::KeyImage* keyImage);"
        },
        {
          "name": "assign",
          "line": 81,
          "signature": "void assign(uint64_t amount, uint32_t globalOutputIndex);"
        },
        {
          "name": "serialize",
          "line": 120,
          "signature": "void serialize(CryptoNote::ISerializer& s) {"
        },
        {
          "name": "serialize",
          "line": 148,
          "signature": "void serialize(ISerializer& s) {"
        },
        {
          "name": "serialize",
          "line": 164,
          "signature": "void serialize(ISerializer& s) {"
        },
        {
          "name": "serialize",
          "line": 178,
          "signature": "void serialize(ISerializer& s) {"
        },
        {
          "name": "deleteUnconfirmedTransaction",
          "line": 204,
          "signature": "bool deleteUnconfirmedTransaction(const Crypto::Hash& transactionHash);"
        },
        {
          "name": "markTransactionConfirmed",
          "line": 205,
          "signature": "bool markTransactionConfirmed(const TransactionBlockInfo& block, const Crypto::Hash& transactionHash, const std::vector<uint32_t>& globalIndices);"
        },
        {
          "name": "detach",
          "line": 207,
          "signature": "void detach(uint32_t height, std::vector<Crypto::Hash>& deletedTransactions, std::vector<TransactionOutputInformation>& lockedTransfers);"
        },
        {
          "name": "addTransaction",
          "line": 354,
          "signature": "void addTransaction(const TransactionBlockInfo& block, const ITransactionReader& tx, std::vector<std::string>&& messages);"
        },
        {
          "name": "addTransactionInputs",
          "line": 357,
          "signature": "bool addTransactionInputs(const TransactionBlockInfo& block, const ITransactionReader& tx);"
        },
        {
          "name": "deleteTransactionTransfers",
          "line": 358,
          "signature": "void deleteTransactionTransfers(const Crypto::Hash& transactionHash);"
        },
        {
          "name": "isIncluded",
          "line": 361,
          "signature": "static bool isIncluded(const TransactionOutputInformationEx& output, uint32_t state, uint32_t flags);"
        },
        {
          "name": "updateTransfersVisibility",
          "line": 362,
          "signature": "void updateTransfersVisibility(const Crypto::KeyImage& keyImage);"
        },
        {
          "name": "addUnlockJob",
          "line": 363,
          "signature": "void addUnlockJob(const TransactionOutputInformationEx& output);"
        },
        {
          "name": "deleteUnlockJob",
          "line": 364,
          "signature": "void deleteUnlockJob(const TransactionOutputInformationEx& output);"
        },
        {
          "name": "copyToSpent",
          "line": 370,
          "signature": "void copyToSpent(const TransactionBlockInfo& block, const ITransactionReader& tx, size_t inputIndex, const TransactionOutputInformationEx& output);"
        }
      ],
      "constants": []
    },
    "src/Transfers/TransfersSubscription.cpp": {
      "path": "src/Transfers/TransfersSubscription.cpp",
      "size": 4000,
      "lines": 106,
      "hash": "b1ae29b32bf0b567",
      "functions": [],
      "constants": []
    },
    "src/Transfers/TransfersSubscription.h": {
      "path": "src/Transfers/TransfersSubscription.h",
      "size": 2062,
      "lines": 51,
      "hash": "69dc4ebad4f91bc8",
      "functions": [
        {
          "name": "getSyncStart",
          "line": 30,
          "signature": "SynchronizationStart getSyncStart();"
        },
        {
          "name": "onBlockchainDetach",
          "line": 31,
          "signature": "void onBlockchainDetach(uint32_t height);"
        },
        {
          "name": "onError",
          "line": 32,
          "signature": "void onError(const std::error_code& ec, uint32_t height);"
        },
        {
          "name": "advanceHeight",
          "line": 33,
          "signature": "bool advanceHeight(uint32_t height);"
        },
        {
          "name": "deleteUnconfirmedTransaction",
          "line": 38,
          "signature": "void deleteUnconfirmedTransaction(const Crypto::Hash& transactionHash);"
        },
        {
          "name": "markTransactionConfirmed",
          "line": 39,
          "signature": "void markTransactionConfirmed(const TransactionBlockInfo& block, const Crypto::Hash& transactionHash, const std::vector<uint32_t>& globalIndices);"
        }
      ],
      "constants": []
    },
    "src/Transfers/TransfersSynchronizer.cpp": {
      "path": "src/Transfers/TransfersSynchronizer.cpp",
      "size": 11005,
      "lines": 343,
      "hash": "f3fdd66b93455b2c",
      "functions": [
        {
          "name": "stream",
          "line": 164,
          "signature": "StdOutputStream stream(os);"
        },
        {
          "name": "setObjectState",
          "line": 218,
          "signature": "void setObjectState(IStreamSerializable& obj, const std::string& state) {"
        },
        {
          "name": "inputStream",
          "line": 228,
          "signature": "StdInputStream inputStream(is);"
        }
      ],
      "constants": [
        {
          "name": "TRANSFERS_STORAGE_ARCHIVE_VERSION",
          "line": 31,
          "value": "0"
        }
      ]
    },
    "src/Transfers/TransfersSynchronizer.h": {
      "path": "src/Transfers/TransfersSynchronizer.h",
      "size": 3999,
      "lines": 90,
      "hash": "7bd7f0dc87d39fc0",
      "functions": [
        {
          "name": "initTransactionPool",
          "line": 45,
          "signature": "void initTransactionPool(const std::unordered_set<Crypto::Hash>& uncommitedTransactions);"
        },
        {
          "name": "subscribeConsumerNotifications",
          "line": 54,
          "signature": "void subscribeConsumerNotifications(const Crypto::PublicKey& viewPublicKey, ITransfersSynchronizerObserver* observer);"
        },
        {
          "name": "unsubscribeConsumerNotifications",
          "line": 55,
          "signature": "void unsubscribeConsumerNotifications(const Crypto::PublicKey& viewPublicKey, ITransfersSynchronizerObserver* observer);"
        },
        {
          "name": "addPublicKeysSeen",
          "line": 56,
          "signature": "void addPublicKeysSeen(const AccountPublicAddress& acc, const Crypto::Hash& transactionHash, const Crypto::PublicKey& outputKey);"
        }
      ],
      "constants": []
    },
    "src/Transfers/TypeHelpers.h": {
      "path": "src/Transfers/TypeHelpers.h",
      "size": 1444,
      "lines": 44,
      "hash": "4270ebe3caaab230",
      "functions": [],
      "constants": []
    },
    "src/Wallet/IFusionManager.h": {
      "path": "src/Wallet/IFusionManager.h",
      "size": 1443,
      "lines": 40,
      "hash": "6a9abe1e7535de2d",
      "functions": [],
      "constants": []
    },
    "src/Wallet/LegacyKeysImporter.cpp": {
      "path": "src/Wallet/LegacyKeysImporter.cpp",
      "size": 3381,
      "lines": 101,
      "hash": "bbeed8d557a404e9",
      "functions": [
        {
          "name": "serialize",
          "line": 43,
          "signature": "void serialize(CryptoNote::ISerializer& s) {"
        },
        {
          "name": "verify_keys",
          "line": 49,
          "signature": "bool verify_keys(const SecretKey& sec, const PublicKey& expected_pub) {"
        },
        {
          "name": "loadKeysFromFile",
          "line": 55,
          "signature": "void loadKeysFromFile(const std::string& filename, const std::string& password, CryptoNote::AccountBase& account) {"
        },
        {
          "name": "importLegacyKeys",
          "line": 89,
          "signature": "void importLegacyKeys(const std::string& legacyKeysFilename, const std::string& password, std::ostream& destination) {"
        }
      ],
      "constants": []
    },
    "src/Wallet/LegacyKeysImporter.h": {
      "path": "src/Wallet/LegacyKeysImporter.h",
      "size": 1060,
      "lines": 28,
      "hash": "84ed11d35ab0d667",
      "functions": [
        {
          "name": "importLegacyKeys",
          "line": 25,
          "signature": "void importLegacyKeys(const std::string& legacyKeysFilename, const std::string& password, std::ostream& destination);"
        }
      ],
      "constants": []
    },
    "src/Wallet/PoolRpcServer.cpp": {
      "path": "src/Wallet/PoolRpcServer.cpp",
      "size": 17879,
      "lines": 432,
      "hash": "048615bcd908db1f",
      "functions": [
        {
          "name": "JsonRpcError",
          "line": 134,
          "signature": "throw JsonRpcError(errMethodNotFound);"
        }
      ],
      "constants": []
    },
    "src/Wallet/PoolRpcServer.h": {
      "path": "src/Wallet/PoolRpcServer.h",
      "size": 4242,
      "lines": 92,
      "hash": "aabd8f27fccedea2",
      "functions": [
        {
          "name": "init_options",
          "line": 48,
          "signature": "static void init_options(boost::program_options::options_description& desc);"
        },
        {
          "name": "init",
          "line": 49,
          "signature": "bool init(const boost::program_options::variables_map& vm);"
        },
        {
          "name": "run",
          "line": 51,
          "signature": "bool run();"
        },
        {
          "name": "send_stop_signal",
          "line": 52,
          "signature": "void send_stop_signal();"
        },
        {
          "name": "on_getbalance",
          "line": 64,
          "signature": "bool on_getbalance(const wallet_rpc::COMMAND_RPC_GET_BALANCE::request& req, wallet_rpc::COMMAND_RPC_GET_BALANCE::response& res);"
        },
        {
          "name": "on_create_integrated",
          "line": 65,
          "signature": "bool on_create_integrated(const wallet_rpc::COMMAND_RPC_CREATE_INTEGRATED::request& req, wallet_rpc::COMMAND_RPC_CREATE_INTEGRATED::response& res);"
        },
        {
          "name": "on_transfer",
          "line": 66,
          "signature": "bool on_transfer(const wallet_rpc::COMMAND_RPC_TRANSFER::request& req, wallet_rpc::COMMAND_RPC_TRANSFER::response& res);"
        },
        {
          "name": "on_store",
          "line": 67,
          "signature": "bool on_store(const wallet_rpc::COMMAND_RPC_STORE::request& req, wallet_rpc::COMMAND_RPC_STORE::response& res);"
        },
        {
          "name": "on_get_messages",
          "line": 68,
          "signature": "bool on_get_messages(const wallet_rpc::COMMAND_RPC_GET_MESSAGES::request& req, wallet_rpc::COMMAND_RPC_GET_MESSAGES::response& res);"
        },
        {
          "name": "on_get_payments",
          "line": 69,
          "signature": "bool on_get_payments(const wallet_rpc::COMMAND_RPC_GET_PAYMENTS::request& req, wallet_rpc::COMMAND_RPC_GET_PAYMENTS::response& res);"
        },
        {
          "name": "on_get_transfers",
          "line": 70,
          "signature": "bool on_get_transfers(const wallet_rpc::COMMAND_RPC_GET_TRANSFERS::request& req, wallet_rpc::COMMAND_RPC_GET_TRANSFERS::response& res);"
        },
        {
          "name": "on_get_height",
          "line": 71,
          "signature": "bool on_get_height(const wallet_rpc::COMMAND_RPC_GET_HEIGHT::request& req, wallet_rpc::COMMAND_RPC_GET_HEIGHT::response& res);"
        },
        {
          "name": "on_get_outputs",
          "line": 72,
          "signature": "bool on_get_outputs(const wallet_rpc::COMMAND_RPC_GET_OUTPUTS::request& req, wallet_rpc::COMMAND_RPC_GET_OUTPUTS::response& res);"
        },
        {
          "name": "on_optimize",
          "line": 73,
          "signature": "bool on_optimize(const wallet_rpc::COMMAND_RPC_OPTIMIZE::request& req, wallet_rpc::COMMAND_RPC_OPTIMIZE::response& res);"
        },
        {
          "name": "on_reset",
          "line": 74,
          "signature": "bool on_reset(const wallet_rpc::COMMAND_RPC_RESET::request& req, wallet_rpc::COMMAND_RPC_RESET::response& res);"
        },
        {
          "name": "handle_command_line",
          "line": 76,
          "signature": "bool handle_command_line(const boost::program_options::variables_map& vm);"
        }
      ],
      "constants": []
    },
    "src/Wallet/WalletAsyncContextCounter.cpp": {
      "path": "src/Wallet/WalletAsyncContextCounter.cpp",
      "size": 1377,
      "lines": 41,
      "hash": "ad1879faefa0412f",
      "functions": [],
      "constants": []
    },
    "src/Wallet/WalletAsyncContextCounter.h": {
      "path": "src/Wallet/WalletAsyncContextCounter.h",
      "size": 1308,
      "lines": 44,
      "hash": "4fc151bbb622459b",
      "functions": [
        {
          "name": "addAsyncContext",
          "line": 31,
          "signature": "void addAsyncContext();"
        },
        {
          "name": "delAsyncContext",
          "line": 32,
          "signature": "void delAsyncContext();"
        },
        {
          "name": "waitAsyncContextsFinish",
          "line": 35,
          "signature": "void waitAsyncContextsFinish();"
        }
      ],
      "constants": []
    },
    "src/Wallet/WalletErrors.cpp": {
      "path": "src/Wallet/WalletErrors.cpp",
      "size": 965,
      "lines": 27,
      "hash": "007d67266d337cd8",
      "functions": [],
      "constants": []
    },
    "src/Wallet/WalletErrors.h": {
      "path": "src/Wallet/WalletErrors.h",
      "size": 5700,
      "lines": 149,
      "hash": "32e6f6838db888a8",
      "functions": [],
      "constants": []
    },
    "src/Wallet/WalletGreen.cpp": {
      "path": "src/Wallet/WalletGreen.cpp",
      "size": 158065,
      "lines": 4612,
      "hash": "9fa382c46a47991a",
      "functions": [
        {
          "name": "serializer",
          "line": 660,
          "signature": "BinaryInputStreamSerializer serializer(stream);"
        },
        {
          "name": "outputStream",
          "line": 678,
          "signature": "StringOutputStream outputStream(serializedKeys);"
        },
        {
          "name": "serializer",
          "line": 679,
          "signature": "BinaryOutputStreamSerializer serializer(outputStream);"
        },
        {
          "name": "getObjectHash",
          "line": 878,
          "signature": "return getObjectHash(pair.second);"
        },
        {
          "name": "stream",
          "line": 1114,
          "signature": "StdInputStream stream(walletFileStream);"
        },
        {
          "name": "suffixSerializer",
          "line": 1168,
          "signature": "BinaryInputStreamSerializer suffixSerializer(suffixStream);"
        },
        {
          "name": "suffixSerializer",
          "line": 1253,
          "signature": "BinaryOutputStreamSerializer suffixSerializer(suffixStream);"
        },
        {
          "name": "doCreateAddress",
          "line": 1592,
          "signature": "return doCreateAddress(spendKey.publicKey, spendKey.secretKey, creationTimestamp);"
        },
        {
          "name": "doCreateAddress",
          "line": 1603,
          "signature": "return doCreateAddress(spendPublicKey, spendSecretKey, creationTimestamp);"
        },
        {
          "name": "doCreateAddress",
          "line": 1613,
          "signature": "return doCreateAddress(spendPublicKey, NULL_SECRET_KEY, creationTimestamp);"
        },
        {
          "name": "doCreateAddressList",
          "line": 1633,
          "signature": "return doCreateAddressList(addressDataList);"
        },
        {
          "name": "doTransfer",
          "line": 1978,
          "signature": "return doTransfer(transactionParameters, transactionSK);"
        },
        {
          "name": "validateSaveAndSendTransaction",
          "line": 2082,
          "signature": "return validateSaveAndSendTransaction(*preparedTransaction.transaction, preparedTransaction.destinations, false, true);"
        },
        {
          "name": "getCurrentTimestampAdjusted",
          "line": 2395,
          "signature": "return getCurrentTimestampAdjusted();"
        },
        {
          "name": "eraseTransfers",
          "line": 2695,
          "signature": "return eraseTransfers(transactionId, firstTransferIdx, [&address, eraseOutputTransfers](bool isOutput, const std::string &transferAddress) {"
        },
        {
          "name": "eraseTransfers",
          "line": 2704,
          "signature": "return eraseTransfers(transactionId, firstTransferIdx, [this, &knownAddresses, eraseOutputTransfers](bool isOutput, const std::string &transferAddress) {"
        },
        {
          "name": "getTransactionsInBlocks",
          "line": 3131,
          "signature": "return getTransactionsInBlocks(blockIndex, count);"
        },
        {
          "name": "getDepositsInBlocks",
          "line": 3149,
          "signature": "return getDepositsInBlocks(blockIndex, count);"
        },
        {
          "name": "getTransactionsInBlocks",
          "line": 3157,
          "signature": "return getTransactionsInBlocks(blockIndex, count);"
        },
        {
          "name": "getDepositsInBlocks",
          "line": 3165,
          "signature": "return getDepositsInBlocks(blockIndex, count);"
        },
        {
          "name": "insertDeposit",
          "line": 3446,
          "signature": "return insertDeposit(deposit, depositOutput.outputInTransaction, depositOutput.transactionHash);"
        },
        {
          "name": "getWalletRecord",
          "line": 3864,
          "signature": "return getWalletRecord(pubAddr.spendPublicKey);"
        },
        {
          "name": "parseAccountAddressString",
          "line": 4425,
          "signature": "return parseAccountAddressString(changeDestinationAddress, m_currency);"
        },
        {
          "name": "parseAccountAddressString",
          "line": 4434,
          "signature": "return parseAccountAddressString(sourceAddresses[0], m_currency);"
        }
      ],
      "constants": [
        {
          "name": "MAX_FUSION_OUTPUT_COUNT",
          "line": 3941,
          "value": "8"
        }
      ]
    },
    "src/Wallet/WalletGreen.h": {
      "path": "src/Wallet/WalletGreen.h",
      "size": 22509,
      "lines": 430,
      "hash": "e1a70b5ee153219d",
      "functions": [
        {
          "name": "insertDeposit",
          "line": 123,
          "signature": "DepositId insertDeposit(const Deposit &deposit, size_t depositIndexInTransaction, const Crypto::Hash &transactionHash);"
        },
        {
          "name": "doShutdown",
          "line": 139,
          "signature": "void doShutdown();"
        },
        {
          "name": "clearCaches",
          "line": 140,
          "signature": "void clearCaches(bool clearTransactions, bool clearCachedData);"
        },
        {
          "name": "clearCacheAndShutdown",
          "line": 141,
          "signature": "void clearCacheAndShutdown();"
        },
        {
          "name": "convertAndLoadWalletFile",
          "line": 142,
          "signature": "void convertAndLoadWalletFile(const std::string &path, std::ifstream &&walletFileStream);"
        },
        {
          "name": "getTxSize",
          "line": 143,
          "signature": "size_t getTxSize(const TransactionParameters &sendingTransaction);"
        },
        {
          "name": "decryptKeyPair",
          "line": 145,
          "signature": "static void decryptKeyPair(const EncryptedWalletRecord& cipher, Crypto::PublicKey& publicKey, Crypto::SecretKey& secretKey, uint64_t& creationTimestamp, const Crypto::chacha8_key& key);"
        },
        {
          "name": "encryptKeyPair",
          "line": 149,
          "signature": "static EncryptedWalletRecord encryptKeyPair(const Crypto::PublicKey& publicKey, const Crypto::SecretKey& secretKey, uint64_t creationTimestamp, const Crypto::chacha8_key& key, const Crypto::chacha8_iv& iv);"
        },
        {
          "name": "incIv",
          "line": 151,
          "signature": "static void incIv(Crypto::chacha8_iv& iv);"
        },
        {
          "name": "incNextIv",
          "line": 152,
          "signature": "void incNextIv();"
        },
        {
          "name": "initWithKeys",
          "line": 153,
          "signature": "void initWithKeys(const std::string& path, const std::string& password, const Crypto::PublicKey& viewPublicKey, const Crypto::SecretKey& viewSecretKey);"
        },
        {
          "name": "scanHeightToTimestamp",
          "line": 158,
          "signature": "uint64_t scanHeightToTimestamp(const uint32_t scanHeight);"
        },
        {
          "name": "getCurrentTimestampAdjusted",
          "line": 159,
          "signature": "uint64_t getCurrentTimestampAdjusted();"
        },
        {
          "name": "transactionUpdated",
          "line": 215,
          "signature": "void transactionUpdated(TransactionInformation transactionInfo, const std::vector<ContainerAmounts> &containerAmountsList);"
        },
        {
          "name": "transactionDeleted",
          "line": 218,
          "signature": "void transactionDeleted(ITransfersSubscription *object, const Crypto::Hash &transactionHash);"
        },
        {
          "name": "onSynchronizationProgressUpdated",
          "line": 223,
          "signature": "void onSynchronizationProgressUpdated(uint32_t processedBlockCount, uint32_t totalBlockCount);"
        },
        {
          "name": "onSynchronizationCompleted",
          "line": 224,
          "signature": "void onSynchronizationCompleted();"
        },
        {
          "name": "blocksAdded",
          "line": 227,
          "signature": "void blocksAdded(const std::vector<Crypto::Hash> &blockHashes);"
        },
        {
          "name": "blocksRollback",
          "line": 230,
          "signature": "void blocksRollback(uint32_t blockIndex);"
        },
        {
          "name": "transactionDeleteBegin",
          "line": 233,
          "signature": "void transactionDeleteBegin(Crypto::Hash transactionHash);"
        },
        {
          "name": "transactionDeleteEnd",
          "line": 236,
          "signature": "void transactionDeleteEnd(Crypto::Hash transactionHash);"
        },
        {
          "name": "updateBalance",
          "line": 242,
          "signature": "void updateBalance(CryptoNote::ITransfersContainer *container);"
        },
        {
          "name": "unlockBalances",
          "line": 243,
          "signature": "void unlockBalances(uint32_t height);"
        },
        {
          "name": "pushEvent",
          "line": 254,
          "signature": "void pushEvent(const WalletEvent &event);"
        },
        {
          "name": "doTransfer",
          "line": 282,
          "signature": "size_t doTransfer(const TransactionParameters &transactionParameters, Crypto::SecretKey &transactionSK);"
        },
        {
          "name": "splitAmount",
          "line": 301,
          "signature": "ReceiverAmounts splitAmount(uint64_t amount, const AccountPublicAddress &destination, uint64_t dustThreshold);"
        },
        {
          "name": "sendTransaction",
          "line": 306,
          "signature": "void sendTransaction(const CryptoNote::Transaction &cryptoNoteTransaction);"
        },
        {
          "name": "validateSaveAndSendTransaction",
          "line": 307,
          "signature": "size_t validateSaveAndSendTransaction(const ITransactionReader &transaction, const std::vector<WalletTransfer> &destinations, bool isFusion, bool send);"
        },
        {
          "name": "insertBlockchainTransaction",
          "line": 309,
          "signature": "size_t insertBlockchainTransaction(const TransactionInformation &info, int64_t txBalance);"
        },
        {
          "name": "insertOutgoingTransactionAndPushEvent",
          "line": 310,
          "signature": "size_t insertOutgoingTransactionAndPushEvent(const Crypto::Hash &transactionHash, uint64_t fee, const BinaryArray &extra, uint64_t unlockTimestamp);"
        },
        {
          "name": "updateTransactionStateAndPushEvent",
          "line": 311,
          "signature": "void updateTransactionStateAndPushEvent(size_t transactionId, WalletTransactionState state);"
        },
        {
          "name": "updateWalletTransactionInfo",
          "line": 312,
          "signature": "bool updateWalletTransactionInfo(size_t transactionId, const CryptoNote::TransactionInformation &info, int64_t totalAmount);"
        },
        {
          "name": "updateWalletDepositInfo",
          "line": 313,
          "signature": "bool updateWalletDepositInfo(size_t depositId, const CryptoNote::Deposit &info);"
        },
        {
          "name": "updateAddressTransfers",
          "line": 320,
          "signature": "bool updateAddressTransfers(size_t transactionId, size_t firstTransferIdx, const std::string &address, int64_t knownAmount, int64_t targetAmount);"
        },
        {
          "name": "appendTransfer",
          "line": 323,
          "signature": "void appendTransfer(size_t transactionId, size_t firstTransferIdx, const std::string &address, int64_t amount);"
        },
        {
          "name": "adjustTransfer",
          "line": 324,
          "signature": "bool adjustTransfer(size_t transactionId, size_t firstTransferIdx, const std::string &address, int64_t amount);"
        },
        {
          "name": "eraseTransfersByAddress",
          "line": 326,
          "signature": "bool eraseTransfersByAddress(size_t transactionId, size_t firstTransferIdx, const std::string &address, bool eraseOutputTransfers);"
        },
        {
          "name": "eraseForeignTransfers",
          "line": 327,
          "signature": "bool eraseForeignTransfers(size_t transactionId, size_t firstTransferIdx, const std::unordered_set<std::string> &knownAddresses, bool eraseOutputTransfers);"
        },
        {
          "name": "pushBackOutgoingTransfers",
          "line": 328,
          "signature": "void pushBackOutgoingTransfers(size_t txId, const std::vector<WalletTransfer> &destinations);"
        },
        {
          "name": "insertUnlockTransactionJob",
          "line": 329,
          "signature": "void insertUnlockTransactionJob(const Crypto::Hash &transactionHash, uint32_t blockHeight, CryptoNote::ITransfersContainer *container);"
        },
        {
          "name": "deleteUnlockTransactionJob",
          "line": 330,
          "signature": "void deleteUnlockTransactionJob(const Crypto::Hash &transactionHash);"
        },
        {
          "name": "startBlockchainSynchronizer",
          "line": 331,
          "signature": "void startBlockchainSynchronizer();"
        },
        {
          "name": "stopBlockchainSynchronizer",
          "line": 332,
          "signature": "void stopBlockchainSynchronizer();"
        },
        {
          "name": "addUnconfirmedTransaction",
          "line": 333,
          "signature": "void addUnconfirmedTransaction(const ITransactionReader &transaction);"
        },
        {
          "name": "removeUnconfirmedTransaction",
          "line": 334,
          "signature": "void removeUnconfirmedTransaction(const Crypto::Hash &transactionHash);"
        },
        {
          "name": "initTransactionPool",
          "line": 335,
          "signature": "void initTransactionPool();"
        },
        {
          "name": "loadAndDecryptContainerData",
          "line": 336,
          "signature": "static void loadAndDecryptContainerData(ContainerStorage& storage, const Crypto::chacha8_key& key, BinaryArray& containerData);"
        },
        {
          "name": "encryptAndSaveContainerData",
          "line": 337,
          "signature": "static void encryptAndSaveContainerData(ContainerStorage& storage, const Crypto::chacha8_key& key, const void* containerData, size_t containerDataSize);"
        },
        {
          "name": "loadWalletCache",
          "line": 338,
          "signature": "void loadWalletCache(std::unordered_set<Crypto::PublicKey>& addedKeys, std::unordered_set<Crypto::PublicKey>& deletedKeys, std::string& extra);"
        },
        {
          "name": "copyContainerStorageKeys",
          "line": 340,
          "signature": "void copyContainerStorageKeys(ContainerStorage& src, const Crypto::chacha8_key& srcKey, ContainerStorage& dst, const Crypto::chacha8_key& dstKey);"
        },
        {
          "name": "copyContainerStoragePrefix",
          "line": 341,
          "signature": "static void copyContainerStoragePrefix(ContainerStorage& src, const Crypto::chacha8_key& srcKey, ContainerStorage& dst, const Crypto::chacha8_key& dstKey);"
        },
        {
          "name": "deleteOrphanTransactions",
          "line": 343,
          "signature": "void deleteOrphanTransactions(const std::unordered_set<Crypto::PublicKey>& deletedKeys);"
        },
        {
          "name": "saveWalletCache",
          "line": 344,
          "signature": "void saveWalletCache(ContainerStorage& storage, const Crypto::chacha8_key& key, WalletSaveLevel saveLevel, const std::string& extra);"
        },
        {
          "name": "loadSpendKeys",
          "line": 345,
          "signature": "void loadSpendKeys();"
        },
        {
          "name": "loadContainerStorage",
          "line": 346,
          "signature": "void loadContainerStorage(const std::string& path);"
        },
        {
          "name": "subscribeWallets",
          "line": 348,
          "signature": "void subscribeWallets();"
        },
        {
          "name": "decomposeFusionOutputs",
          "line": 353,
          "signature": "static ReceiverAmounts decomposeFusionOutputs(const AccountPublicAddress &address, uint64_t inputsAmount);"
        },
        {
          "name": "initBlockchain",
          "line": 377,
          "signature": "void initBlockchain(const Crypto::PublicKey& viewPublicKey);"
        },
        {
          "name": "getViewKeyKnownBlocks",
          "line": 378,
          "signature": "void getViewKeyKnownBlocks(const Crypto::PublicKey &viewPublicKey);"
        },
        {
          "name": "deleteContainerFromUnlockTransactionJobs",
          "line": 382,
          "signature": "void deleteContainerFromUnlockTransactionJobs(const ITransfersContainer *container);"
        },
        {
          "name": "deleteFromUncommitedTransactions",
          "line": 384,
          "signature": "void deleteFromUncommitedTransactions(const std::vector<size_t> &deletedTransactions);"
        }
      ],
      "constants": []
    },
    "src/Wallet/WalletIndices.h": {
      "path": "src/Wallet/WalletIndices.h",
      "size": 6096,
      "lines": 155,
      "hash": "46ec2a59340853b6",
      "functions": [],
      "constants": [
        {
          "name": "ACCOUNT_CREATE_TIME_ACCURACY",
          "line": 40,
          "value": "60 * 60 * 24"
        }
      ]
    },
    "src/Wallet/WalletRpcServer.cpp": {
      "path": "src/Wallet/WalletRpcServer.cpp",
      "size": 24232,
      "lines": 572,
      "hash": "81bd66c7153d9fc7",
      "functions": [
        {
          "name": "JsonRpcError",
          "line": 147,
          "signature": "throw JsonRpcError(errMethodNotFound);"
        }
      ],
      "constants": [
        {
          "name": "MAX_FUSION_OUTPUT_COUNT",
          "line": 359,
          "value": "8"
        }
      ]
    },
    "src/Wallet/WalletRpcServer.h": {
      "path": "src/Wallet/WalletRpcServer.h",
      "size": 4817,
      "lines": 96,
      "hash": "81494d860647dd3a",
      "functions": [
        {
          "name": "init_options",
          "line": 48,
          "signature": "static void init_options(boost::program_options::options_description& desc);"
        },
        {
          "name": "init",
          "line": 49,
          "signature": "bool init(const boost::program_options::variables_map& vm);"
        },
        {
          "name": "run",
          "line": 51,
          "signature": "bool run();"
        },
        {
          "name": "send_stop_signal",
          "line": 52,
          "signature": "void send_stop_signal();"
        },
        {
          "name": "on_getbalance",
          "line": 64,
          "signature": "bool on_getbalance(const wallet_rpc::COMMAND_RPC_GET_BALANCE::request& req, wallet_rpc::COMMAND_RPC_GET_BALANCE::response& res);"
        },
        {
          "name": "on_create_integrated",
          "line": 65,
          "signature": "bool on_create_integrated(const wallet_rpc::COMMAND_RPC_CREATE_INTEGRATED::request& req, wallet_rpc::COMMAND_RPC_CREATE_INTEGRATED::response& res);"
        },
        {
          "name": "on_transfer",
          "line": 66,
          "signature": "bool on_transfer(const wallet_rpc::COMMAND_RPC_TRANSFER::request& req, wallet_rpc::COMMAND_RPC_TRANSFER::response& res);"
        },
        {
          "name": "on_store",
          "line": 67,
          "signature": "bool on_store(const wallet_rpc::COMMAND_RPC_STORE::request& req, wallet_rpc::COMMAND_RPC_STORE::response& res);"
        },
        {
          "name": "on_get_messages",
          "line": 68,
          "signature": "bool on_get_messages(const wallet_rpc::COMMAND_RPC_GET_MESSAGES::request& req, wallet_rpc::COMMAND_RPC_GET_MESSAGES::response& res);"
        },
        {
          "name": "on_get_payments",
          "line": 69,
          "signature": "bool on_get_payments(const wallet_rpc::COMMAND_RPC_GET_PAYMENTS::request& req, wallet_rpc::COMMAND_RPC_GET_PAYMENTS::response& res);"
        },
        {
          "name": "on_get_transfers",
          "line": 70,
          "signature": "bool on_get_transfers(const wallet_rpc::COMMAND_RPC_GET_TRANSFERS::request& req, wallet_rpc::COMMAND_RPC_GET_TRANSFERS::response& res);"
        },
        {
          "name": "on_get_tx_proof",
          "line": 71,
          "signature": "bool on_get_tx_proof(const wallet_rpc::COMMAND_RPC_GET_TX_PROOF::request& req, wallet_rpc::COMMAND_RPC_GET_TX_PROOF::response& res);"
        },
        {
          "name": "on_get_reserve_proof",
          "line": 72,
          "signature": "bool on_get_reserve_proof(const wallet_rpc::COMMAND_RPC_GET_BALANCE_PROOF::request& req, wallet_rpc::COMMAND_RPC_GET_BALANCE_PROOF::response& res);"
        },
        {
          "name": "on_get_height",
          "line": 73,
          "signature": "bool on_get_height(const wallet_rpc::COMMAND_RPC_GET_HEIGHT::request& req, wallet_rpc::COMMAND_RPC_GET_HEIGHT::response& res);"
        },
        {
          "name": "on_get_outputs",
          "line": 74,
          "signature": "bool on_get_outputs(const wallet_rpc::COMMAND_RPC_GET_OUTPUTS::request& req, wallet_rpc::COMMAND_RPC_GET_OUTPUTS::response& res);"
        },
        {
          "name": "on_optimize",
          "line": 75,
          "signature": "bool on_optimize(const wallet_rpc::COMMAND_RPC_OPTIMIZE::request& req, wallet_rpc::COMMAND_RPC_OPTIMIZE::response& res);"
        },
        {
          "name": "on_estimate_fusion",
          "line": 76,
          "signature": "bool on_estimate_fusion(const wallet_rpc::COMMAND_RPC_ESTIMATE_FUSION::request& req, wallet_rpc::COMMAND_RPC_ESTIMATE_FUSION::response& res);"
        },
        {
          "name": "on_send_fusion",
          "line": 77,
          "signature": "bool on_send_fusion(const wallet_rpc::COMMAND_RPC_SEND_FUSION::request& req, wallet_rpc::COMMAND_RPC_SEND_FUSION::response& res);"
        },
        {
          "name": "on_reset",
          "line": 78,
          "signature": "bool on_reset(const wallet_rpc::COMMAND_RPC_RESET::request& req, wallet_rpc::COMMAND_RPC_RESET::response& res);"
        },
        {
          "name": "handle_command_line",
          "line": 80,
          "signature": "bool handle_command_line(const boost::program_options::variables_map& vm);"
        }
      ],
      "constants": []
    },
    "src/Wallet/WalletRpcServerCommandsDefinitions.h": {
      "path": "src/Wallet/WalletRpcServerCommandsDefinitions.h",
      "size": 8097,
      "lines": 402,
      "hash": "0b59372f61e57d82",
      "functions": [
        {
          "name": "serialize",
          "line": 46,
          "signature": "void serialize(ISerializer& s) {"
        },
        {
          "name": "serialize",
          "line": 61,
          "signature": "void serialize(ISerializer& s) {"
        },
        {
          "name": "serialize",
          "line": 72,
          "signature": "void serialize(ISerializer& s) {"
        },
        {
          "name": "serialize",
          "line": 90,
          "signature": "void serialize(ISerializer& s) {"
        },
        {
          "name": "serialize",
          "line": 106,
          "signature": "void serialize(ISerializer& s) {"
        },
        {
          "name": "serialize",
          "line": 126,
          "signature": "void serialize(ISerializer& s) {"
        },
        {
          "name": "serialize",
          "line": 142,
          "signature": "void serialize(ISerializer& s) {"
        },
        {
          "name": "serialize",
          "line": 165,
          "signature": "void serialize(ISerializer& s) {"
        },
        {
          "name": "serialize",
          "line": 175,
          "signature": "void serialize(ISerializer& s) {"
        },
        {
          "name": "serialize",
          "line": 189,
          "signature": "void serialize(ISerializer& s) {"
        },
        {
          "name": "serialize",
          "line": 203,
          "signature": "void serialize(ISerializer& s) {"
        },
        {
          "name": "serialize",
          "line": 212,
          "signature": "void serialize(ISerializer& s) {"
        },
        {
          "name": "serialize",
          "line": 229,
          "signature": "void serialize(ISerializer& s) {"
        },
        {
          "name": "serialize",
          "line": 248,
          "signature": "void serialize(ISerializer& s) {"
        },
        {
          "name": "serialize",
          "line": 260,
          "signature": "void serialize(ISerializer& s) {"
        },
        {
          "name": "serialize",
          "line": 274,
          "signature": "void serialize(ISerializer& s) {"
        },
        {
          "name": "serialize",
          "line": 289,
          "signature": "void serialize(ISerializer& s) {"
        },
        {
          "name": "serialize",
          "line": 312,
          "signature": "void serialize(ISerializer& s) {"
        }
      ],
      "constants": [
        {
          "name": "WALLET_RPC_STATUS_OK",
          "line": 32,
          "value": "\"OK\""
        },
        {
          "name": "WALLET_RPC_STATUS_BUSY",
          "line": 33,
          "value": "\"BUSY\""
        }
      ]
    },
    "src/Wallet/WalletRpcServerErrorCodes.h": {
      "path": "src/Wallet/WalletRpcServerErrorCodes.h",
      "size": 1141,
      "lines": 26,
      "hash": "f17fbad25c422fa8",
      "functions": [],
      "constants": [
        {
          "name": "WALLET_RPC_ERROR_CODE_UNKNOWN_ERROR",
          "line": 21,
          "value": "-1"
        },
        {
          "name": "WALLET_RPC_ERROR_CODE_WRONG_ADDRESS",
          "line": 22,
          "value": "-2"
        },
        {
          "name": "WALLET_RPC_ERROR_CODE_DAEMON_IS_BUSY",
          "line": 23,
          "value": "-3"
        },
        {
          "name": "WALLET_RPC_ERROR_CODE_GENERIC_TRANSFER_ERROR",
          "line": 24,
          "value": "-4"
        },
        {
          "name": "WALLET_RPC_ERROR_CODE_WRONG_PAYMENT_ID",
          "line": 25,
          "value": "-5"
        }
      ]
    },
    "src/Wallet/WalletSerializationV1.cpp": {
      "path": "src/Wallet/WalletSerializationV1.cpp",
      "size": 30395,
      "lines": 946,
      "hash": "14be493d18d4c8d2",
      "functions": [
        {
          "name": "serialize",
          "line": 117,
          "signature": "void serialize(WalletRecordDto& value, CryptoNote::ISerializer& serializer) {"
        },
        {
          "name": "serialize",
          "line": 125,
          "signature": "void serialize(ObsoleteSpentOutputDto& value, CryptoNote::ISerializer& serializer) {"
        },
        {
          "name": "serialize",
          "line": 133,
          "signature": "void serialize(ObsoleteChangeDto& value, CryptoNote::ISerializer& serializer) {"
        },
        {
          "name": "serialize",
          "line": 138,
          "signature": "void serialize(UnlockTransactionJobDto& value, CryptoNote::ISerializer& serializer) {"
        },
        {
          "name": "serialize",
          "line": 144,
          "signature": "void serialize(WalletTransactionDto& value, CryptoNote::ISerializer& serializer) {"
        },
        {
          "name": "serialize",
          "line": 161,
          "signature": "void serialize(WalletTransferDto& value, CryptoNote::ISerializer& serializer) {"
        },
        {
          "name": "output",
          "line": 173,
          "signature": "StdOutputStream output(stream);"
        },
        {
          "name": "addToStream",
          "line": 191,
          "signature": "void addToStream(const std::string& cipher, const std::string& name, Common::IOutputStream& destination) {"
        },
        {
          "name": "serializeEncrypted",
          "line": 197,
          "signature": "void serializeEncrypted(Object& obj, const std::string& name, CryptoNote::CryptoContext& cryptoContext, Common::IOutputStream& destination) {"
        },
        {
          "name": "deserialize",
          "line": 221,
          "signature": "void deserialize(Object& obj, const std::string& name, const std::string& plain) {"
        },
        {
          "name": "deserializeEncrypted",
          "line": 228,
          "signature": "void deserializeEncrypted(Object& obj, const std::string& name, CryptoNote::CryptoContext& cryptoContext, Common::IInputStream& source) {"
        },
        {
          "name": "verifyKeys",
          "line": 235,
          "signature": "bool verifyKeys(const SecretKey& sec, const PublicKey& expected_pub) {"
        },
        {
          "name": "throwIfKeysMissmatch",
          "line": 242,
          "signature": "void throwIfKeysMissmatch(const SecretKey& sec, const PublicKey& expected_pub) {"
        },
        {
          "name": "s",
          "line": 354,
          "signature": "BinaryOutputStreamSerializer s(destination);"
        },
        {
          "name": "s",
          "line": 359,
          "signature": "BinaryOutputStreamSerializer s(destination);"
        },
        {
          "name": "dto",
          "line": 464,
          "signature": "WalletTransactionDto dto(tx);"
        },
        {
          "name": "tr",
          "line": 478,
          "signature": "WalletTransferDto tr(kv.second, SERIALIZATION_VERSION);"
        },
        {
          "name": "getObjectHash",
          "line": 816,
          "signature": "return getObjectHash(pair.second);"
        },
        {
          "name": "dto",
          "line": 901,
          "signature": "WalletTransferDto dto(version);"
        }
      ],
      "constants": [
        {
          "name": "walletsSize",
          "line": 774,
          "value": "walletsIndex.size()"
        }
      ]
    },
    "src/Wallet/WalletSerializationV1.h": {
      "path": "src/Wallet/WalletSerializationV1.h",
      "size": 5760,
      "lines": 124,
      "hash": "818d32d0863464f7",
      "functions": [
        {
          "name": "incIv",
          "line": 37,
          "signature": "void incIv();"
        },
        {
          "name": "save",
          "line": 57,
          "signature": "void save(const std::string &password, Common::IOutputStream &destination, bool saveDetails, bool saveCache);"
        },
        {
          "name": "load",
          "line": 58,
          "signature": "void load(const Crypto::chacha8_key &key, Common::IInputStream &source);"
        },
        {
          "name": "loadWallet",
          "line": 63,
          "signature": "void loadWallet(Common::IInputStream &source, const Crypto::chacha8_key &key, uint32_t version);"
        },
        {
          "name": "loadWalletV1",
          "line": 64,
          "signature": "void loadWalletV1(Common::IInputStream &source, const Crypto::chacha8_key &key);"
        },
        {
          "name": "generateCryptoContext",
          "line": 66,
          "signature": "CryptoContext generateCryptoContext(const std::string &password);"
        },
        {
          "name": "saveVersion",
          "line": 68,
          "signature": "void saveVersion(Common::IOutputStream &destination);"
        },
        {
          "name": "saveIv",
          "line": 69,
          "signature": "void saveIv(Common::IOutputStream &destination, Crypto::chacha8_iv &iv);"
        },
        {
          "name": "saveKeys",
          "line": 70,
          "signature": "void saveKeys(Common::IOutputStream &destination, CryptoContext &cryptoContext);"
        },
        {
          "name": "savePublicKey",
          "line": 71,
          "signature": "void savePublicKey(Common::IOutputStream &destination, CryptoContext &cryptoContext);"
        },
        {
          "name": "saveSecretKey",
          "line": 72,
          "signature": "void saveSecretKey(Common::IOutputStream &destination, CryptoContext &cryptoContext);"
        },
        {
          "name": "saveFlags",
          "line": 73,
          "signature": "void saveFlags(bool saveDetails, bool saveCache, Common::IOutputStream &destination, CryptoContext &cryptoContext);"
        },
        {
          "name": "saveWallets",
          "line": 74,
          "signature": "void saveWallets(Common::IOutputStream &destination, bool saveCache, CryptoContext &cryptoContext);"
        },
        {
          "name": "saveBalances",
          "line": 75,
          "signature": "void saveBalances(Common::IOutputStream &destination, bool saveCache, CryptoContext &cryptoContext);"
        },
        {
          "name": "saveTransfersSynchronizer",
          "line": 76,
          "signature": "void saveTransfersSynchronizer(Common::IOutputStream &destination, CryptoContext &cryptoContext);"
        },
        {
          "name": "saveUnlockTransactionsJobs",
          "line": 77,
          "signature": "void saveUnlockTransactionsJobs(Common::IOutputStream &destination, CryptoContext &cryptoContext);"
        },
        {
          "name": "saveUncommitedTransactions",
          "line": 78,
          "signature": "void saveUncommitedTransactions(Common::IOutputStream &destination, CryptoContext &cryptoContext);"
        },
        {
          "name": "saveTransactions",
          "line": 79,
          "signature": "void saveTransactions(Common::IOutputStream &destination, CryptoContext &cryptoContext);"
        },
        {
          "name": "saveTransfers",
          "line": 80,
          "signature": "void saveTransfers(Common::IOutputStream &destination, CryptoContext &cryptoContext);"
        },
        {
          "name": "loadVersion",
          "line": 82,
          "signature": "uint32_t loadVersion(Common::IInputStream &source);"
        },
        {
          "name": "loadIv",
          "line": 83,
          "signature": "void loadIv(Common::IInputStream &source, Crypto::chacha8_iv &iv);"
        },
        {
          "name": "generateKey",
          "line": 84,
          "signature": "void generateKey(const std::string &password, Crypto::chacha8_key &key);"
        },
        {
          "name": "loadKeys",
          "line": 85,
          "signature": "void loadKeys(Common::IInputStream &source, CryptoContext &cryptoContext);"
        },
        {
          "name": "loadPublicKey",
          "line": 86,
          "signature": "void loadPublicKey(Common::IInputStream &source, CryptoContext &cryptoContext);"
        },
        {
          "name": "loadSecretKey",
          "line": 87,
          "signature": "void loadSecretKey(Common::IInputStream &source, CryptoContext &cryptoContext);"
        },
        {
          "name": "checkKeys",
          "line": 88,
          "signature": "void checkKeys();"
        },
        {
          "name": "loadFlags",
          "line": 89,
          "signature": "void loadFlags(bool &details, bool &cache, Common::IInputStream &source, CryptoContext &cryptoContext);"
        },
        {
          "name": "loadWallets",
          "line": 90,
          "signature": "void loadWallets(Common::IInputStream &source, CryptoContext &cryptoContext);"
        },
        {
          "name": "subscribeWallets",
          "line": 91,
          "signature": "void subscribeWallets();"
        },
        {
          "name": "loadBalances",
          "line": 92,
          "signature": "void loadBalances(Common::IInputStream &source, CryptoContext &cryptoContext);"
        },
        {
          "name": "loadTransfersSynchronizer",
          "line": 93,
          "signature": "void loadTransfersSynchronizer(Common::IInputStream &source, CryptoContext &cryptoContext);"
        },
        {
          "name": "loadObsoleteSpentOutputs",
          "line": 94,
          "signature": "void loadObsoleteSpentOutputs(Common::IInputStream &source, CryptoContext &cryptoContext);"
        },
        {
          "name": "loadUnlockTransactionsJobs",
          "line": 95,
          "signature": "void loadUnlockTransactionsJobs(Common::IInputStream &source, CryptoContext &cryptoContext);"
        },
        {
          "name": "loadObsoleteChange",
          "line": 96,
          "signature": "void loadObsoleteChange(Common::IInputStream &source, CryptoContext &cryptoContext);"
        },
        {
          "name": "loadUncommitedTransactions",
          "line": 97,
          "signature": "void loadUncommitedTransactions(Common::IInputStream &source, CryptoContext &cryptoContext);"
        },
        {
          "name": "loadTransactions",
          "line": 98,
          "signature": "void loadTransactions(Common::IInputStream &source, CryptoContext &cryptoContext);"
        },
        {
          "name": "loadTransfers",
          "line": 99,
          "signature": "void loadTransfers(Common::IInputStream &source, CryptoContext &cryptoContext, uint32_t version);"
        },
        {
          "name": "loadWalletV1Keys",
          "line": 101,
          "signature": "void loadWalletV1Keys(CryptoNote::BinaryInputStreamSerializer &serializer);"
        },
        {
          "name": "loadWalletV1Details",
          "line": 102,
          "signature": "void loadWalletV1Details(CryptoNote::BinaryInputStreamSerializer &serializer);"
        },
        {
          "name": "addWalletV1Details",
          "line": 103,
          "signature": "void addWalletV1Details(const std::vector<WalletLegacyTransaction> &txs, const std::vector<WalletLegacyTransfer> &trs);"
        },
        {
          "name": "initTransactionPool",
          "line": 104,
          "signature": "void initTransactionPool();"
        },
        {
          "name": "resetCachedBalance",
          "line": 105,
          "signature": "void resetCachedBalance();"
        },
        {
          "name": "updateTransactionsBaseStatus",
          "line": 106,
          "signature": "void updateTransactionsBaseStatus();"
        },
        {
          "name": "updateTransfersSign",
          "line": 107,
          "signature": "void updateTransfersSign();"
        }
      ],
      "constants": []
    },
    "src/Wallet/WalletSerializationV2.cpp": {
      "path": "src/Wallet/WalletSerializationV2.cpp",
      "size": 15684,
      "lines": 503,
      "hash": "0680a81156845ae6",
      "functions": [
        {
          "name": "serialize",
          "line": 118,
          "signature": "void serialize(UnlockTransactionJobDtoV2& value, CryptoNote::ISerializer& serializer) {"
        },
        {
          "name": "serialize",
          "line": 124,
          "signature": "void serialize(WalletTransactionDtoV2& value, CryptoNote::ISerializer& serializer) {"
        },
        {
          "name": "serialize",
          "line": 144,
          "signature": "void serialize(WalletTransferDtoV2& value, CryptoNote::ISerializer& serializer) {"
        },
        {
          "name": "serialize",
          "line": 150,
          "signature": "void serialize(WalletDepositDtoV2& value, CryptoNote::ISerializer& serializer) {"
        },
        {
          "name": "dto",
          "line": 388,
          "signature": "WalletTransactionDtoV2 dto(tx);"
        },
        {
          "name": "dto",
          "line": 398,
          "signature": "WalletDepositDtoV2 dto(tx);"
        },
        {
          "name": "tr",
          "line": 432,
          "signature": "WalletTransferDtoV2 tr(kv.second);"
        }
      ],
      "constants": []
    },
    "src/Wallet/WalletSerializationV2.h": {
      "path": "src/Wallet/WalletSerializationV2.h",
      "size": 3565,
      "lines": 98,
      "hash": "712ec94316b65661",
      "functions": [
        {
          "name": "load",
          "line": 50,
          "signature": "void load(Common::IInputStream& source, uint8_t version);"
        },
        {
          "name": "save",
          "line": 51,
          "signature": "void save(Common::IOutputStream& destination, WalletSaveLevel saveLevel);"
        },
        {
          "name": "loadKeyListAndBanalces",
          "line": 60,
          "signature": "void loadKeyListAndBanalces(CryptoNote::ISerializer& serializer, bool saveCache);"
        },
        {
          "name": "saveKeyListAndBanalces",
          "line": 61,
          "signature": "void saveKeyListAndBanalces(CryptoNote::ISerializer& serializer, bool saveCache);"
        },
        {
          "name": "loadTransactions",
          "line": 63,
          "signature": "void loadTransactions(CryptoNote::ISerializer& serializer);"
        },
        {
          "name": "saveTransactions",
          "line": 64,
          "signature": "void saveTransactions(CryptoNote::ISerializer& serializer);"
        },
        {
          "name": "loadDeposits",
          "line": 66,
          "signature": "void loadDeposits(CryptoNote::ISerializer& serializer);"
        },
        {
          "name": "saveDeposits",
          "line": 67,
          "signature": "void saveDeposits(CryptoNote::ISerializer& serializer);"
        },
        {
          "name": "loadTransfers",
          "line": 69,
          "signature": "void loadTransfers(CryptoNote::ISerializer& serializer);"
        },
        {
          "name": "saveTransfers",
          "line": 70,
          "signature": "void saveTransfers(CryptoNote::ISerializer& serializer);"
        },
        {
          "name": "loadTransfersSynchronizer",
          "line": 72,
          "signature": "void loadTransfersSynchronizer(CryptoNote::ISerializer& serializer);"
        },
        {
          "name": "saveTransfersSynchronizer",
          "line": 73,
          "signature": "void saveTransfersSynchronizer(CryptoNote::ISerializer& serializer);"
        },
        {
          "name": "loadUnlockTransactionsJobs",
          "line": 75,
          "signature": "void loadUnlockTransactionsJobs(CryptoNote::ISerializer& serializer);"
        },
        {
          "name": "saveUnlockTransactionsJobs",
          "line": 76,
          "signature": "void saveUnlockTransactionsJobs(CryptoNote::ISerializer& serializer);"
        }
      ],
      "constants": [
        {
          "name": "MIN_VERSION",
          "line": 56,
          "value": "6"
        },
        {
          "name": "SERIALIZATION_VERSION",
          "line": 57,
          "value": "6"
        }
      ]
    },
    "src/Wallet/WalletUtils.cpp": {
      "path": "src/Wallet/WalletUtils.cpp",
      "size": 1533,
      "lines": 40,
      "hash": "6c0edb8252aa70db",
      "functions": [
        {
          "name": "validateAddress",
          "line": 26,
          "signature": "bool validateAddress(const std::string& address, const CryptoNote::Currency& currency) {"
        },
        {
          "name": "throwIfKeysMissmatch",
          "line": 31,
          "signature": "void throwIfKeysMissmatch(const Crypto::SecretKey& secretKey, const Crypto::PublicKey& expectedPublicKey, const std::string& message) {"
        }
      ],
      "constants": []
    },
    "src/Wallet/WalletUtils.h": {
      "path": "src/Wallet/WalletUtils.h",
      "size": 1165,
      "lines": 29,
      "hash": "5b82c5bc871cd13b",
      "functions": [
        {
          "name": "validateAddress",
          "line": 26,
          "signature": "bool validateAddress(const std::string& address, const CryptoNote::Currency& currency);"
        },
        {
          "name": "throwIfKeysMissmatch",
          "line": 27,
          "signature": "void throwIfKeysMissmatch(const Crypto::SecretKey& secretKey, const Crypto::PublicKey& expectedPublicKey, const std::string& message = \"\");"
        }
      ],
      "constants": []
    },
    "src/WalletLegacy/KeysStorage.cpp": {
      "path": "src/WalletLegacy/KeysStorage.cpp",
      "size": 1482,
      "lines": 42,
      "hash": "c3733fc98693fc89",
      "functions": [],
      "constants": []
    },
    "src/WalletLegacy/KeysStorage.h": {
      "path": "src/WalletLegacy/KeysStorage.h",
      "size": 1300,
      "lines": 42,
      "hash": "8ec68c7022af489e",
      "functions": [
        {
          "name": "serialize",
          "line": 38,
          "signature": "void serialize(ISerializer& serializer, const std::string& name);"
        }
      ],
      "constants": []
    },
    "src/WalletLegacy/WalletDepositInfo.h": {
      "path": "src/WalletLegacy/WalletDepositInfo.h",
      "size": 964,
      "lines": 28,
      "hash": "084f1cc7e2e020f8",
      "functions": [],
      "constants": []
    },
    "src/WalletLegacy/WalletHelper.cpp": {
      "path": "src/WalletLegacy/WalletHelper.cpp",
      "size": 4447,
      "lines": 140,
      "hash": "19b4a999bdb18765",
      "functions": [
        {
          "name": "openOutputFileStream",
          "line": 28,
          "signature": "void openOutputFileStream(const std::string& filename, std::ofstream& file) {"
        },
        {
          "name": "make_error_code",
          "line": 46,
          "signature": "return make_error_code(std::errc::invalid_argument);"
        }
      ],
      "constants": []
    },
    "src/WalletLegacy/WalletHelper.h": {
      "path": "src/WalletLegacy/WalletHelper.h",
      "size": 2439,
      "lines": 72,
      "hash": "af61ef6b0bb692a6",
      "functions": [
        {
          "name": "removeObserver",
          "line": 59,
          "signature": "void removeObserver();"
        },
        {
          "name": "prepareFileNames",
          "line": 67,
          "signature": "void prepareFileNames(const std::string& file_path, std::string& keys_file, std::string& wallet_file);"
        },
        {
          "name": "storeWallet",
          "line": 68,
          "signature": "bool storeWallet(CryptoNote::IWalletLegacy& wallet, const std::string& walletFilename);"
        }
      ],
      "constants": []
    },
    "src/WalletLegacy/WalletLegacy.cpp": {
      "path": "src/WalletLegacy/WalletLegacy.cpp",
      "size": 50152,
      "lines": 1486,
      "hash": "e0cbecaa5df58954",
      "functions": [
        {
          "name": "throwNotDefined",
          "line": 49,
          "signature": "void throwNotDefined() {"
        },
        {
          "name": "runAtomic",
          "line": 64,
          "signature": "void runAtomic(std::mutex& mutex, F f) {"
        },
        {
          "name": "calculateDepositsAmount",
          "line": 103,
          "signature": "uint64_t calculateDepositsAmount(const std::vector<CryptoNote::TransactionOutputInformation>& transfers, const CryptoNote::Currency& currency, const std::vector<uint32_t> heights) {"
        },
        {
          "name": "calculateInvestmentsAmount",
          "line": 118,
          "signature": "uint64_t calculateInvestmentsAmount(const std::vector<CryptoNote::TransactionOutputInformation>& transfers, const CryptoNote::Currency& currency, const std::vector<uint32_t> heights) {"
        },
        {
          "name": "counterHolder",
          "line": 267,
          "signature": "ContextCounterHolder counterHolder(m_asyncContextCounter);"
        },
        {
          "name": "serializer",
          "line": 272,
          "signature": "WalletLegacySerializer serializer(m_account, m_transactionsCache);"
        },
        {
          "name": "counterHolder",
          "line": 395,
          "signature": "ContextCounterHolder counterHolder(m_asyncContextCounter);"
        },
        {
          "name": "serializer",
          "line": 401,
          "signature": "WalletLegacySerializer serializer(m_account, m_transactionsCache);"
        },
        {
          "name": "make_error_code",
          "line": 435,
          "signature": "return make_error_code(CryptoNote::error::WRONG_PASSWORD);"
        },
        {
          "name": "calculateActualBalance",
          "line": 454,
          "signature": "return calculateActualBalance();"
        },
        {
          "name": "calculatePendingBalance",
          "line": 461,
          "signature": "return calculatePendingBalance();"
        },
        {
          "name": "calculateActualDepositBalance",
          "line": 469,
          "signature": "return calculateActualDepositBalance();"
        },
        {
          "name": "calculateActualInvestmentBalance",
          "line": 476,
          "signature": "return calculateActualInvestmentBalance();"
        },
        {
          "name": "calculatePendingInvestmentBalance",
          "line": 483,
          "signature": "return calculatePendingInvestmentBalance();"
        },
        {
          "name": "calculatePendingDepositBalance",
          "line": 490,
          "signature": "return calculatePendingDepositBalance();"
        },
        {
          "name": "sendTransaction",
          "line": 566,
          "signature": "return sendTransaction(transactionSK, transfers, fee, extra, mixIn, unlockTimestamp, messages, ttl);"
        },
        {
          "name": "counterHolder",
          "line": 870,
          "signature": "ContextCounterHolder counterHolder(m_asyncContextCounter);"
        },
        {
          "name": "counterHolder",
          "line": 898,
          "signature": "ContextCounterHolder counterHolder(m_asyncContextCounter);"
        },
        {
          "name": "make_error_code",
          "line": 916,
          "signature": "return make_error_code(CryptoNote::error::TX_CANCEL_IMPOSSIBLE);"
        },
        {
          "name": "calculateInvestmentsAmount",
          "line": 1206,
          "signature": "return calculateInvestmentsAmount(transfers, m_currency, heights);"
        },
        {
          "name": "calculateDepositsAmount",
          "line": 1228,
          "signature": "return calculateDepositsAmount(transfers, m_currency, heights);"
        },
        {
          "name": "calculateInvestmentsAmount",
          "line": 1237,
          "signature": "return calculateInvestmentsAmount(transfers, m_currency, heights);"
        },
        {
          "name": "compareTransactionOutputInformationByAmount",
          "line": 1352,
          "signature": "bool compareTransactionOutputInformationByAmount(const TransactionOutputInformation &a, const TransactionOutputInformation &b) {"
        },
        {
          "name": "serializer",
          "line": 1477,
          "signature": "WalletLegacySerializer serializer(m_account, m_transactionsCache);"
        }
      ],
      "constants": [
        {
          "name": "ACCOUN_CREATE_TIME_ACCURACY",
          "line": 47,
          "value": "24 * 60 * 60"
        },
        {
          "name": "r",
          "line": 1403,
          "value": "CryptoNote::generate_key_image_helper(m_account.getAccountKeys(), td.transactionPublicKey, td.outputInTransaction, ephemeral, ki)"
        },
        {
          "name": "r",
          "line": 1444,
          "value": "CryptoNote::generate_key_image_helper(m_account.getAccountKeys(), td.transactionPublicKey, td.outputInTransaction, ephemeral, ki)"
        }
      ]
    },
    "src/WalletLegacy/WalletLegacy.h": {
      "path": "src/WalletLegacy/WalletLegacy.h",
      "size": 9580,
      "lines": 210,
      "hash": "97649c4dafb176ed",
      "functions": [
        {
          "name": "isTrackingWallet",
          "line": 84,
          "signature": "virtual bool isTrackingWallet();"
        },
        {
          "name": "estimateFusion",
          "line": 111,
          "signature": "virtual size_t estimateFusion(const uint64_t& threshold);"
        },
        {
          "name": "sendFusionTransaction",
          "line": 113,
          "signature": "virtual TransactionId sendFusionTransaction(const std::list<TransactionOutputInformation>& fusionInputs, uint64_t fee, const std::string& extra = \"\", uint64_t mixIn = 0, uint64_t unlockTimestamp = 0);"
        },
        {
          "name": "initSync",
          "line": 132,
          "signature": "void initSync();"
        },
        {
          "name": "throwIfNotInitialised",
          "line": 133,
          "signature": "void throwIfNotInitialised();"
        },
        {
          "name": "doSave",
          "line": 135,
          "signature": "void doSave(std::ostream& destination, bool saveDetailed, bool saveCache);"
        },
        {
          "name": "doLoad",
          "line": 136,
          "signature": "void doLoad(std::istream& source);"
        },
        {
          "name": "synchronizationCallback",
          "line": 138,
          "signature": "void synchronizationCallback(WalletRequest::Callback callback, std::error_code ec);"
        },
        {
          "name": "sendTransactionCallback",
          "line": 139,
          "signature": "void sendTransactionCallback(WalletRequest::Callback callback, std::error_code ec);"
        },
        {
          "name": "notifyClients",
          "line": 140,
          "signature": "void notifyClients(std::deque<std::unique_ptr<WalletLegacyEvent> >& events);"
        },
        {
          "name": "notifyIfBalanceChanged",
          "line": 141,
          "signature": "void notifyIfBalanceChanged();"
        },
        {
          "name": "notifyIfDepositBalanceChanged",
          "line": 142,
          "signature": "void notifyIfDepositBalanceChanged();"
        },
        {
          "name": "notifyIfInvestmentBalanceChanged",
          "line": 143,
          "signature": "void notifyIfInvestmentBalanceChanged();"
        },
        {
          "name": "calculateActualDepositBalance",
          "line": 154,
          "signature": "uint64_t calculateActualDepositBalance();"
        },
        {
          "name": "calculateActualInvestmentBalance",
          "line": 155,
          "signature": "uint64_t calculateActualInvestmentBalance();"
        },
        {
          "name": "calculatePendingDepositBalance",
          "line": 156,
          "signature": "uint64_t calculatePendingDepositBalance();"
        },
        {
          "name": "calculatePendingInvestmentBalance",
          "line": 157,
          "signature": "uint64_t calculatePendingInvestmentBalance();"
        },
        {
          "name": "getWalletMaximum",
          "line": 158,
          "signature": "uint64_t getWalletMaximum();"
        },
        {
          "name": "dustBalance",
          "line": 159,
          "signature": "uint64_t dustBalance();"
        },
        {
          "name": "calculateActualBalance",
          "line": 161,
          "signature": "uint64_t calculateActualBalance();"
        },
        {
          "name": "calculatePendingBalance",
          "line": 162,
          "signature": "uint64_t calculatePendingBalance();"
        },
        {
          "name": "pushBalanceUpdatedEvents",
          "line": 164,
          "signature": "void pushBalanceUpdatedEvents(std::deque<std::unique_ptr<WalletLegacyEvent>>& eventsQueue);"
        }
      ],
      "constants": []
    },
    "src/WalletLegacy/WalletLegacyEvent.h": {
      "path": "src/WalletLegacy/WalletLegacyEvent.h",
      "size": 6658,
      "lines": 213,
      "hash": "0bd96988b594bd7d",
      "functions": [],
      "constants": []
    },
    "src/WalletLegacy/WalletLegacySerialization.cpp": {
      "path": "src/WalletLegacy/WalletLegacySerialization.cpp",
      "size": 4386,
      "lines": 118,
      "hash": "b4e8aafced479c68",
      "functions": [
        {
          "name": "serialize",
          "line": 30,
          "signature": "void serialize(UnconfirmedTransferDetails& utd, CryptoNote::ISerializer& serializer) {"
        },
        {
          "name": "serialize",
          "line": 42,
          "signature": "void serialize(UnconfirmedSpentDepositDetails& details, ISerializer& serializer) {"
        },
        {
          "name": "serialize",
          "line": 51,
          "signature": "void serialize(WalletLegacyTransaction& txi, CryptoNote::ISerializer& serializer) {"
        },
        {
          "name": "serialize",
          "line": 92,
          "signature": "void serialize(WalletLegacyTransfer& tr, CryptoNote::ISerializer& serializer) {"
        },
        {
          "name": "serialize",
          "line": 97,
          "signature": "void serialize(Deposit& deposit, CryptoNote::ISerializer& serializer) {"
        },
        {
          "name": "serialize",
          "line": 112,
          "signature": "void serialize(DepositInfo& depositInfo, CryptoNote::ISerializer& serializer) {"
        }
      ],
      "constants": []
    },
    "src/WalletLegacy/WalletLegacySerialization.h": {
      "path": "src/WalletLegacy/WalletLegacySerialization.h",
      "size": 1580,
      "lines": 43,
      "hash": "1ca71f66cb836919",
      "functions": [
        {
          "name": "serialize",
          "line": 35,
          "signature": "void serialize(UnconfirmedTransferDetails& utd, ISerializer& serializer);"
        },
        {
          "name": "serialize",
          "line": 36,
          "signature": "void serialize(UnconfirmedSpentDepositDetails& details, ISerializer& serializer);"
        },
        {
          "name": "serialize",
          "line": 37,
          "signature": "void serialize(WalletLegacyTransaction& txi, ISerializer& serializer);"
        },
        {
          "name": "serialize",
          "line": 38,
          "signature": "void serialize(WalletLegacyTransfer& tr, ISerializer& serializer);"
        },
        {
          "name": "serialize",
          "line": 39,
          "signature": "void serialize(DepositInfo& depositInfo, ISerializer& serializer);"
        },
        {
          "name": "serialize",
          "line": 40,
          "signature": "void serialize(Deposit& deposit, ISerializer& serializer);"
        }
      ],
      "constants": []
    },
    "src/WalletLegacy/WalletLegacySerializer.cpp": {
      "path": "src/WalletLegacy/WalletLegacySerializer.cpp",
      "size": 8080,
      "lines": 268,
      "hash": "5d6e62f62377a71e",
      "functions": [
        {
          "name": "verifyKeys",
          "line": 40,
          "signature": "bool verifyKeys(const Crypto::SecretKey& sec, const Crypto::PublicKey& expected_pub) {"
        },
        {
          "name": "throwIfKeysMissmatch",
          "line": 46,
          "signature": "void throwIfKeysMissmatch(const Crypto::SecretKey& sec, const Crypto::PublicKey& expected_pub) {"
        },
        {
          "name": "plainStream",
          "line": 64,
          "signature": "StdOutputStream plainStream(plainArchive);"
        },
        {
          "name": "output",
          "line": 82,
          "signature": "StdOutputStream output(stream);"
        },
        {
          "name": "stdStream",
          "line": 121,
          "signature": "StdInputStream stdStream(stream);"
        },
        {
          "name": "stdStream",
          "line": 171,
          "signature": "StdInputStream stdStream(stream);"
        }
      ],
      "constants": [
        {
          "name": "WALLET_SERIALIZATION_VERSION",
          "line": 38,
          "value": "2"
        }
      ]
    },
    "src/WalletLegacy/WalletLegacySerializer.h": {
      "path": "src/WalletLegacy/WalletLegacySerializer.h",
      "size": 2016,
      "lines": 57,
      "hash": "1451b6348e8539cd",
      "functions": [
        {
          "name": "serialize",
          "line": 40,
          "signature": "void serialize(std::ostream& stream, const std::string& password, bool saveDetailed, const std::string& cache);"
        },
        {
          "name": "deserialize",
          "line": 41,
          "signature": "void deserialize(std::istream& stream, const std::string& password, std::string& cache);"
        },
        {
          "name": "deserialize",
          "line": 42,
          "signature": "bool deserialize(std::istream& stream, const std::string& password);"
        },
        {
          "name": "saveKeys",
          "line": 45,
          "signature": "void saveKeys(CryptoNote::ISerializer& serializer);"
        },
        {
          "name": "loadKeys",
          "line": 46,
          "signature": "void loadKeys(CryptoNote::ISerializer& serializer);"
        },
        {
          "name": "decrypt",
          "line": 49,
          "signature": "void decrypt(const std::string& cipher, std::string& plain, Crypto::chacha8_iv iv, const std::string& password);"
        }
      ],
      "constants": []
    },
    "src/WalletLegacy/WalletRequest.h": {
      "path": "src/WalletLegacy/WalletRequest.h",
      "size": 3197,
      "lines": 96,
      "hash": "ae5b226f988566ba",
      "functions": [],
      "constants": []
    },
    "src/WalletLegacy/WalletSendTransactionContext.h": {
      "path": "src/WalletLegacy/WalletSendTransactionContext.h",
      "size": 1793,
      "lines": 53,
      "hash": "2142e396f3647428",
      "functions": [],
      "constants": []
    },
    "src/WalletLegacy/WalletTransactionSender.cpp": {
      "path": "src/WalletLegacy/WalletTransactionSender.cpp",
      "size": 39437,
      "lines": 960,
      "hash": "730d75c0aed15ef1",
      "functions": [
        {
          "name": "T",
          "line": 806,
          "signature": "return T();"
        }
      ],
      "constants": []
    },
    "src/WalletLegacy/WalletTransactionSender.h": {
      "path": "src/WalletLegacy/WalletTransactionSender.h",
      "size": 8233,
      "lines": 130,
      "hash": "51f300f6dcd9bf4c",
      "functions": [
        {
          "name": "stop",
          "line": 40,
          "signature": "void stop();"
        },
        {
          "name": "checkIfEnoughMixins",
          "line": 97,
          "signature": "bool checkIfEnoughMixins(const std::vector<COMMAND_RPC_GET_RANDOM_OUTPUTS_FOR_AMOUNTS::outs_for_amount>& outs, uint64_t mixIn);"
        },
        {
          "name": "notifyBalanceChanged",
          "line": 107,
          "signature": "void notifyBalanceChanged(std::deque<std::unique_ptr<WalletLegacyEvent>>& events);"
        },
        {
          "name": "validateTransfersAddresses",
          "line": 109,
          "signature": "void validateTransfersAddresses(const std::vector<WalletLegacyTransfer>& transfers);"
        },
        {
          "name": "validateDestinationAddress",
          "line": 110,
          "signature": "bool validateDestinationAddress(const std::string& address);"
        },
        {
          "name": "selectNTransfersToSend",
          "line": 112,
          "signature": "uint64_t selectNTransfersToSend(std::vector<TransactionOutputInformation>& selectedTransfers);"
        },
        {
          "name": "selectTransfersToSend",
          "line": 113,
          "signature": "uint64_t selectTransfersToSend(uint64_t neededMoney, bool addDust, uint64_t dust, std::vector<TransactionOutputInformation>& selectedTransfers);"
        },
        {
          "name": "selectDepositTransfers",
          "line": 114,
          "signature": "uint64_t selectDepositTransfers(const std::vector<DepositId>& depositIds, std::vector<TransactionOutputInformation>& selectedTransfers);"
        },
        {
          "name": "setSpendingTransactionToDeposits",
          "line": 116,
          "signature": "void setSpendingTransactionToDeposits(TransactionId transactionId, const std::vector<DepositId>& depositIds);"
        }
      ],
      "constants": []
    },
    "src/WalletLegacy/WalletUnconfirmedTransactions.cpp": {
      "path": "src/WalletLegacy/WalletUnconfirmedTransactions.cpp",
      "size": 7106,
      "lines": 245,
      "hash": "a6ca00548bc78207",
      "functions": [
        {
          "name": "getOutputId",
          "line": 29,
          "signature": "inline TransactionOutputId getOutputId(const TransactionOutputInformation& out) {"
        }
      ],
      "constants": []
    },
    "src/WalletLegacy/WalletUnconfirmedTransactions.h": {
      "path": "src/WalletLegacy/WalletUnconfirmedTransactions.h",
      "size": 4061,
      "lines": 125,
      "hash": "c99e4c8dd3fe5235",
      "functions": [
        {
          "name": "WalletUnconfirmedTransactions",
          "line": 75,
          "signature": "explicit WalletUnconfirmedTransactions(uint64_t uncofirmedTransactionsLiveTime);"
        },
        {
          "name": "serialize",
          "line": 77,
          "signature": "bool serialize(CryptoNote::ISerializer& s);"
        },
        {
          "name": "deserializeV1",
          "line": 78,
          "signature": "bool deserializeV1(CryptoNote::ISerializer& s);"
        },
        {
          "name": "findTransactionId",
          "line": 80,
          "signature": "bool findTransactionId(const Crypto::Hash& hash, TransactionId& id);"
        },
        {
          "name": "erase",
          "line": 81,
          "signature": "void erase(const Crypto::Hash& hash);"
        },
        {
          "name": "updateTransactionId",
          "line": 84,
          "signature": "void updateTransactionId(const Crypto::Hash& hash, TransactionId id);"
        },
        {
          "name": "addCreatedDeposit",
          "line": 86,
          "signature": "void addCreatedDeposit(DepositId id, uint64_t totalAmount);"
        },
        {
          "name": "addDepositSpendingTransaction",
          "line": 87,
          "signature": "void addDepositSpendingTransaction(const Crypto::Hash& transactionHash, const UnconfirmedSpentDepositDetails& details);"
        },
        {
          "name": "eraseCreatedDeposit",
          "line": 89,
          "signature": "void eraseCreatedDeposit(DepositId id);"
        },
        {
          "name": "reset",
          "line": 98,
          "signature": "void reset();"
        },
        {
          "name": "collectUsedOutputs",
          "line": 104,
          "signature": "void collectUsedOutputs();"
        },
        {
          "name": "deleteUsedOutputs",
          "line": 105,
          "signature": "void deleteUsedOutputs(const std::vector<TransactionOutputId>& usedOutputs);"
        },
        {
          "name": "eraseUnconfirmedTransaction",
          "line": 107,
          "signature": "bool eraseUnconfirmedTransaction(const Crypto::Hash& hash);"
        },
        {
          "name": "eraseDepositSpendingTransaction",
          "line": 108,
          "signature": "bool eraseDepositSpendingTransaction(const Crypto::Hash& hash);"
        },
        {
          "name": "findUnconfirmedTransactionId",
          "line": 110,
          "signature": "bool findUnconfirmedTransactionId(const Crypto::Hash& hash, TransactionId& id);"
        },
        {
          "name": "findUnconfirmedDepositSpendingTransactionId",
          "line": 111,
          "signature": "bool findUnconfirmedDepositSpendingTransactionId(const Crypto::Hash& hash, TransactionId& id);"
        }
      ],
      "constants": []
    },
    "src/WalletLegacy/WalletUserTransactionsCache.cpp": {
      "path": "src/WalletLegacy/WalletUserTransactionsCache.cpp",
      "size": 26088,
      "lines": 684,
      "hash": "baf5f2386877a941",
      "functions": [
        {
          "name": "serialize",
          "line": 47,
          "signature": "void serialize(LegacyDeposit& deposit, ISerializer& serializer) {"
        },
        {
          "name": "serialize",
          "line": 60,
          "signature": "void serialize(LegacyDepositInfo& depositInfo, ISerializer& serializer) {"
        },
        {
          "name": "convertLegacyDeposits",
          "line": 100,
          "signature": "void convertLegacyDeposits(const std::vector<LegacyDepositInfo>& legacyDeposits, UserDeposits& deposits) {"
        },
        {
          "name": "paymentIdIsSet",
          "line": 149,
          "signature": "bool paymentIdIsSet(const PaymentId& paymentId) {"
        },
        {
          "name": "canInsertTransactionToIndex",
          "line": 153,
          "signature": "bool canInsertTransactionToIndex(const WalletLegacyTransaction& info) {"
        },
        {
          "name": "depositIdSequenceStart",
          "line": 385,
          "signature": "DepositIdSequenceIterator depositIdSequenceStart(tr.firstDepositId);"
        },
        {
          "name": "depositIdSequenceEnd",
          "line": 386,
          "signature": "DepositIdSequenceIterator depositIdSequenceEnd(tr.firstDepositId + tr.depositCount);"
        },
        {
          "name": "insertDeposit",
          "line": 627,
          "signature": "return insertDeposit(deposit, depositOutput.outputInTransaction, depositOutput.transactionHash);"
        }
      ],
      "constants": []
    },
    "src/WalletLegacy/WalletUserTransactionsCache.h": {
      "path": "src/WalletLegacy/WalletUserTransactionsCache.h",
      "size": 7216,
      "lines": 158,
      "hash": "2a9bc01bbdaf874f",
      "functions": [
        {
          "name": "WalletUserTransactionsCache",
          "line": 56,
          "signature": "explicit WalletUserTransactionsCache(uint64_t mempoolTxLiveTime = 60 * 60 * 24);"
        },
        {
          "name": "serialize",
          "line": 58,
          "signature": "bool serialize(CryptoNote::ISerializer& serializer);"
        },
        {
          "name": "deserializeLegacyV1",
          "line": 59,
          "signature": "void deserializeLegacyV1(CryptoNote::ISerializer& serializer);"
        },
        {
          "name": "updateTransactionSendingState",
          "line": 81,
          "signature": "void updateTransactionSendingState(TransactionId transactionId, std::error_code ec);"
        },
        {
          "name": "addCreatedDeposit",
          "line": 83,
          "signature": "void addCreatedDeposit(DepositId id, uint64_t totalAmount);"
        },
        {
          "name": "addDepositSpendingTransaction",
          "line": 84,
          "signature": "void addDepositSpendingTransaction(const Crypto::Hash& transactionHash, const UnconfirmedSpentDepositDetails& details);"
        },
        {
          "name": "reset",
          "line": 106,
          "signature": "void reset();"
        },
        {
          "name": "insertDeposit",
          "line": 110,
          "signature": "DepositId insertDeposit(const Deposit& deposit, size_t depositIndexInTransaction, const Crypto::Hash& transactionHash);"
        },
        {
          "name": "getDepositInTransactionInfo",
          "line": 111,
          "signature": "bool getDepositInTransactionInfo(DepositId depositId, Crypto::Hash& transactionHash, uint32_t& outputInTransaction);"
        },
        {
          "name": "findTransactionByHash",
          "line": 114,
          "signature": "TransactionId findTransactionByHash(const Crypto::Hash& hash);"
        },
        {
          "name": "insertTransaction",
          "line": 118,
          "signature": "TransactionId insertTransaction(WalletLegacyTransaction&& Transaction);"
        },
        {
          "name": "insertTransfers",
          "line": 119,
          "signature": "TransferId insertTransfers(const std::vector<WalletLegacyTransfer>& transfers);"
        },
        {
          "name": "updateUnconfirmedTransactions",
          "line": 120,
          "signature": "void updateUnconfirmedTransactions();"
        },
        {
          "name": "restoreTransactionOutputToDepositIndex",
          "line": 122,
          "signature": "void restoreTransactionOutputToDepositIndex();"
        },
        {
          "name": "getDepositId",
          "line": 131,
          "signature": "DepositId getDepositId(const Crypto::Hash& creatingTransactionHash, uint32_t outputInTransaction);"
        },
        {
          "name": "eraseCreatedDeposit",
          "line": 135,
          "signature": "void eraseCreatedDeposit(DepositId id);"
        },
        {
          "name": "rebuildPaymentsIndex",
          "line": 143,
          "signature": "void rebuildPaymentsIndex();"
        },
        {
          "name": "pushToPaymentsIndex",
          "line": 144,
          "signature": "void pushToPaymentsIndex(const PaymentId& paymentId, Offset distance);"
        },
        {
          "name": "pushToPaymentsIndexInternal",
          "line": 145,
          "signature": "void pushToPaymentsIndexInternal(Offset distance, const WalletLegacyTransaction& info, std::vector<uint8_t>& extra);"
        },
        {
          "name": "popFromPaymentsIndex",
          "line": 146,
          "signature": "void popFromPaymentsIndex(const PaymentId& paymentId, Offset distance);"
        }
      ],
      "constants": []
    },
    "src/WalletLegacy/WalletUtils.h": {
      "path": "src/WalletLegacy/WalletUtils.h",
      "size": 1515,
      "lines": 49,
      "hash": "f90ee7cf9d772e55",
      "functions": [],
      "constants": []
    },
    "src/crypto/aesb.c": {
      "path": "src/crypto/aesb.c",
      "size": 7221,
      "lines": 186,
      "hash": "397f4f3950ce9adc",
      "functions": [],
      "constants": [
        {
          "name": "TABLE_ALIGN",
          "line": 28,
          "value": "32"
        },
        {
          "name": "WPOLY",
          "line": 29,
          "value": "0x011b"
        },
        {
          "name": "N_COLS",
          "line": 30,
          "value": "4"
        },
        {
          "name": "AES_BLOCK_SIZE",
          "line": 31,
          "value": "16"
        },
        {
          "name": "RC_LENGTH",
          "line": 32,
          "value": "(5 * (AES_BLOCK_SIZE / 4 - 2))"
        },
        {
          "name": "ALIGN",
          "line": 35,
          "value": "__declspec(align(TABLE_ALIGN))"
        },
        {
          "name": "ALIGN",
          "line": 37,
          "value": "__attribute__ ((aligned(16)))"
        }
      ]
    },
    "src/crypto/aesb.h": {
      "path": "src/crypto/aesb.h",
      "size": 7220,
      "lines": 178,
      "hash": "5eb8222a48db7cec",
      "functions": [],
      "constants": [
        {
          "name": "TABLE_ALIGN",
          "line": 28,
          "value": "32"
        },
        {
          "name": "WPOLY",
          "line": 29,
          "value": "0x011b"
        },
        {
          "name": "N_COLS",
          "line": 30,
          "value": "4"
        },
        {
          "name": "AES_BLOCK_SIZE",
          "line": 31,
          "value": "16"
        },
        {
          "name": "RC_LENGTH",
          "line": 32,
          "value": "(5 * (AES_BLOCK_SIZE / 4 - 2))"
        },
        {
          "name": "ALIGN2",
          "line": 35,
          "value": "__declspec(align(TABLE_ALIGN))"
        },
        {
          "name": "ALIGN2",
          "line": 37,
          "value": "__attribute__ ((aligned(16)))"
        }
      ]
    },
    "src/crypto/blake256.c": {
      "path": "src/crypto/blake256.c",
      "size": 9688,
      "lines": 327,
      "hash": "96d161242cc1f891",
      "functions": [
        {
          "name": "blake256_compress",
          "line": 53,
          "signature": "void blake256_compress(state *S, const uint8_t *block) {"
        },
        {
          "name": "blake256_init",
          "line": 100,
          "signature": "void blake256_init(state *S) {"
        },
        {
          "name": "blake224_init",
          "line": 113,
          "signature": "void blake224_init(state *S) {"
        },
        {
          "name": "blake256_update",
          "line": 127,
          "signature": "void blake256_update(state *S, const uint8_t *data, uint64_t datalen) {"
        },
        {
          "name": "blake224_update",
          "line": 158,
          "signature": "void blake224_update(state *S, const uint8_t *data, uint64_t datalen) {"
        },
        {
          "name": "blake256_final_h",
          "line": 162,
          "signature": "void blake256_final_h(state *S, uint8_t *digest, uint8_t pa, uint8_t pb) {"
        },
        {
          "name": "blake256_final",
          "line": 200,
          "signature": "void blake256_final(state *S, uint8_t *digest) {"
        },
        {
          "name": "blake224_final",
          "line": 204,
          "signature": "void blake224_final(state *S, uint8_t *digest) {"
        },
        {
          "name": "blake256_hash",
          "line": 209,
          "signature": "void blake256_hash(uint8_t *out, const uint8_t *in, uint64_t inlen) {"
        },
        {
          "name": "blake224_hash",
          "line": 217,
          "signature": "void blake224_hash(uint8_t *out, const uint8_t *in, uint64_t inlen) {"
        },
        {
          "name": "hmac_blake256_init",
          "line": 225,
          "signature": "void hmac_blake256_init(hmac_state *S, const uint8_t *_key, uint64_t keylen) {"
        },
        {
          "name": "hmac_blake224_init",
          "line": 255,
          "signature": "void hmac_blake224_init(hmac_state *S, const uint8_t *_key, uint64_t keylen) {"
        },
        {
          "name": "hmac_blake256_update",
          "line": 285,
          "signature": "void hmac_blake256_update(hmac_state *S, const uint8_t *data, uint64_t datalen) {"
        },
        {
          "name": "hmac_blake224_update",
          "line": 291,
          "signature": "void hmac_blake224_update(hmac_state *S, const uint8_t *data, uint64_t datalen) {"
        },
        {
          "name": "hmac_blake256_final",
          "line": 296,
          "signature": "void hmac_blake256_final(hmac_state *S, uint8_t *digest) {"
        },
        {
          "name": "hmac_blake224_final",
          "line": 304,
          "signature": "void hmac_blake224_final(hmac_state *S, uint8_t *digest) {"
        },
        {
          "name": "hmac_blake256_hash",
          "line": 313,
          "signature": "void hmac_blake256_hash(uint8_t *out, const uint8_t *key, uint64_t keylen, const uint8_t *in, uint64_t inlen) {"
        },
        {
          "name": "hmac_blake224_hash",
          "line": 321,
          "signature": "void hmac_blake224_hash(uint8_t *out, const uint8_t *key, uint64_t keylen, const uint8_t *in, uint64_t inlen) {"
        }
      ],
      "constants": []
    },
    "src/crypto/blake256.h": {
      "path": "src/crypto/blake256.h",
      "size": 1201,
      "lines": 44,
      "hash": "9ee6a4a85522c7ee",
      "functions": [
        {
          "name": "blake256_init",
          "line": 17,
          "signature": "void blake256_init(state *);"
        },
        {
          "name": "blake224_init",
          "line": 18,
          "signature": "void blake224_init(state *);"
        },
        {
          "name": "blake256_update",
          "line": 20,
          "signature": "void blake256_update(state *, const uint8_t *, uint64_t);"
        },
        {
          "name": "blake224_update",
          "line": 21,
          "signature": "void blake224_update(state *, const uint8_t *, uint64_t);"
        },
        {
          "name": "blake256_final",
          "line": 23,
          "signature": "void blake256_final(state *, uint8_t *);"
        },
        {
          "name": "blake224_final",
          "line": 24,
          "signature": "void blake224_final(state *, uint8_t *);"
        },
        {
          "name": "blake256_hash",
          "line": 26,
          "signature": "void blake256_hash(uint8_t *, const uint8_t *, uint64_t);"
        },
        {
          "name": "blake224_hash",
          "line": 27,
          "signature": "void blake224_hash(uint8_t *, const uint8_t *, uint64_t);"
        },
        {
          "name": "hmac_blake256_init",
          "line": 31,
          "signature": "void hmac_blake256_init(hmac_state *, const uint8_t *, uint64_t);"
        },
        {
          "name": "hmac_blake224_init",
          "line": 32,
          "signature": "void hmac_blake224_init(hmac_state *, const uint8_t *, uint64_t);"
        },
        {
          "name": "hmac_blake256_update",
          "line": 34,
          "signature": "void hmac_blake256_update(hmac_state *, const uint8_t *, uint64_t);"
        },
        {
          "name": "hmac_blake224_update",
          "line": 35,
          "signature": "void hmac_blake224_update(hmac_state *, const uint8_t *, uint64_t);"
        },
        {
          "name": "hmac_blake256_final",
          "line": 37,
          "signature": "void hmac_blake256_final(hmac_state *, uint8_t *);"
        },
        {
          "name": "hmac_blake224_final",
          "line": 38,
          "signature": "void hmac_blake224_final(hmac_state *, uint8_t *);"
        },
        {
          "name": "hmac_blake256_hash",
          "line": 40,
          "signature": "void hmac_blake256_hash(uint8_t *, const uint8_t *, uint64_t, const uint8_t *, uint64_t);"
        },
        {
          "name": "hmac_blake224_hash",
          "line": 41,
          "signature": "void hmac_blake224_hash(uint8_t *, const uint8_t *, uint64_t, const uint8_t *, uint64_t);"
        }
      ],
      "constants": []
    },
    "src/crypto/chacha8.c": {
      "path": "src/crypto/chacha8.c",
      "size": 4804,
      "lines": 179,
      "hash": "5ea1b149ea99436e",
      "functions": [],
      "constants": []
    },
    "src/crypto/chacha8.h": {
      "path": "src/crypto/chacha8.h",
      "size": 1741,
      "lines": 70,
      "hash": "5038b38a1e454d5a",
      "functions": [
        {
          "name": "chacha8",
          "line": 21,
          "signature": "void chacha8(const void *data, size_t length, const uint8_t *key, const uint8_t *iv, char *cipher);"
        },
        {
          "name": "generate_chacha8_key",
          "line": 50,
          "signature": "inline void generate_chacha8_key(Crypto::cn_context &context, const std::string& password, chacha8_key& key, int cn_variant = 0) {"
        }
      ],
      "constants": [
        {
          "name": "CHACHA8_KEY_SIZE",
          "line": 6,
          "value": "32"
        },
        {
          "name": "CHACHA8_IV_SIZE",
          "line": 7,
          "value": "8"
        }
      ]
    },
    "src/crypto/crypto-ops-data.c": {
      "path": "src/crypto/crypto-ops-data.c",
      "size": 86931,
      "lines": 849,
      "hash": "67441ed0fc839f47",
      "functions": [],
      "constants": [
        {
          "name": "fe_d",
          "line": 13,
          "value": "{-10913610, 13857413, -15372611, 6949391, 114729, -8787816, -6275908, -3247719, -18696448, -12055116}"
        },
        {
          "name": "fe_sqrtm1",
          "line": 14,
          "value": "{-32595792, -7943725, 9377950, 3500415, 12389472, -272473, -25146209, -2005654, 326686, 11406482}"
        },
        {
          "name": "fe_d2",
          "line": 15,
          "value": "{-21827239, -5839606, -30745221, 13898782, 229458, 15978800, -12551817, -6495438, 29715968, 9444199}"
        },
        {
          "name": "fe_ma2",
          "line": 843,
          "value": "{-12721188, -3529, 0, 0, 0, 0, 0, 0, 0, 0}"
        },
        {
          "name": "fe_ma",
          "line": 844,
          "value": "{-486662, 0, 0, 0, 0, 0, 0, 0, 0, 0}"
        },
        {
          "name": "fe_fffb1",
          "line": 845,
          "value": "{-31702527, -2466483, -26106795, -12203692, -12169197, -321052, 14850977, -10296299, -16929438, -407568}"
        },
        {
          "name": "fe_fffb2",
          "line": 846,
          "value": "{8166131, -6741800, -17040804, 3154616, 21461005, 1466302, -30876704, -6368709, 10503587, -13363080}"
        },
        {
          "name": "fe_fffb3",
          "line": 847,
          "value": "{-13620103, 14639558, 4532995, 7679154, 16815101, -15883539, -22863840, -14813421, 13716513, -6477756}"
        },
        {
          "name": "fe_fffb4",
          "line": 848,
          "value": "{-21786234, -12173074, 21573800, 4524538, -4645904, 16204591, 8012863, -8444712, 3212926, 6885324}"
        }
      ]
    },
    "src/crypto/crypto-ops.c": {
      "path": "src/crypto/crypto-ops.c",
      "size": 86798,
      "lines": 2899,
      "hash": "11dd9f8968affce7",
      "functions": [
        {
          "name": "fe_mul",
          "line": 14,
          "signature": "static void fe_mul(fe, const fe, const fe);"
        },
        {
          "name": "fe_sq",
          "line": 15,
          "signature": "static void fe_sq(fe, const fe);"
        },
        {
          "name": "fe_tobytes",
          "line": 16,
          "signature": "static void fe_tobytes(unsigned char *, const fe);"
        },
        {
          "name": "ge_madd",
          "line": 17,
          "signature": "static void ge_madd(ge_p1p1 *, const ge_p3 *, const ge_precomp *);"
        },
        {
          "name": "ge_msub",
          "line": 18,
          "signature": "static void ge_msub(ge_p1p1 *, const ge_p3 *, const ge_precomp *);"
        },
        {
          "name": "ge_p2_0",
          "line": 19,
          "signature": "static void ge_p2_0(ge_p2 *);"
        },
        {
          "name": "ge_p3_dbl",
          "line": 20,
          "signature": "static void ge_p3_dbl(ge_p1p1 *, const ge_p3 *);"
        },
        {
          "name": "fe_divpowm1",
          "line": 21,
          "signature": "static void fe_divpowm1(fe, const fe, const fe);"
        },
        {
          "name": "load_3",
          "line": 25,
          "signature": "static uint64_t load_3(const unsigned char *in) {"
        },
        {
          "name": "fe_0",
          "line": 49,
          "signature": "static void fe_0(fe h) {"
        },
        {
          "name": "fe_1",
          "line": 68,
          "signature": "static void fe_1(fe h) {"
        },
        {
          "name": "fe_add",
          "line": 95,
          "signature": "static void fe_add(fe h, const fe f, const fe g) {"
        },
        {
          "name": "fe_cmov",
          "line": 147,
          "signature": "static void fe_cmov(fe f, const fe g, unsigned int b) {"
        },
        {
          "name": "fe_copy",
          "line": 208,
          "signature": "static void fe_copy(fe h, const fe f) {"
        },
        {
          "name": "fe_invert",
          "line": 233,
          "signature": "static void fe_invert(fe out, const fe z) {"
        },
        {
          "name": "fe_isnegative",
          "line": 301,
          "signature": "static int fe_isnegative(const fe f) {"
        },
        {
          "name": "fe_isnonzero",
          "line": 309,
          "signature": "static int fe_isnonzero(const fe f) {"
        },
        {
          "name": "fe_mul",
          "line": 352,
          "signature": "static void fe_mul(fe h, const fe f, const fe g) {"
        },
        {
          "name": "fe_neg",
          "line": 582,
          "signature": "static void fe_neg(fe h, const fe f) {"
        },
        {
          "name": "fe_sq",
          "line": 632,
          "signature": "static void fe_sq(fe h, const fe f) {"
        },
        {
          "name": "fe_sq2",
          "line": 780,
          "signature": "static void fe_sq2(fe h, const fe f) {"
        },
        {
          "name": "fe_sub",
          "line": 936,
          "signature": "static void fe_sub(fe h, const fe f, const fe g) {"
        },
        {
          "name": "fe_tobytes",
          "line": 1006,
          "signature": "static void fe_tobytes(unsigned char *s, const fe h) {"
        },
        {
          "name": "ge_add",
          "line": 1100,
          "signature": "void ge_add(ge_p1p1 *r, const ge_p3 *p, const ge_cached *q) {"
        },
        {
          "name": "slide",
          "line": 1117,
          "signature": "static void slide(signed char *r, const unsigned char *a) {"
        },
        {
          "name": "ge_dsm_precomp",
          "line": 1149,
          "signature": "void ge_dsm_precomp(ge_dsmp r, const ge_p3 *s) {"
        },
        {
          "name": "ge_double_scalarmult_base_vartime",
          "line": 1170,
          "signature": "void ge_double_scalarmult_base_vartime(ge_p2 *r, const unsigned char *a, const ge_p3 *A, const unsigned char *b) {"
        },
        {
          "name": "ge_frombytes_vartime",
          "line": 1213,
          "signature": "int ge_frombytes_vartime(ge_p3 *h, const unsigned char *s) {"
        },
        {
          "name": "ge_madd",
          "line": 1312,
          "signature": "static void ge_madd(ge_p1p1 *r, const ge_p3 *p, const ge_precomp *q) {"
        },
        {
          "name": "ge_msub",
          "line": 1332,
          "signature": "static void ge_msub(ge_p1p1 *r, const ge_p3 *p, const ge_precomp *q) {"
        },
        {
          "name": "ge_p1p1_to_p2",
          "line": 1352,
          "signature": "void ge_p1p1_to_p2(ge_p2 *r, const ge_p1p1 *p) {"
        },
        {
          "name": "ge_p1p1_to_p3",
          "line": 1364,
          "signature": "void ge_p1p1_to_p3(ge_p3 *r, const ge_p1p1 *p) {"
        },
        {
          "name": "ge_p2_0",
          "line": 1373,
          "signature": "static void ge_p2_0(ge_p2 *h) {"
        },
        {
          "name": "ge_p2_dbl",
          "line": 1385,
          "signature": "void ge_p2_dbl(ge_p1p1 *r, const ge_p2 *p) {"
        },
        {
          "name": "ge_p3_0",
          "line": 1400,
          "signature": "static void ge_p3_0(ge_p3 *h) {"
        },
        {
          "name": "ge_p3_dbl",
          "line": 1413,
          "signature": "static void ge_p3_dbl(ge_p1p1 *r, const ge_p3 *p) {"
        },
        {
          "name": "ge_p3_to_cached",
          "line": 1425,
          "signature": "void ge_p3_to_cached(ge_cached *r, const ge_p3 *p) {"
        },
        {
          "name": "ge_p3_to_p2",
          "line": 1438,
          "signature": "void ge_p3_to_p2(ge_p2 *r, const ge_p3 *p) {"
        },
        {
          "name": "ge_p3_tobytes",
          "line": 1446,
          "signature": "void ge_p3_tobytes(unsigned char *s, const ge_p3 *h) {"
        },
        {
          "name": "ge_precomp_0",
          "line": 1460,
          "signature": "static void ge_precomp_0(ge_precomp *h) {"
        },
        {
          "name": "equal",
          "line": 1468,
          "signature": "static unsigned char equal(signed char b, signed char c) {"
        },
        {
          "name": "negative",
          "line": 1478,
          "signature": "static unsigned char negative(signed char b) {"
        },
        {
          "name": "ge_precomp_cmov",
          "line": 1484,
          "signature": "static void ge_precomp_cmov(ge_precomp *t, const ge_precomp *u, unsigned char b) {"
        },
        {
          "name": "select",
          "line": 1490,
          "signature": "static void select(ge_precomp *t, int pos, signed char b) {"
        },
        {
          "name": "ge_scalarmult_base",
          "line": 1519,
          "signature": "void ge_scalarmult_base(ge_p3 *h, const unsigned char *a) {"
        },
        {
          "name": "ge_sub",
          "line": 1567,
          "signature": "void ge_sub(ge_p1p1 *r, const ge_p3 *p, const ge_cached *q) {"
        },
        {
          "name": "ge_tobytes",
          "line": 1584,
          "signature": "void ge_tobytes(unsigned char *s, const ge_p2 *h) {"
        },
        {
          "name": "sc_reduce",
          "line": 1608,
          "signature": "void sc_reduce(unsigned char *s) {"
        },
        {
          "name": "fe_divpowm1",
          "line": 1839,
          "signature": "static void fe_divpowm1(fe r, const fe u, const fe v) {"
        },
        {
          "name": "ge_cached_0",
          "line": 1903,
          "signature": "static void ge_cached_0(ge_cached *r) {"
        },
        {
          "name": "ge_cached_cmov",
          "line": 1910,
          "signature": "static void ge_cached_cmov(ge_cached *t, const ge_cached *u, unsigned char b) {"
        },
        {
          "name": "ge_scalarmult",
          "line": 1918,
          "signature": "void ge_scalarmult(ge_p2 *r, const unsigned char *a, const ge_p3 *A) {"
        },
        {
          "name": "ge_double_scalarmult_precomp_vartime",
          "line": 1978,
          "signature": "void ge_double_scalarmult_precomp_vartime(ge_p2 *r, const unsigned char *a, const ge_p3 *A, const unsigned char *b, const ge_dsmp Bi) {"
        },
        {
          "name": "ge_mul8",
          "line": 2019,
          "signature": "void ge_mul8(ge_p1p1 *r, const ge_p2 *t) {"
        },
        {
          "name": "ge_fromfe_frombytes_vartime",
          "line": 2028,
          "signature": "void ge_fromfe_frombytes_vartime(ge_p2 *r, const unsigned char *s) {"
        },
        {
          "name": "sc_0",
          "line": 2144,
          "signature": "void sc_0(unsigned char *s) {"
        },
        {
          "name": "sc_reduce32",
          "line": 2151,
          "signature": "void sc_reduce32(unsigned char *s) {"
        },
        {
          "name": "sc_add",
          "line": 2266,
          "signature": "void sc_add(unsigned char *s, const unsigned char *a, const unsigned char *b) {"
        },
        {
          "name": "sc_sub",
          "line": 2405,
          "signature": "void sc_sub(unsigned char *s, const unsigned char *a, const unsigned char *b) {"
        },
        {
          "name": "sc_mulsub",
          "line": 2555,
          "signature": "void sc_mulsub(unsigned char *s, const unsigned char *a, const unsigned char *b, const unsigned char *c) {"
        },
        {
          "name": "signum",
          "line": 2877,
          "signature": "static int64_t signum(int64_t a) {"
        },
        {
          "name": "sc_check",
          "line": 2881,
          "signature": "int sc_check(const unsigned char *s) {"
        },
        {
          "name": "sc_isnonzero",
          "line": 2893,
          "signature": "int sc_isnonzero(const unsigned char *s) {"
        }
      ],
      "constants": []
    },
    "src/crypto/crypto-ops.h": {
      "path": "src/crypto/crypto-ops.h",
      "size": 2585,
      "lines": 120,
      "hash": "36a19ce827337aae",
      "functions": [
        {
          "name": "ge_add",
          "line": 44,
          "signature": "void ge_add(ge_p1p1 *, const ge_p3 *, const ge_cached *);"
        },
        {
          "name": "ge_dsm_precomp",
          "line": 50,
          "signature": "void ge_dsm_precomp(ge_dsmp r, const ge_p3 *s);"
        },
        {
          "name": "ge_double_scalarmult_base_vartime",
          "line": 51,
          "signature": "void ge_double_scalarmult_base_vartime(ge_p2 *, const unsigned char *, const ge_p3 *, const unsigned char *);"
        },
        {
          "name": "ge_frombytes_vartime",
          "line": 57,
          "signature": "int ge_frombytes_vartime(ge_p3 *, const unsigned char *);"
        },
        {
          "name": "ge_p1p1_to_p2",
          "line": 61,
          "signature": "void ge_p1p1_to_p2(ge_p2 *, const ge_p1p1 *);"
        },
        {
          "name": "ge_p1p1_to_p3",
          "line": 65,
          "signature": "void ge_p1p1_to_p3(ge_p3 *, const ge_p1p1 *);"
        },
        {
          "name": "ge_p2_dbl",
          "line": 69,
          "signature": "void ge_p2_dbl(ge_p1p1 *, const ge_p2 *);"
        },
        {
          "name": "ge_p3_to_cached",
          "line": 74,
          "signature": "void ge_p3_to_cached(ge_cached *, const ge_p3 *);"
        },
        {
          "name": "ge_p3_to_p2",
          "line": 78,
          "signature": "void ge_p3_to_p2(ge_p2 *, const ge_p3 *);"
        },
        {
          "name": "ge_p3_tobytes",
          "line": 82,
          "signature": "void ge_p3_tobytes(unsigned char *, const ge_p3 *);"
        },
        {
          "name": "ge_scalarmult_base",
          "line": 87,
          "signature": "void ge_scalarmult_base(ge_p3 *, const unsigned char *);"
        },
        {
          "name": "ge_sub",
          "line": 91,
          "signature": "void ge_sub(ge_p1p1 *, const ge_p3 *, const ge_cached *);"
        },
        {
          "name": "ge_tobytes",
          "line": 95,
          "signature": "void ge_tobytes(unsigned char *, const ge_p2 *);"
        },
        {
          "name": "sc_reduce",
          "line": 99,
          "signature": "void sc_reduce(unsigned char *);"
        },
        {
          "name": "ge_scalarmult",
          "line": 103,
          "signature": "void ge_scalarmult(ge_p2 *, const unsigned char *, const ge_p3 *);"
        },
        {
          "name": "ge_double_scalarmult_precomp_vartime",
          "line": 104,
          "signature": "void ge_double_scalarmult_precomp_vartime(ge_p2 *, const unsigned char *, const ge_p3 *, const unsigned char *, const ge_dsmp);"
        },
        {
          "name": "ge_mul8",
          "line": 105,
          "signature": "void ge_mul8(ge_p1p1 *, const ge_p2 *);"
        },
        {
          "name": "ge_fromfe_frombytes_vartime",
          "line": 112,
          "signature": "void ge_fromfe_frombytes_vartime(ge_p2 *, const unsigned char *);"
        },
        {
          "name": "sc_0",
          "line": 113,
          "signature": "void sc_0(unsigned char *);"
        },
        {
          "name": "sc_reduce32",
          "line": 114,
          "signature": "void sc_reduce32(unsigned char *);"
        },
        {
          "name": "sc_add",
          "line": 115,
          "signature": "void sc_add(unsigned char *, const unsigned char *, const unsigned char *);"
        },
        {
          "name": "sc_sub",
          "line": 116,
          "signature": "void sc_sub(unsigned char *, const unsigned char *, const unsigned char *);"
        },
        {
          "name": "sc_mulsub",
          "line": 117,
          "signature": "void sc_mulsub(unsigned char *, const unsigned char *, const unsigned char *, const unsigned char *);"
        },
        {
          "name": "sc_check",
          "line": 118,
          "signature": "int sc_check(const unsigned char *);"
        },
        {
          "name": "sc_isnonzero",
          "line": 119,
          "signature": "int sc_isnonzero(const unsigned char *); /* Doesn't normalize */"
        }
      ],
      "constants": []
    },
    "src/crypto/crypto-util.h": {
      "path": "src/crypto/crypto-util.h",
      "size": 1282,
      "lines": 37,
      "hash": "d09a1cf47d166b35",
      "functions": [
        {
          "name": "sodium_memzero",
          "line": 31,
          "signature": "void sodium_memzero(void *pnt, size_t length);"
        },
        {
          "name": "sodium_compare",
          "line": 32,
          "signature": "int sodium_compare(const void *a1, const void *a2, size_t length);"
        }
      ],
      "constants": []
    },
    "src/crypto/crypto.cpp": {
      "path": "src/crypto/crypto.cpp",
      "size": 24148,
      "lines": 603,
      "hash": "53405b13f2b41698",
      "functions": [
        {
          "name": "random_scalar",
          "line": 62,
          "signature": "static inline void random_scalar(EllipticCurveScalar &res) {"
        },
        {
          "name": "derivation_to_scalar",
          "line": 121,
          "signature": "static void derivation_to_scalar(const KeyDerivation &derivation, size_t output_index, EllipticCurveScalar &res) {"
        },
        {
          "name": "derivation_to_scalar",
          "line": 133,
          "signature": "static void derivation_to_scalar(const KeyDerivation &derivation, size_t output_index, const uint8_t* suffix, size_t suffixLength, EllipticCurveScalar &res) {"
        },
        {
          "name": "hash_to_ec",
          "line": 439,
          "signature": "static void hash_to_ec(const PublicKey &key, ge_p3 &res) {"
        },
        {
          "name": "rs_comm_size",
          "line": 497,
          "signature": "static inline size_t rs_comm_size(size_t pubs_count) {"
        }
      ],
      "constants": []
    },
    "src/crypto/crypto.h": {
      "path": "src/crypto/crypto.h",
      "size": 13807,
      "lines": 284,
      "hash": "dedb71004758bc0d",
      "functions": [
        {
          "name": "generate_keys",
          "line": 45,
          "signature": "static void generate_keys(PublicKey &, SecretKey &);"
        },
        {
          "name": "generate_keys",
          "line": 46,
          "signature": "friend void generate_keys(PublicKey &, SecretKey &);"
        },
        {
          "name": "generate_keys_from_seed",
          "line": 47,
          "signature": "static void generate_keys_from_seed(PublicKey &, SecretKey &, SecretKey &);"
        },
        {
          "name": "generate_keys_from_seed",
          "line": 48,
          "signature": "friend void generate_keys_from_seed(PublicKey &, SecretKey &, SecretKey &);"
        },
        {
          "name": "check_key",
          "line": 49,
          "signature": "static bool check_key(const PublicKey &);"
        },
        {
          "name": "check_key",
          "line": 50,
          "signature": "friend bool check_key(const PublicKey &);"
        },
        {
          "name": "secret_key_to_public_key",
          "line": 51,
          "signature": "static bool secret_key_to_public_key(const SecretKey &, PublicKey &);"
        },
        {
          "name": "secret_key_to_public_key",
          "line": 52,
          "signature": "friend bool secret_key_to_public_key(const SecretKey &, PublicKey &);"
        },
        {
          "name": "generate_key_derivation",
          "line": 53,
          "signature": "static bool generate_key_derivation(const PublicKey &, const SecretKey &, KeyDerivation &);"
        },
        {
          "name": "generate_key_derivation",
          "line": 54,
          "signature": "friend bool generate_key_derivation(const PublicKey &, const SecretKey &, KeyDerivation &);"
        },
        {
          "name": "derive_public_key",
          "line": 55,
          "signature": "static bool derive_public_key(const KeyDerivation &, size_t, const PublicKey &, PublicKey &);"
        },
        {
          "name": "derive_public_key",
          "line": 56,
          "signature": "friend bool derive_public_key(const KeyDerivation &, size_t, const PublicKey &, PublicKey &);"
        },
        {
          "name": "derive_public_key",
          "line": 57,
          "signature": "friend bool derive_public_key(const KeyDerivation &, size_t, const PublicKey &, const uint8_t*, size_t, PublicKey &);"
        },
        {
          "name": "derive_public_key",
          "line": 58,
          "signature": "static bool derive_public_key(const KeyDerivation &, size_t, const PublicKey &, const uint8_t*, size_t, PublicKey &);"
        },
        {
          "name": "underive_public_key_and_get_scalar",
          "line": 60,
          "signature": "static bool underive_public_key_and_get_scalar(const KeyDerivation &, std::size_t, const PublicKey &, PublicKey &, EllipticCurveScalar &);"
        },
        {
          "name": "underive_public_key_and_get_scalar",
          "line": 61,
          "signature": "friend bool underive_public_key_and_get_scalar(const KeyDerivation &, std::size_t, const PublicKey &, PublicKey &, EllipticCurveScalar &);"
        },
        {
          "name": "generate_incomplete_key_image",
          "line": 62,
          "signature": "static void generate_incomplete_key_image(const PublicKey &, EllipticCurvePoint &);"
        },
        {
          "name": "generate_incomplete_key_image",
          "line": 63,
          "signature": "friend void generate_incomplete_key_image(const PublicKey &, EllipticCurvePoint &);"
        },
        {
          "name": "derive_secret_key",
          "line": 65,
          "signature": "static void derive_secret_key(const KeyDerivation &, size_t, const SecretKey &, SecretKey &);"
        },
        {
          "name": "derive_secret_key",
          "line": 66,
          "signature": "friend void derive_secret_key(const KeyDerivation &, size_t, const SecretKey &, SecretKey &);"
        },
        {
          "name": "derive_secret_key",
          "line": 67,
          "signature": "static void derive_secret_key(const KeyDerivation &, size_t, const SecretKey &, const uint8_t*, size_t, SecretKey &);"
        },
        {
          "name": "derive_secret_key",
          "line": 68,
          "signature": "friend void derive_secret_key(const KeyDerivation &, size_t, const SecretKey &, const uint8_t*, size_t, SecretKey &);"
        },
        {
          "name": "underive_public_key",
          "line": 69,
          "signature": "static bool underive_public_key(const KeyDerivation &, size_t, const PublicKey &, PublicKey &);"
        },
        {
          "name": "underive_public_key",
          "line": 70,
          "signature": "friend bool underive_public_key(const KeyDerivation &, size_t, const PublicKey &, PublicKey &);"
        },
        {
          "name": "underive_public_key",
          "line": 71,
          "signature": "static bool underive_public_key(const KeyDerivation &, size_t, const PublicKey &, const uint8_t*, size_t, PublicKey &);"
        },
        {
          "name": "underive_public_key",
          "line": 72,
          "signature": "friend bool underive_public_key(const KeyDerivation &, size_t, const PublicKey &, const uint8_t*, size_t, PublicKey &);"
        },
        {
          "name": "generate_signature",
          "line": 73,
          "signature": "static void generate_signature(const Hash &, const PublicKey &, const SecretKey &, Signature &);"
        },
        {
          "name": "generate_signature",
          "line": 74,
          "signature": "friend void generate_signature(const Hash &, const PublicKey &, const SecretKey &, Signature &);"
        },
        {
          "name": "check_signature",
          "line": 75,
          "signature": "static bool check_signature(const Hash &, const PublicKey &, const Signature &);"
        },
        {
          "name": "check_signature",
          "line": 76,
          "signature": "friend bool check_signature(const Hash &, const PublicKey &, const Signature &);"
        },
        {
          "name": "generate_key_image",
          "line": 77,
          "signature": "static void generate_key_image(const PublicKey &, const SecretKey &, KeyImage &);"
        },
        {
          "name": "generate_key_image",
          "line": 78,
          "signature": "friend void generate_key_image(const PublicKey &, const SecretKey &, KeyImage &);"
        },
        {
          "name": "scalarmultKey",
          "line": 79,
          "signature": "static KeyImage scalarmultKey(const KeyImage & P, const KeyImage & a);"
        },
        {
          "name": "scalarmultKey",
          "line": 80,
          "signature": "friend KeyImage scalarmultKey(const KeyImage & P, const KeyImage & a);"
        },
        {
          "name": "hash_data_to_ec",
          "line": 81,
          "signature": "static void hash_data_to_ec(const uint8_t*, std::size_t, PublicKey&);"
        },
        {
          "name": "hash_data_to_ec",
          "line": 82,
          "signature": "friend void hash_data_to_ec(const uint8_t*, std::size_t, PublicKey&);"
        },
        {
          "name": "generate_tx_proof",
          "line": 85,
          "signature": "static void generate_tx_proof(const Hash &, const PublicKey &, const PublicKey &, const PublicKey &, const SecretKey &, Signature &);"
        },
        {
          "name": "generate_tx_proof",
          "line": 86,
          "signature": "friend void generate_tx_proof(const Hash &, const PublicKey &, const PublicKey &, const PublicKey &, const SecretKey &, Signature &);"
        },
        {
          "name": "check_tx_proof",
          "line": 87,
          "signature": "static bool check_tx_proof(const Hash &, const PublicKey &, const PublicKey &, const PublicKey &, const Signature &);"
        },
        {
          "name": "check_tx_proof",
          "line": 88,
          "signature": "friend bool check_tx_proof(const Hash &, const PublicKey &, const PublicKey &, const PublicKey &, const Signature &);"
        },
        {
          "name": "min",
          "line": 118,
          "signature": "constexpr static T min() {"
        },
        {
          "name": "max",
          "line": 122,
          "signature": "constexpr static T max() {"
        },
        {
          "name": "hash_to_scalar",
          "line": 139,
          "signature": "void hash_to_scalar(const void *data, size_t length, EllipticCurveScalar &res);"
        },
        {
          "name": "generate_keys",
          "line": 143,
          "signature": "inline void generate_keys(PublicKey &pub, SecretKey &sec) {"
        },
        {
          "name": "check_key",
          "line": 149,
          "signature": "inline bool check_key(const PublicKey &key) {"
        },
        {
          "name": "secret_key_to_public_key",
          "line": 155,
          "signature": "inline bool secret_key_to_public_key(const SecretKey &sec, PublicKey &pub) {"
        },
        {
          "name": "generate_keys_from_seed",
          "line": 161,
          "signature": "inline void generate_keys_from_seed(PublicKey &pub, SecretKey &sec, SecretKey &seed) {"
        },
        {
          "name": "generate_key_derivation",
          "line": 171,
          "signature": "inline bool generate_key_derivation(const PublicKey &key1, const SecretKey &key2, KeyDerivation &derivation) {"
        },
        {
          "name": "generate_signature",
          "line": 216,
          "signature": "inline void generate_signature(const Hash &prefix_hash, const PublicKey &pub, const SecretKey &sec, Signature &sig) {"
        },
        {
          "name": "check_signature",
          "line": 219,
          "signature": "inline bool check_signature(const Hash &prefix_hash, const PublicKey &pub, const Signature &sig) {"
        },
        {
          "name": "generate_tx_proof",
          "line": 226,
          "signature": "inline void generate_tx_proof(const Hash &prefix_hash, const PublicKey &R, const PublicKey &A, const PublicKey &D, const SecretKey &r, Signature &sig) {"
        },
        {
          "name": "check_tx_proof",
          "line": 229,
          "signature": "inline bool check_tx_proof(const Hash &prefix_hash, const PublicKey &R, const PublicKey &A, const PublicKey &D, const Signature &sig) {"
        },
        {
          "name": "generate_key_image",
          "line": 239,
          "signature": "inline void generate_key_image(const PublicKey &pub, const SecretKey &sec, KeyImage &image) {"
        },
        {
          "name": "scalarmultKey",
          "line": 243,
          "signature": "inline KeyImage scalarmultKey(const KeyImage & P, const KeyImage & a) {"
        },
        {
          "name": "hash_data_to_ec",
          "line": 247,
          "signature": "inline void hash_data_to_ec(const uint8_t* data, std::size_t len, PublicKey& key) {"
        }
      ],
      "constants": []
    },
    "src/crypto/generic-ops.h": {
      "path": "src/crypto/generic-ops.h",
      "size": 1730,
      "lines": 50,
      "hash": "ac14f64ef1922384",
      "functions": [
        {
          "name": "hash_value",
          "line": 38,
          "signature": "inline size_t hash_value(const type &_v) { \\"
        }
      ],
      "constants": []
    },
    "src/crypto/groestl.c": {
      "path": "src/crypto/groestl.c",
      "size": 11120,
      "lines": 360,
      "hash": "05ae34675322c6c8",
      "functions": [
        {
          "name": "RND512P",
          "line": 67,
          "signature": "static void RND512P(uint8_t *x, uint32_t *y, uint32_t r) {"
        },
        {
          "name": "RND512Q",
          "line": 89,
          "signature": "static void RND512Q(uint8_t *x, uint32_t *y, uint32_t r) {"
        },
        {
          "name": "F512",
          "line": 119,
          "signature": "static void F512(uint32_t *h, const uint32_t *m) {"
        },
        {
          "name": "OutputTransformation",
          "line": 179,
          "signature": "static void OutputTransformation(hashState *ctx) {"
        },
        {
          "name": "Init",
          "line": 206,
          "signature": "static void Init(hashState* ctx) {"
        }
      ],
      "constants": [
        {
          "name": "P_TYPE",
          "line": 14,
          "value": "0"
        },
        {
          "name": "Q_TYPE",
          "line": 15,
          "value": "1"
        },
        {
          "name": "BILB",
          "line": 271,
          "value": "ctx->bits_in_last_byte"
        }
      ]
    },
    "src/crypto/groestl.h": {
      "path": "src/crypto/groestl.h",
      "size": 1511,
      "lines": 61,
      "hash": "8098e396b9d86c86",
      "functions": [
        {
          "name": "Update",
          "line": 49,
          "signature": "void Update(hashState*, const BitSequence*, DataLength);"
        },
        {
          "name": "Final",
          "line": 50,
          "signature": "void Final(hashState*, BitSequence*); */"
        },
        {
          "name": "groestl",
          "line": 51,
          "signature": "void groestl(const BitSequence*, DataLength, BitSequence*);"
        }
      ],
      "constants": [
        {
          "name": "ROWS",
          "line": 16,
          "value": "8"
        },
        {
          "name": "LENGTHFIELDLEN",
          "line": 17,
          "value": "ROWS"
        },
        {
          "name": "COLS512",
          "line": 18,
          "value": "8"
        },
        {
          "name": "SIZE512",
          "line": 20,
          "value": "(ROWS*COLS512)"
        },
        {
          "name": "ROUNDS512",
          "line": 22,
          "value": "10"
        },
        {
          "name": "HASH_BIT_LEN",
          "line": 23,
          "value": "256"
        }
      ]
    },
    "src/crypto/groestl_tables.h": {
      "path": "src/crypto/groestl_tables.h",
      "size": 6222,
      "lines": 39,
      "hash": "3b5c773557c0e20e",
      "functions": [],
      "constants": []
    },
    "src/crypto/hash-extra-blake.c": {
      "path": "src/crypto/hash-extra-blake.c",
      "size": 1030,
      "lines": 26,
      "hash": "17e30d31db57a269",
      "functions": [
        {
          "name": "hash_extra_blake",
          "line": 23,
          "signature": "void hash_extra_blake(const void *data, size_t length, char *hash) {"
        }
      ],
      "constants": []
    },
    "src/crypto/hash-extra-groestl.c": {
      "path": "src/crypto/hash-extra-groestl.c",
      "size": 1029,
      "lines": 26,
      "hash": "012f8242cfe8144d",
      "functions": [
        {
          "name": "hash_extra_groestl",
          "line": 23,
          "signature": "void hash_extra_groestl(const void *data, size_t length, char *hash) {"
        }
      ],
      "constants": []
    },
    "src/crypto/hash-extra-jh.c": {
      "path": "src/crypto/hash-extra-jh.c",
      "size": 1128,
      "lines": 30,
      "hash": "bacaa83668491d2d",
      "functions": [
        {
          "name": "hash_extra_jh",
          "line": 26,
          "signature": "void hash_extra_jh(const void *data, size_t length, char *hash) {"
        }
      ],
      "constants": []
    },
    "src/crypto/hash-extra-skein.c": {
      "path": "src/crypto/hash-extra-skein.c",
      "size": 1103,
      "lines": 28,
      "hash": "392e6cad1a0b8a47",
      "functions": [
        {
          "name": "hash_extra_skein",
          "line": 24,
          "signature": "void hash_extra_skein(const void *data, size_t length, char *hash) {"
        }
      ],
      "constants": []
    },
    "src/crypto/hash-ops.h": {
      "path": "src/crypto/hash-ops.h",
      "size": 2743,
      "lines": 79,
      "hash": "276751c0867fa22b",
      "functions": [
        {
          "name": "place_length",
          "line": 39,
          "signature": "static inline void place_length(uint8_t *buffer, size_t bufsize, size_t length) {"
        },
        {
          "name": "hash_permutation",
          "line": 55,
          "signature": "void hash_permutation(union hash_state *state);"
        },
        {
          "name": "hash_process",
          "line": 56,
          "signature": "void hash_process(union hash_state *state, const uint8_t *buf, size_t count);"
        },
        {
          "name": "cn_fast_hash",
          "line": 66,
          "signature": "void cn_fast_hash(const void *data, size_t length, char *hash);"
        },
        {
          "name": "cn_slow_hash",
          "line": 68,
          "signature": "void cn_slow_hash(const void *data, size_t length, char *hash, int light, int variant, int prehashed);"
        },
        {
          "name": "hash_extra_blake",
          "line": 70,
          "signature": "void hash_extra_blake(const void *data, size_t length, char *hash);"
        },
        {
          "name": "hash_extra_groestl",
          "line": 71,
          "signature": "void hash_extra_groestl(const void *data, size_t length, char *hash);"
        },
        {
          "name": "hash_extra_jh",
          "line": 72,
          "signature": "void hash_extra_jh(const void *data, size_t length, char *hash);"
        },
        {
          "name": "hash_extra_skein",
          "line": 73,
          "signature": "void hash_extra_skein(const void *data, size_t length, char *hash);"
        },
        {
          "name": "tree_depth",
          "line": 76,
          "signature": "size_t tree_depth(size_t count);"
        }
      ],
      "constants": []
    },
    "src/crypto/hash.c": {
      "path": "src/crypto/hash.c",
      "size": 830,
      "lines": 27,
      "hash": "20a91675ba3c1c9f",
      "functions": [
        {
          "name": "hash_permutation",
          "line": 14,
          "signature": "void hash_permutation(union hash_state *state) {"
        },
        {
          "name": "hash_process",
          "line": 18,
          "signature": "void hash_process(union hash_state *state, const uint8_t *buf, size_t count) {"
        },
        {
          "name": "cn_fast_hash",
          "line": 22,
          "signature": "void cn_fast_hash(const void *data, size_t length, char *hash) {"
        }
      ],
      "constants": []
    },
    "src/crypto/hash.h": {
      "path": "src/crypto/hash.h",
      "size": 2887,
      "lines": 84,
      "hash": "f0740e6b2d8ec6e6",
      "functions": [
        {
          "name": "cn_fast_hash",
          "line": 35,
          "signature": "inline void cn_fast_hash(const void *data, size_t length, Hash &hash) {"
        },
        {
          "name": "cn_fast_hash",
          "line": 39,
          "signature": "inline Hash cn_fast_hash(const void *data, size_t length) {"
        },
        {
          "name": "cn_slow_hash",
          "line": 58,
          "signature": "friend inline void cn_slow_hash(cn_context &, const void *, size_t, Hash &, int, int, int);"
        },
        {
          "name": "cn_slow_hash",
          "line": 61,
          "signature": "inline void cn_slow_hash(cn_context &context, const void *data, size_t length, Hash &hash, int light = 0, int variant = 0, int prehashed = 0) {"
        },
        {
          "name": "cn_slow_hash_prehashed",
          "line": 65,
          "signature": "inline void cn_slow_hash_prehashed(const void *data, std::size_t length, Hash &hash, int light = 0, int variant = 0, int prehashed = 0) {"
        },
        {
          "name": "tree_hash",
          "line": 69,
          "signature": "inline void tree_hash(const Hash *hashes, size_t count, Hash &root_hash) {"
        },
        {
          "name": "tree_branch",
          "line": 73,
          "signature": "inline void tree_branch(const Hash *hashes, size_t count, Hash *branch) {"
        },
        {
          "name": "tree_hash_from_branch",
          "line": 77,
          "signature": "inline void tree_hash_from_branch(const Hash *branch, size_t depth, const Hash &leaf, const void *path, Hash &root_hash) {"
        }
      ],
      "constants": []
    },
    "src/crypto/initializer.h": {
      "path": "src/crypto/initializer.h",
      "size": 1727,
      "lines": 46,
      "hash": "82f9e4c43ff21602",
      "functions": [
        {
          "name": "name",
          "line": 32,
          "signature": "static void __cdecl name(void); \\"
        }
      ],
      "constants": []
    },
    "src/crypto/jh.c": {
      "path": "src/crypto/jh.c",
      "size": 25379,
      "lines": 368,
      "hash": "c25e2c3a29462b70",
      "functions": [
        {
          "name": "E8",
          "line": 93,
          "signature": "static void E8(hashState *state);  /*The bijective function E8, in bitslice form*/"
        },
        {
          "name": "F8",
          "line": 94,
          "signature": "static void F8(hashState *state);  /*The compression function F8 */"
        },
        {
          "name": "Init",
          "line": 97,
          "signature": "static HashReturn Init(hashState *state, int hashbitlen);"
        },
        {
          "name": "Update",
          "line": 98,
          "signature": "static HashReturn Update(hashState *state, const BitSequence *data, DataLength databitlen);"
        },
        {
          "name": "Final",
          "line": 99,
          "signature": "static HashReturn Final(hashState *state, BitSequence *hashval);"
        },
        {
          "name": "jh_hash",
          "line": 100,
          "signature": "HashReturn jh_hash(int hashbitlen, const BitSequence *data,DataLength databitlen, BitSequence *hashval);"
        }
      ],
      "constants": []
    },
    "src/crypto/jh.h": {
      "path": "src/crypto/jh.h",
      "size": 828,
      "lines": 22,
      "hash": "ca4f3570ce36a46b",
      "functions": [
        {
          "name": "jh_hash",
          "line": 21,
          "signature": "HashReturn jh_hash(int hashbitlen, const BitSequence *data, DataLength databitlen, BitSequence *hashval);"
        }
      ],
      "constants": []
    },
    "src/crypto/keccak.c": {
      "path": "src/crypto/keccak.c",
      "size": 2990,
      "lines": 115,
      "hash": "b81852205391af82",
      "functions": [],
      "constants": [
        {
          "name": "HASH_DATA_AREA",
          "line": 82,
          "value": "136"
        }
      ]
    },
    "src/crypto/keccak.h": {
      "path": "src/crypto/keccak.h",
      "size": 541,
      "lines": 27,
      "hash": "34f1b5f3ba662fa4",
      "functions": [
        {
          "name": "keccak",
          "line": 19,
          "signature": "int keccak(const uint8_t *in, int inlen, uint8_t *md, int mdlen);"
        },
        {
          "name": "keccakf",
          "line": 22,
          "signature": "void keccakf(uint64_t st[25], int norounds);"
        },
        {
          "name": "keccak1600",
          "line": 24,
          "signature": "void keccak1600(const uint8_t *in, int inlen, uint8_t *md);"
        }
      ],
      "constants": [
        {
          "name": "KECCAK_ROUNDS",
          "line": 11,
          "value": "24"
        }
      ]
    },
    "src/crypto/oaes_config.h": {
      "path": "src/crypto/oaes_config.h",
      "size": 1955,
      "lines": 51,
      "hash": "6d0f0120e9a72b6e",
      "functions": [],
      "constants": []
    },
    "src/crypto/oaes_lib.c": {
      "path": "src/crypto/oaes_lib.c",
      "size": 44705,
      "lines": 1501,
      "hash": "69f2a99119124596",
      "functions": [
        {
          "name": "oaes_key_gen",
          "line": 669,
          "signature": "return oaes_key_gen( ctx, 16 );"
        },
        {
          "name": "oaes_key_gen",
          "line": 674,
          "signature": "return oaes_key_gen( ctx, 24 );"
        },
        {
          "name": "oaes_key_gen",
          "line": 679,
          "signature": "return oaes_key_gen( ctx, 32 );"
        }
      ],
      "constants": [
        {
          "name": "OAES_RKEY_LEN",
          "line": 63,
          "value": "4"
        },
        {
          "name": "OAES_COL_LEN",
          "line": 64,
          "value": "4"
        },
        {
          "name": "OAES_ROUND_BASE",
          "line": 65,
          "value": "7"
        },
        {
          "name": "OAES_FLAG_PAD",
          "line": 68,
          "value": "0x01"
        }
      ]
    },
    "src/crypto/oaes_lib.h": {
      "path": "src/crypto/oaes_lib.h",
      "size": 5777,
      "lines": 216,
      "hash": "0a272a6f91391fdf",
      "functions": [
        {
          "name": "oaes_free",
          "line": 166,
          "signature": "OAES_API OAES_RET oaes_free( OAES_CTX ** ctx );"
        },
        {
          "name": "oaes_key_gen_128",
          "line": 171,
          "signature": "OAES_API OAES_RET oaes_key_gen_128( OAES_CTX * ctx );"
        },
        {
          "name": "oaes_key_gen_192",
          "line": 173,
          "signature": "OAES_API OAES_RET oaes_key_gen_192( OAES_CTX * ctx );"
        },
        {
          "name": "oaes_key_gen_256",
          "line": 175,
          "signature": "OAES_API OAES_RET oaes_key_gen_256( OAES_CTX * ctx );"
        },
        {
          "name": "oaes_encryption_round",
          "line": 207,
          "signature": "OAES_API OAES_RET oaes_encryption_round( const uint8_t * key, uint8_t * c );"
        },
        {
          "name": "oaes_pseudo_encrypt_ecb",
          "line": 209,
          "signature": "OAES_API OAES_RET oaes_pseudo_encrypt_ecb( OAES_CTX * ctx, uint8_t * c );"
        }
      ],
      "constants": [
        {
          "name": "OAES_VERSION",
          "line": 55,
          "value": "\"0.8.1\""
        },
        {
          "name": "OAES_BLOCK_SIZE",
          "line": 56,
          "value": "16"
        },
        {
          "name": "OAES_OPTION_NONE",
          "line": 82,
          "value": "0"
        },
        {
          "name": "OAES_OPTION_ECB",
          "line": 84,
          "value": "1"
        },
        {
          "name": "OAES_OPTION_CBC",
          "line": 88,
          "value": "2"
        },
        {
          "name": "OAES_OPTION_STEP_ON",
          "line": 98,
          "value": "4"
        },
        {
          "name": "OAES_OPTION_STEP_OFF",
          "line": 100,
          "value": "8"
        }
      ]
    },
    "src/crypto/random.c": {
      "path": "src/crypto/random.c",
      "size": 3320,
      "lines": 131,
      "hash": "579fe6123da99c55",
      "functions": [
        {
          "name": "generate_system_random_bytes",
          "line": 26,
          "signature": "static void generate_system_random_bytes(size_t n, void *result);"
        },
        {
          "name": "generate_system_random_bytes",
          "line": 33,
          "signature": "static void generate_system_random_bytes(size_t n, void *result) {"
        },
        {
          "name": "generate_system_random_bytes",
          "line": 52,
          "signature": "static void generate_system_random_bytes(size_t n, void *result) {"
        },
        {
          "name": "generate_random_bytes",
          "line": 103,
          "signature": "void generate_random_bytes(size_t n, void *result) {"
        }
      ],
      "constants": []
    },
    "src/crypto/random.h": {
      "path": "src/crypto/random.h",
      "size": 968,
      "lines": 25,
      "hash": "a1effd2b1144bea0",
      "functions": [
        {
          "name": "generate_random_bytes",
          "line": 24,
          "signature": "void generate_random_bytes(size_t n, void *result);"
        }
      ],
      "constants": []
    },
    "src/crypto/randomize.h": {
      "path": "src/crypto/randomize.h",
      "size": 2953,
      "lines": 99,
      "hash": "f038c7463997067e",
      "functions": [
        {
          "name": "distribution",
          "line": 73,
          "signature": "return distribution(gen);"
        },
        {
          "name": "distribution",
          "line": 87,
          "signature": "return distribution(gen);"
        }
      ],
      "constants": []
    },
    "src/crypto/skein.c": {
      "path": "src/crypto/skein.c",
      "size": 84748,
      "lines": 2037,
      "hash": "96bdda389bcb9b87",
      "functions": [
        {
          "name": "Skein_256_Init",
          "line": 81,
          "signature": "static int  Skein_256_Init  (Skein_256_Ctxt_t *ctx, size_t hashBitLen);"
        },
        {
          "name": "Skein_512_Init",
          "line": 83,
          "signature": "static int  Skein_512_Init  (Skein_512_Ctxt_t *ctx, size_t hashBitLen);"
        },
        {
          "name": "Skein1024_Init",
          "line": 84,
          "signature": "static int  Skein1024_Init  (Skein1024_Ctxt_t *ctx, size_t hashBitLen);"
        },
        {
          "name": "Skein_256_Update",
          "line": 86,
          "signature": "static int  Skein_256_Update(Skein_256_Ctxt_t *ctx, const u08b_t *msg, size_t msgByteCnt);"
        },
        {
          "name": "Skein_512_Update",
          "line": 87,
          "signature": "static int  Skein_512_Update(Skein_512_Ctxt_t *ctx, const u08b_t *msg, size_t msgByteCnt);"
        },
        {
          "name": "Skein1024_Update",
          "line": 88,
          "signature": "static int  Skein1024_Update(Skein1024_Ctxt_t *ctx, const u08b_t *msg, size_t msgByteCnt);"
        },
        {
          "name": "Skein_256_Final",
          "line": 90,
          "signature": "static int  Skein_256_Final (Skein_256_Ctxt_t *ctx, u08b_t * hashVal);"
        },
        {
          "name": "Skein_512_Final",
          "line": 91,
          "signature": "static int  Skein_512_Final (Skein_512_Ctxt_t *ctx, u08b_t * hashVal);"
        },
        {
          "name": "Skein1024_Final",
          "line": 92,
          "signature": "static int  Skein1024_Final (Skein1024_Ctxt_t *ctx, u08b_t * hashVal);"
        },
        {
          "name": "Skein_256_InitExt",
          "line": 109,
          "signature": "static int  Skein_256_InitExt(Skein_256_Ctxt_t *ctx, size_t hashBitLen, u64b_t treeInfo, const u08b_t *key, size_t keyBytes);"
        },
        {
          "name": "Skein_512_InitExt",
          "line": 110,
          "signature": "static int  Skein_512_InitExt(Skein_512_Ctxt_t *ctx, size_t hashBitLen, u64b_t treeInfo, const u08b_t *key, size_t keyBytes);"
        },
        {
          "name": "Skein1024_InitExt",
          "line": 111,
          "signature": "static int  Skein1024_InitExt(Skein1024_Ctxt_t *ctx, size_t hashBitLen, u64b_t treeInfo, const u08b_t *key, size_t keyBytes);"
        },
        {
          "name": "Skein_256_Final_Pad",
          "line": 120,
          "signature": "static int  Skein_256_Final_Pad(Skein_256_Ctxt_t *ctx, u08b_t * hashVal);"
        },
        {
          "name": "Skein_512_Final_Pad",
          "line": 121,
          "signature": "static int  Skein_512_Final_Pad(Skein_512_Ctxt_t *ctx, u08b_t * hashVal);"
        },
        {
          "name": "Skein1024_Final_Pad",
          "line": 122,
          "signature": "static int  Skein1024_Final_Pad(Skein1024_Ctxt_t *ctx, u08b_t * hashVal);"
        },
        {
          "name": "Skein_256_Output",
          "line": 130,
          "signature": "static int  Skein_256_Output   (Skein_256_Ctxt_t *ctx, u08b_t * hashVal);"
        },
        {
          "name": "Skein_512_Output",
          "line": 131,
          "signature": "static int  Skein_512_Output   (Skein_512_Ctxt_t *ctx, u08b_t * hashVal);"
        },
        {
          "name": "Skein1024_Output",
          "line": 132,
          "signature": "static int  Skein1024_Output   (Skein1024_Ctxt_t *ctx, u08b_t * hashVal);"
        },
        {
          "name": "Init",
          "line": 1936,
          "signature": "static HashReturn Init  (hashState *state, int hashbitlen);"
        },
        {
          "name": "Update",
          "line": 1937,
          "signature": "static HashReturn Update(hashState *state, const BitSequence *data, DataLength databitlen);"
        },
        {
          "name": "Final",
          "line": 1938,
          "signature": "static HashReturn Final (hashState *state,       BitSequence *hashval);"
        }
      ],
      "constants": [
        {
          "name": "SKEIN_PORT_CODE",
          "line": 11,
          "value": "/* instantiate any code in skein_port.h */"
        },
        {
          "name": "DISABLE_UNUSED",
          "line": 17,
          "value": "0"
        },
        {
          "name": "SKEIN_256_NIST_MAX_HASHBITS",
          "line": 20,
          "value": "(0)"
        },
        {
          "name": "SKEIN_512_NIST_MAX_HASHBITS",
          "line": 24,
          "value": "(512)"
        },
        {
          "name": "SKEIN_MODIFIER_WORDS",
          "line": 27,
          "value": "( 2)          /* number of modifier (tweak) words */"
        },
        {
          "name": "SKEIN_256_STATE_WORDS",
          "line": 29,
          "value": "( 4)"
        },
        {
          "name": "SKEIN_512_STATE_WORDS",
          "line": 30,
          "value": "( 8)"
        },
        {
          "name": "SKEIN1024_STATE_WORDS",
          "line": 31,
          "value": "(16)"
        },
        {
          "name": "SKEIN_MAX_STATE_WORDS",
          "line": 32,
          "value": "(16)"
        },
        {
          "name": "SKEIN_256_STATE_BYTES",
          "line": 34,
          "value": "( 8*SKEIN_256_STATE_WORDS)"
        },
        {
          "name": "SKEIN_512_STATE_BYTES",
          "line": 35,
          "value": "( 8*SKEIN_512_STATE_WORDS)"
        },
        {
          "name": "SKEIN1024_STATE_BYTES",
          "line": 36,
          "value": "( 8*SKEIN1024_STATE_WORDS)"
        },
        {
          "name": "SKEIN_256_STATE_BITS",
          "line": 38,
          "value": "(64*SKEIN_256_STATE_WORDS)"
        },
        {
          "name": "SKEIN_512_STATE_BITS",
          "line": 39,
          "value": "(64*SKEIN_512_STATE_WORDS)"
        },
        {
          "name": "SKEIN1024_STATE_BITS",
          "line": 40,
          "value": "(64*SKEIN1024_STATE_WORDS)"
        },
        {
          "name": "SKEIN_256_BLOCK_BYTES",
          "line": 42,
          "value": "( 8*SKEIN_256_STATE_WORDS)"
        },
        {
          "name": "SKEIN_512_BLOCK_BYTES",
          "line": 43,
          "value": "( 8*SKEIN_512_STATE_WORDS)"
        },
        {
          "name": "SKEIN1024_BLOCK_BYTES",
          "line": 44,
          "value": "( 8*SKEIN1024_STATE_WORDS)"
        },
        {
          "name": "SKEIN_RND_SPECIAL",
          "line": 46,
          "value": "(1000u)"
        },
        {
          "name": "SKEIN_RND_KEY_INITIAL",
          "line": 47,
          "value": "(SKEIN_RND_SPECIAL+0u)"
        },
        {
          "name": "SKEIN_RND_KEY_INJECT",
          "line": 48,
          "value": "(SKEIN_RND_SPECIAL+1u)"
        },
        {
          "name": "SKEIN_RND_FEED_FWD",
          "line": 49,
          "value": "(SKEIN_RND_SPECIAL+2u)"
        },
        {
          "name": "SKEIN_TREE_HASH",
          "line": 126,
          "value": "(1)"
        },
        {
          "name": "SKEIN_T1_POS_TREE_LVL",
          "line": 147,
          "value": "SKEIN_T1_BIT(112)       /* bits 112..118: level in hash tree       */"
        },
        {
          "name": "SKEIN_T1_POS_BIT_PAD",
          "line": 148,
          "value": "SKEIN_T1_BIT(119)       /* bit  119     : partial final input byte */"
        },
        {
          "name": "SKEIN_T1_POS_BLK_TYPE",
          "line": 149,
          "value": "SKEIN_T1_BIT(120)       /* bits 120..125: type field               */"
        },
        {
          "name": "SKEIN_T1_POS_FIRST",
          "line": 150,
          "value": "SKEIN_T1_BIT(126)       /* bits 126     : first block flag         */"
        },
        {
          "name": "SKEIN_T1_POS_FINAL",
          "line": 151,
          "value": "SKEIN_T1_BIT(127)       /* bit  127     : final block flag         */"
        },
        {
          "name": "SKEIN_T1_FLAG_FIRST",
          "line": 154,
          "value": "(((u64b_t)  1 ) << SKEIN_T1_POS_FIRST)"
        },
        {
          "name": "SKEIN_T1_FLAG_FINAL",
          "line": 155,
          "value": "(((u64b_t)  1 ) << SKEIN_T1_POS_FINAL)"
        },
        {
          "name": "SKEIN_T1_FLAG_BIT_PAD",
          "line": 156,
          "value": "(((u64b_t)  1 ) << SKEIN_T1_POS_BIT_PAD)"
        },
        {
          "name": "SKEIN_T1_TREE_LVL_MASK",
          "line": 159,
          "value": "(((u64b_t)0x7F) << SKEIN_T1_POS_TREE_LVL)"
        },
        {
          "name": "SKEIN_BLK_TYPE_KEY",
          "line": 163,
          "value": "( 0)                    /* key, for MAC and KDF */"
        },
        {
          "name": "SKEIN_BLK_TYPE_CFG",
          "line": 164,
          "value": "( 4)                    /* configuration block */"
        },
        {
          "name": "SKEIN_BLK_TYPE_PERS",
          "line": 165,
          "value": "( 8)                    /* personalization string */"
        },
        {
          "name": "SKEIN_BLK_TYPE_PK",
          "line": 166,
          "value": "(12)                    /* public key (for digital signature hashing) */"
        },
        {
          "name": "SKEIN_BLK_TYPE_KDF",
          "line": 167,
          "value": "(16)                    /* key identifier for KDF */"
        },
        {
          "name": "SKEIN_BLK_TYPE_NONCE",
          "line": 168,
          "value": "(20)                    /* nonce for PRNG */"
        },
        {
          "name": "SKEIN_BLK_TYPE_MSG",
          "line": 169,
          "value": "(48)                    /* message processing */"
        },
        {
          "name": "SKEIN_BLK_TYPE_OUT",
          "line": 170,
          "value": "(63)                    /* output stage */"
        },
        {
          "name": "SKEIN_BLK_TYPE_MASK",
          "line": 171,
          "value": "(63)                    /* bit field mask */"
        },
        {
          "name": "SKEIN_T1_BLK_TYPE_KEY",
          "line": 174,
          "value": "SKEIN_T1_BLK_TYPE(KEY)  /* key, for MAC and KDF */"
        },
        {
          "name": "SKEIN_T1_BLK_TYPE_CFG",
          "line": 175,
          "value": "SKEIN_T1_BLK_TYPE(CFG)  /* configuration block */"
        },
        {
          "name": "SKEIN_T1_BLK_TYPE_PERS",
          "line": 176,
          "value": "SKEIN_T1_BLK_TYPE(PERS) /* personalization string */"
        },
        {
          "name": "SKEIN_T1_BLK_TYPE_PK",
          "line": 177,
          "value": "SKEIN_T1_BLK_TYPE(PK)   /* public key (for digital signature hashing) */"
        },
        {
          "name": "SKEIN_T1_BLK_TYPE_KDF",
          "line": 178,
          "value": "SKEIN_T1_BLK_TYPE(KDF)  /* key identifier for KDF */"
        },
        {
          "name": "SKEIN_T1_BLK_TYPE_NONCE",
          "line": 179,
          "value": "SKEIN_T1_BLK_TYPE(NONCE)/* nonce for PRNG */"
        },
        {
          "name": "SKEIN_T1_BLK_TYPE_MSG",
          "line": 180,
          "value": "SKEIN_T1_BLK_TYPE(MSG)  /* message processing */"
        },
        {
          "name": "SKEIN_T1_BLK_TYPE_OUT",
          "line": 181,
          "value": "SKEIN_T1_BLK_TYPE(OUT)  /* output stage */"
        },
        {
          "name": "SKEIN_T1_BLK_TYPE_MASK",
          "line": 182,
          "value": "SKEIN_T1_BLK_TYPE(MASK) /* field bit mask */"
        },
        {
          "name": "SKEIN_T1_BLK_TYPE_CFG_FINAL",
          "line": 184,
          "value": "(SKEIN_T1_BLK_TYPE_CFG | SKEIN_T1_FLAG_FINAL)"
        },
        {
          "name": "SKEIN_T1_BLK_TYPE_OUT_FINAL",
          "line": 185,
          "value": "(SKEIN_T1_BLK_TYPE_OUT | SKEIN_T1_FLAG_FINAL)"
        },
        {
          "name": "SKEIN_VERSION",
          "line": 187,
          "value": "(1)"
        },
        {
          "name": "SKEIN_ID_STRING_LE",
          "line": 190,
          "value": "(0x33414853)            /* \"SHA3\" (little-endian)*/"
        },
        {
          "name": "SKEIN_SCHEMA_VER",
          "line": 194,
          "value": "SKEIN_MK_64(SKEIN_VERSION,SKEIN_ID_STRING_LE)"
        },
        {
          "name": "SKEIN_KS_PARITY",
          "line": 195,
          "value": "SKEIN_MK_64(0x1BD11BDA,0xA9FC1A22)"
        },
        {
          "name": "SKEIN_CFG_STR_LEN",
          "line": 197,
          "value": "(4*8)"
        },
        {
          "name": "SKEIN_CFG_TREE_LEAF_SIZE_POS",
          "line": 200,
          "value": "( 0)"
        },
        {
          "name": "SKEIN_CFG_TREE_NODE_SIZE_POS",
          "line": 201,
          "value": "( 8)"
        },
        {
          "name": "SKEIN_CFG_TREE_MAX_LEVEL_POS",
          "line": 202,
          "value": "(16)"
        },
        {
          "name": "SKEIN_CFG_TREE_LEAF_SIZE_MSK",
          "line": 204,
          "value": "(((u64b_t) 0xFF) << SKEIN_CFG_TREE_LEAF_SIZE_POS)"
        },
        {
          "name": "SKEIN_CFG_TREE_NODE_SIZE_MSK",
          "line": 205,
          "value": "(((u64b_t) 0xFF) << SKEIN_CFG_TREE_NODE_SIZE_POS)"
        },
        {
          "name": "SKEIN_CFG_TREE_MAX_LEVEL_MSK",
          "line": 206,
          "value": "(((u64b_t) 0xFF) << SKEIN_CFG_TREE_MAX_LEVEL_POS)"
        },
        {
          "name": "SKEIN_CFG_TREE_INFO_SEQUENTIAL",
          "line": 213,
          "value": "SKEIN_CFG_TREE_INFO(0,0,0) /* use as treeInfo in InitExt() call for sequential processing */"
        },
        {
          "name": "SKEIN_256_ROUNDS_TOTAL",
          "line": 306,
          "value": "(72)          /* number of rounds for the different block sizes */"
        },
        {
          "name": "SKEIN_512_ROUNDS_TOTAL",
          "line": 307,
          "value": "(72)"
        },
        {
          "name": "SKEIN1024_ROUNDS_TOTAL",
          "line": 308,
          "value": "(80)"
        },
        {
          "name": "SKEIN_256_ROUNDS_TOTAL",
          "line": 310,
          "value": "(8*((((SKEIN_ROUNDS/100) + 5) % 10) + 5))"
        },
        {
          "name": "SKEIN_512_ROUNDS_TOTAL",
          "line": 311,
          "value": "(8*((((SKEIN_ROUNDS/ 10) + 5) % 10) + 5))"
        },
        {
          "name": "SKEIN1024_ROUNDS_TOTAL",
          "line": 312,
          "value": "(8*((((SKEIN_ROUNDS    ) + 5) % 10) + 5))"
        },
        {
          "name": "MK_64",
          "line": 330,
          "value": "SKEIN_MK_64"
        },
        {
          "name": "SKEIN_USE_ASM",
          "line": 511,
          "value": "(0)                     /* default is all C code (no ASM) */"
        },
        {
          "name": "SKEIN_LOOP",
          "line": 515,
          "value": "001                          /* default: unroll 256 and 512, but not 1024 */"
        },
        {
          "name": "BLK_BITS",
          "line": 518,
          "value": "(WCNT*64)               /* some useful definitions for code here */"
        },
        {
          "name": "KW_TWK_BASE",
          "line": 519,
          "value": "(0)"
        },
        {
          "name": "KW_KEY_BASE",
          "line": 520,
          "value": "(3)"
        },
        {
          "name": "ks",
          "line": 521,
          "value": "(kw + KW_KEY_BASE)"
        },
        {
          "name": "ts",
          "line": 522,
          "value": "(kw + KW_TWK_BASE)"
        },
        {
          "name": "RCNT",
          "line": 539,
          "value": "(SKEIN_256_ROUNDS_TOTAL/8)"
        },
        {
          "name": "SKEIN_UNROLL_256",
          "line": 542,
          "value": "(((SKEIN_LOOP)/100)%10)"
        },
        {
          "name": "SKEIN_UNROLL_256",
          "line": 544,
          "value": "(0)"
        },
        {
          "name": "RCNT",
          "line": 724,
          "value": "(SKEIN_512_ROUNDS_TOTAL/8)"
        },
        {
          "name": "SKEIN_UNROLL_512",
          "line": 727,
          "value": "(((SKEIN_LOOP)/10)%10)"
        },
        {
          "name": "SKEIN_UNROLL_512",
          "line": 729,
          "value": "(0)"
        },
        {
          "name": "RCNT",
          "line": 932,
          "value": "(SKEIN1024_ROUNDS_TOTAL/8)"
        },
        {
          "name": "SKEIN_UNROLL_1024",
          "line": 935,
          "value": "((SKEIN_LOOP)%10)"
        },
        {
          "name": "SKEIN_UNROLL_1024",
          "line": 937,
          "value": "(0)"
        }
      ]
    },
    "src/crypto/skein.h": {
      "path": "src/crypto/skein.h",
      "size": 1910,
      "lines": 48,
      "hash": "9f1d7fd31d8d9776",
      "functions": [],
      "constants": [
        {
          "name": "_SKEIN_H_",
          "line": 2,
          "value": "1"
        }
      ]
    },
    "src/crypto/skein_port.h": {
      "path": "src/crypto/skein_port.h",
      "size": 6750,
      "lines": 191,
      "hash": "cc207bd3066632b6",
      "functions": [],
      "constants": [
        {
          "name": "IS_BIG_ENDIAN",
          "line": 91,
          "value": "4321 /* byte 0 is most significant (mc68k) */"
        },
        {
          "name": "IS_LITTLE_ENDIAN",
          "line": 92,
          "value": "1234 /* byte 0 is least significant (i386) */"
        },
        {
          "name": "SKEIN_NEED_SWAP",
          "line": 118,
          "value": "(1)"
        },
        {
          "name": "SKEIN_NEED_SWAP",
          "line": 121,
          "value": "(0)"
        }
      ]
    },
    "src/crypto/slow-hash.c": {
      "path": "src/crypto/slow-hash.c",
      "size": 49156,
      "lines": 1585,
      "hash": "b50fcf5a7edb532d",
      "functions": [
        {
          "name": "aesb_single_round",
          "line": 54,
          "signature": "extern int aesb_single_round(const uint8_t *in, uint8_t *out, const uint8_t *expandedKey);"
        },
        {
          "name": "aesb_pseudo_round",
          "line": 55,
          "signature": "extern int aesb_pseudo_round(const uint8_t *in, uint8_t *out, const uint8_t *expandedKey);"
        },
        {
          "name": "aes_expand_key",
          "line": 923,
          "signature": "static void aes_expand_key(const uint8_t *key, uint8_t *expandedKey) {"
        },
        {
          "name": "mul",
          "line": 1178,
          "signature": "void mul(const uint8_t *ca, const uint8_t *cb, uint8_t *cres) {"
        },
        {
          "name": "aesb_single_round",
          "line": 1416,
          "signature": "extern int aesb_single_round(const uint8_t *in, uint8_t*out, const uint8_t *expandedKey);"
        },
        {
          "name": "aesb_pseudo_round",
          "line": 1417,
          "signature": "extern int aesb_pseudo_round(const uint8_t *in, uint8_t *out, const uint8_t *expandedKey);"
        },
        {
          "name": "e2i",
          "line": 1419,
          "signature": "static size_t e2i(const uint8_t* a, size_t count) { return (*((uint64_t*)a) / AES_BLOCK_SIZE) & (count - 1); }"
        },
        {
          "name": "mul",
          "line": 1421,
          "signature": "static void mul(const uint8_t* a, const uint8_t* b, uint8_t* res) {"
        },
        {
          "name": "sum_half_blocks",
          "line": 1432,
          "signature": "static void sum_half_blocks(uint8_t* a, const uint8_t* b) {"
        },
        {
          "name": "copy_block",
          "line": 1446,
          "signature": "static void copy_block(uint8_t* dst, const uint8_t* src) {"
        },
        {
          "name": "swap_blocks",
          "line": 1450,
          "signature": "static void swap_blocks(uint8_t *a, uint8_t *b){"
        },
        {
          "name": "xor_blocks",
          "line": 1460,
          "signature": "static void xor_blocks(uint8_t* a, const uint8_t* b) {"
        },
        {
          "name": "cn_slow_hash",
          "line": 1486,
          "signature": "void cn_slow_hash(const void *data, size_t length, char *hash, int light, int variant, int prehashed) {"
        }
      ],
      "constants": [
        {
          "name": "MEMORY",
          "line": 47,
          "value": "(1 << 21) // 2MB scratchpad"
        },
        {
          "name": "AES_BLOCK_SIZE",
          "line": 49,
          "value": "16"
        },
        {
          "name": "AES_KEY_SIZE",
          "line": 50,
          "value": "32"
        },
        {
          "name": "INIT_SIZE_BLK",
          "line": 51,
          "value": "8"
        },
        {
          "name": "INIT_SIZE_BYTE",
          "line": 52,
          "value": "(INIT_SIZE_BLK * AES_BLOCK_SIZE)"
        },
        {
          "name": "tmp",
          "line": 60,
          "value": "((const uint8_t*)(p))[11]"
        },
        {
          "name": "table",
          "line": 61,
          "value": "0x75310"
        },
        {
          "name": "index",
          "line": 62,
          "value": "(((tmp >> 3) & 6) | (tmp & 1)) << 1"
        },
        {
          "name": "NONCE_POINTER",
          "line": 79,
          "value": "(((const uint8_t*)data)+35)"
        },
        {
          "name": "chunk1",
          "line": 123,
          "value": "(light ? _mm_load_si128((__m128i *)((base_ptr) + ((offset) ^ 0x30))) : _mm_load_si128((__m128i *)((base_ptr) + ((offset) ^ 0x10))))"
        },
        {
          "name": "chunk2",
          "line": 124,
          "value": "_mm_load_si128((__m128i *)((base_ptr) + ((offset) ^ 0x20)))"
        },
        {
          "name": "chunk3",
          "line": 125,
          "value": "(light ? _mm_load_si128((__m128i *)((base_ptr) + ((offset) ^ 0x10))) : _mm_load_si128((__m128i *)((base_ptr) + ((offset) ^ 0x30))))"
        },
        {
          "name": "chunk1",
          "line": 134,
          "value": "(light ? vld1q_u64(U64((base_ptr) + ((offset) ^ 0x30))) : vld1q_u64(U64((base_ptr) + ((offset) ^ 0x10))))"
        },
        {
          "name": "chunk2",
          "line": 135,
          "value": "vld1q_u64(U64((base_ptr) + ((offset) ^ 0x20)))"
        },
        {
          "name": "chunk3",
          "line": 136,
          "value": "(light ? vld1q_u64(U64((base_ptr) + ((offset) ^ 0x10))) : vld1q_u64(U64((base_ptr) + ((offset) ^ 0x30))))"
        },
        {
          "name": "dividend",
          "line": 170,
          "value": "((uint64_t*)(ptr))[1]"
        },
        {
          "name": "divisor",
          "line": 171,
          "value": "(((uint64_t*)(ptr))[0] + (uint32_t)(sqrt_result << 1)) | 0x80000001UL"
        },
        {
          "name": "INLINE",
          "line": 231,
          "value": "__inline"
        },
        {
          "name": "RDATA_ALIGN16",
          "line": 233,
          "value": "__declspec(align(16))"
        },
        {
          "name": "STATIC",
          "line": 238,
          "value": "static"
        },
        {
          "name": "INLINE",
          "line": 239,
          "value": "inline"
        },
        {
          "name": "RDATA_ALIGN16",
          "line": 241,
          "value": "__attribute__ ((aligned(16)))"
        },
        {
          "name": "STATIC",
          "line": 246,
          "value": "static"
        },
        {
          "name": "INLINE",
          "line": 247,
          "value": "inline"
        },
        {
          "name": "RDATA_ALIGN16",
          "line": 249,
          "value": "__attribute__ ((aligned(16)))"
        },
        {
          "name": "ASM",
          "line": 254,
          "value": "__asm__"
        },
        {
          "name": "ASM",
          "line": 256,
          "value": "__asm__"
        },
        {
          "name": "ASM",
          "line": 258,
          "value": "__asm"
        },
        {
          "name": "TOTALBLOCKS",
          "line": 261,
          "value": "(MEMORY / AES_BLOCK_SIZE)"
        },
        {
          "name": "THREADV",
          "line": 316,
          "value": "__declspec(thread)"
        },
        {
          "name": "THREADV",
          "line": 318,
          "value": "__thread"
        },
        {
          "name": "RDATA_ALIGN16",
          "line": 850,
          "value": "__attribute__ ((aligned(16)))"
        },
        {
          "name": "STATIC",
          "line": 851,
          "value": "static"
        },
        {
          "name": "INLINE",
          "line": 852,
          "value": "inline"
        },
        {
          "name": "STATIC",
          "line": 855,
          "value": "static"
        },
        {
          "name": "TOTALBLOCKS",
          "line": 887,
          "value": "(MEMORY / AES_BLOCK_SIZE)"
        },
        {
          "name": "SHORT",
          "line": 1175,
          "value": "uint32_t"
        },
        {
          "name": "LONG",
          "line": 1176,
          "value": "uint64_t"
        }
      ]
    },
    "src/crypto/slow-hash.cpp": {
      "path": "src/crypto/slow-hash.cpp",
      "size": 1869,
      "lines": 74,
      "hash": "ba8965af09da5f24",
      "functions": [
        {
          "name": "bad_alloc",
          "line": 41,
          "signature": "throw bad_alloc();"
        },
        {
          "name": "bad_alloc",
          "line": 47,
          "signature": "throw bad_alloc();"
        },
        {
          "name": "bad_alloc",
          "line": 60,
          "signature": "throw bad_alloc();"
        }
      ],
      "constants": []
    },
    "src/crypto/soft_aes.hpp": {
      "path": "src/crypto/soft_aes.hpp",
      "size": 5215,
      "lines": 111,
      "hash": "0bbf2600b518927e",
      "functions": [
        {
          "name": "_mm_xor_si128",
          "line": 87,
          "signature": "return _mm_xor_si128(out, key);"
        },
        {
          "name": "_rotr",
          "line": 99,
          "signature": "static inline uint32_t _rotr(uint32_t value, uint32_t amount) {"
        }
      ],
      "constants": [
        {
          "name": "SAES_WPOLY",
          "line": 56,
          "value": "0x011b"
        }
      ]
    },
    "src/crypto/sse2neon.h": {
      "path": "src/crypto/sse2neon.h",
      "size": 113311,
      "lines": 2783,
      "hash": "1b94e41c2d59c050",
      "functions": [
        {
          "name": "vqabsq_s32",
          "line": 699,
          "signature": "return vqabsq_s32(a);"
        },
        {
          "name": "vld1q_s32",
          "line": 1062,
          "signature": "return vld1q_s32(r);"
        },
        {
          "name": "vreinterpretq_m128_f32",
          "line": 1781,
          "signature": "return vreinterpretq_m128_f32(recip);"
        },
        {
          "name": "vreinterpretq_m128_f32",
          "line": 1791,
          "signature": "return vreinterpretq_m128_f32(recip);"
        },
        {
          "name": "vreinterpretq_m128_f32",
          "line": 1809,
          "signature": "return vreinterpretq_m128_f32(sq);"
        },
        {
          "name": "vreinterpretq_m128i_u16",
          "line": 1963,
          "signature": "return vreinterpretq_m128i_u16(r.val[1]);"
        },
        {
          "name": "vreinterpretq_s32_u32",
          "line": 2283,
          "signature": "return vreinterpretq_s32_u32(u32x4);"
        },
        {
          "name": "vcvtnq_s32_f32",
          "line": 2309,
          "signature": "return vcvtnq_s32_f32(a);"
        },
        {
          "name": "_umul128",
          "line": 2770,
          "signature": "inline uint64_t _umul128(uint64_t multiplier, uint64_t multiplicand, uint64_t *product_hi) {"
        }
      ],
      "constants": [
        {
          "name": "FORCE_INLINE",
          "line": 69,
          "value": "static inline __attribute__((always_inline))"
        },
        {
          "name": "FORCE_INLINE",
          "line": 78,
          "value": "static inline"
        },
        {
          "name": "_mm_load_ps1",
          "line": 494,
          "value": "_mm_load1_ps"
        },
        {
          "name": "movemask",
          "line": 687,
          "value": "{1, 2, 4, 8}"
        },
        {
          "name": "_mm_ucomilt_ss",
          "line": 2248,
          "value": "_mm_comilt_ss"
        },
        {
          "name": "_mm_ucomile_ss",
          "line": 2249,
          "value": "_mm_comile_ss"
        },
        {
          "name": "_mm_ucomigt_ss",
          "line": 2250,
          "value": "_mm_comigt_ss"
        },
        {
          "name": "_mm_ucomige_ss",
          "line": 2251,
          "value": "_mm_comige_ss"
        },
        {
          "name": "_mm_ucomieq_ss",
          "line": 2252,
          "value": "_mm_comieq_ss"
        },
        {
          "name": "_mm_ucomineq_ss",
          "line": 2253,
          "value": "_mm_comineq_ss"
        }
      ]
    },
    "src/crypto/tree-hash.c": {
      "path": "src/crypto/tree-hash.c",
      "size": 3301,
      "lines": 115,
      "hash": "93b26c8be3810c5c",
      "functions": [
        {
          "name": "tree_depth",
          "line": 44,
          "signature": "size_t tree_depth(size_t count) {"
        }
      ],
      "constants": []
    },
    "src/crypto/variant2_int_sqrt.h": {
      "path": "src/crypto/variant2_int_sqrt.h",
      "size": 7734,
      "lines": 149,
      "hash": "2cbf2c09c059b67e",
      "functions": [],
      "constants": [
        {
          "name": "exp_double_bias",
          "line": 9,
          "value": "_mm_set_epi64x(0, 1023ULL << 52)"
        },
        {
          "name": "b",
          "line": 53,
          "value": "(n < r + bit)"
        },
        {
          "name": "n_next",
          "line": 54,
          "value": "n - (r + bit)"
        },
        {
          "name": "r_next",
          "line": 55,
          "value": "r + bit * 2"
        },
        {
          "name": "s",
          "line": 142,
          "value": "r >> 1"
        },
        {
          "name": "b",
          "line": 143,
          "value": "r & 1"
        },
        {
          "name": "r2",
          "line": 144,
          "value": "(uint64_t)(s) * (s + b) + (r << 32)"
        }
      ]
    }
  },
  "functions": {
    "performAsync": [
      {
        "file": "src/BlockchainExplorer/BlockchainExplorer.cpp",
        "line": 57,
        "signature": "void performAsync(BlockchainExplorer::AsyncContextCounter& asyncContextCounter, const INode::Callback& callback) {"
      }
    ],
    "blockingCompleteionCallback": [
      {
        "file": "src/BlockchainExplorer/BlockchainExplorer.cpp",
        "line": 63,
        "signature": "void blockingCompleteionCallback(std::promise<std::error_code> promise, std::error_code ec) {"
      }
    ],
    "asyncCompleteionCallback": [
      {
        "file": "src/BlockchainExplorer/BlockchainExplorer.cpp",
        "line": 67,
        "signature": "static void asyncCompleteionCallback(const INode::Callback& callback, BlockchainExplorer::AsyncContextCounter& asyncContextCounter, std::error_code ec) {"
      }
    ],
    "counterHolder": [
      {
        "file": "src/BlockchainExplorer/BlockchainExplorer.cpp",
        "line": 68,
        "signature": "ContextCounterHolder counterHolder(asyncContextCounter);"
      },
      {
        "file": "src/WalletLegacy/WalletLegacy.cpp",
        "line": 267,
        "signature": "ContextCounterHolder counterHolder(m_asyncContextCounter);"
      },
      {
        "file": "src/WalletLegacy/WalletLegacy.cpp",
        "line": 395,
        "signature": "ContextCounterHolder counterHolder(m_asyncContextCounter);"
      },
      {
        "file": "src/WalletLegacy/WalletLegacy.cpp",
        "line": 870,
        "signature": "ContextCounterHolder counterHolder(m_asyncContextCounter);"
      },
      {
        "file": "src/WalletLegacy/WalletLegacy.cpp",
        "line": 898,
        "signature": "ContextCounterHolder counterHolder(m_asyncContextCounter);"
      }
    ],
    "reset": [
      {
        "file": "src/BlockchainExplorer/BlockchainExplorer.cpp",
        "line": 133,
        "signature": "void reset() {"
      },
      {
        "file": "src/Common/ShuffleGenerator.h",
        "line": 58,
        "signature": "void reset() {"
      },
      {
        "file": "src/PaymentGate/WalletService.h",
        "line": 112,
        "signature": "void reset();"
      },
      {
        "file": "src/SimpleWallet/SimpleWallet.h",
        "line": 106,
        "signature": "bool reset(const std::vector<std::string> &args);"
      },
      {
        "file": "src/WalletLegacy/WalletUnconfirmedTransactions.h",
        "line": 98,
        "signature": "void reset();"
      },
      {
        "file": "src/WalletLegacy/WalletUserTransactionsCache.h",
        "line": 106,
        "signature": "void reset();"
      }
    ],
    "getTransactions": [
      {
        "file": "src/BlockchainExplorer/BlockchainExplorer.cpp",
        "line": 464,
        "signature": "return getTransactions(newTransactionsHashes, newTransactions);"
      },
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 174,
        "signature": "void getTransactions(const t_ids_container& txs_ids, t_tx_container& txs, t_missed_container& missed_txs, bool checkTxPool = false) {"
      },
      {
        "file": "src/CryptoNoteCore/TransactionPool.h",
        "line": 126,
        "signature": "void getTransactions(const t_ids_container& txsIds, t_tx_container& txs, t_missed_container& missedTxs) {"
      }
    ],
    "poolUpdateEndHandler": [
      {
        "file": "src/BlockchainExplorer/BlockchainExplorer.h",
        "line": 76,
        "signature": "void poolUpdateEndHandler();"
      }
    ],
    "beginUpdate": [
      {
        "file": "src/BlockchainExplorer/BlockchainExplorer.h",
        "line": 82,
        "signature": "bool beginUpdate();"
      }
    ],
    "endUpdate": [
      {
        "file": "src/BlockchainExplorer/BlockchainExplorer.h",
        "line": 83,
        "signature": "bool endUpdate();"
      }
    ],
    "getPaymentIdFromTransactionExtraNonce": [
      {
        "file": "src/BlockchainExplorer/BlockchainExplorerDataBuilder.cpp",
        "line": 57,
        "signature": "return getPaymentIdFromTransactionExtraNonce(extraNonce.nonce, paymentId);"
      },
      {
        "file": "src/CryptoNoteCore/TransactionExtra.h",
        "line": 100,
        "signature": "bool getPaymentIdFromTransactionExtraNonce(const BinaryArray& extra_nonce, Crypto::Hash& payment_id);"
      }
    ],
    "fillBlockDetails": [
      {
        "file": "src/BlockchainExplorer/BlockchainExplorerDataBuilder.h",
        "line": 39,
        "signature": "bool fillBlockDetails(const Block& block, BlockDetails& blockDetails);"
      }
    ],
    "fillTransactionDetails": [
      {
        "file": "src/BlockchainExplorer/BlockchainExplorerDataBuilder.h",
        "line": 40,
        "signature": "bool fillTransactionDetails(const Transaction &tx, TransactionDetails& txRpcInfo, uint64_t timestamp = 0);"
      }
    ],
    "getPaymentId": [
      {
        "file": "src/BlockchainExplorer/BlockchainExplorerDataBuilder.h",
        "line": 42,
        "signature": "static bool getPaymentId(const Transaction& transaction, Crypto::Hash& paymentId);"
      }
    ],
    "getMixin": [
      {
        "file": "src/BlockchainExplorer/BlockchainExplorerDataBuilder.h",
        "line": 45,
        "signature": "bool getMixin(const Transaction& transaction, uint64_t& mixin);"
      }
    ],
    "fillTxExtra": [
      {
        "file": "src/BlockchainExplorer/BlockchainExplorerDataBuilder.h",
        "line": 46,
        "signature": "bool fillTxExtra(const std::vector<uint8_t>& rawExtra, TransactionExtraDetails& extraDetails);"
      }
    ],
    "median": [
      {
        "file": "src/BlockchainExplorer/BlockchainExplorerDataBuilder.h",
        "line": 47,
        "signature": "size_t median(std::vector<size_t>& v);"
      }
    ],
    "ArrayRef": [
      {
        "file": "src/Common/ArrayRef.h",
        "line": 366,
        "signature": "return ArrayRef(data, headSize);"
      },
      {
        "file": "src/Common/ArrayRef.h",
        "line": 382,
        "signature": "return ArrayRef(data + headSize, size - headSize);"
      },
      {
        "file": "src/Common/ArrayRef.h",
        "line": 390,
        "signature": "return ArrayRef(data, size - tailSize);"
      },
      {
        "file": "src/Common/ArrayRef.h",
        "line": 398,
        "signature": "return ArrayRef(data + startIndex, endIndex - startIndex);"
      },
      {
        "file": "src/Common/ArrayRef.h",
        "line": 406,
        "signature": "return ArrayRef(data + startIndex, sliceSize);"
      }
    ],
    "ArrayView": [
      {
        "file": "src/Common/ArrayView.h",
        "line": 370,
        "signature": "return ArrayView(data, headSize);"
      },
      {
        "file": "src/Common/ArrayView.h",
        "line": 386,
        "signature": "return ArrayView(data + headSize, size - headSize);"
      },
      {
        "file": "src/Common/ArrayView.h",
        "line": 394,
        "signature": "return ArrayView(data, size - tailSize);"
      },
      {
        "file": "src/Common/ArrayView.h",
        "line": 402,
        "signature": "return ArrayView(data + startIndex, endIndex - startIndex);"
      },
      {
        "file": "src/Common/ArrayView.h",
        "line": 410,
        "signature": "return ArrayView(data + startIndex, sliceSize);"
      }
    ],
    "encode": [
      {
        "file": "src/Common/Base58.cpp",
        "line": 233,
        "signature": "return encode(buf);"
      },
      {
        "file": "src/P2p/LevinProtocol.h",
        "line": 97,
        "signature": "static BinaryArray encode(const T& value) {"
      }
    ],
    "decode": [
      {
        "file": "src/Common/Base58.h",
        "line": 28,
        "signature": "bool decode(const std::string& enc, std::string& data);"
      },
      {
        "file": "src/P2p/LevinProtocol.h",
        "line": 61,
        "signature": "return decode(cmd.buf, response);"
      },
      {
        "file": "src/P2p/LevinProtocol.h",
        "line": 84,
        "signature": "static bool decode(const BinaryArray& buf, T& value) {"
      }
    ],
    "decode_addr": [
      {
        "file": "src/Common/Base58.h",
        "line": 31,
        "signature": "bool decode_addr(std::string addr, uint64_t& tag, std::string& data);"
      }
    ],
    "push": [
      {
        "file": "src/Common/BlockingQueue.h",
        "line": 36,
        "signature": "bool push(TT&& v) {"
      },
      {
        "file": "src/CryptoNoteCore/BlockIndex.h",
        "line": 41,
        "signature": "bool push(const Crypto::Hash& h) {"
      },
      {
        "file": "src/CryptoNoteCore/MessageQueue.h",
        "line": 35,
        "signature": "void push(const MessageType& message);"
      }
    ],
    "pop": [
      {
        "file": "src/Common/BlockingQueue.h",
        "line": 52,
        "signature": "bool pop(T& v) {"
      },
      {
        "file": "src/CryptoNoteCore/BlockIndex.h",
        "line": 36,
        "signature": "void pop() {"
      },
      {
        "file": "src/CryptoNoteCore/MessageQueue.h",
        "line": 34,
        "signature": "void pop();"
      }
    ],
    "close": [
      {
        "file": "src/Common/BlockingQueue.h",
        "line": 75,
        "signature": "void close(bool wait = false) {"
      },
      {
        "file": "src/Common/BlockingQueue.h",
        "line": 115,
        "signature": "void close() {"
      },
      {
        "file": "src/Common/FileMappedVector.h",
        "line": 240,
        "signature": "void close();"
      },
      {
        "file": "src/Common/FileMappedVector.h",
        "line": 241,
        "signature": "void close(std::error_code& ec);"
      },
      {
        "file": "src/CryptoNoteCore/SwappedMap.h",
        "line": 90,
        "signature": "void close();"
      },
      {
        "file": "src/CryptoNoteCore/SwappedVector.h",
        "line": 152,
        "signature": "void close();"
      },
      {
        "file": "src/Platform/Linux/System/MemoryMappedFile.h",
        "line": 35,
        "signature": "void close(std::error_code& ec);"
      },
      {
        "file": "src/Platform/Linux/System/MemoryMappedFile.h",
        "line": 36,
        "signature": "void close();"
      },
      {
        "file": "src/Platform/OSX/System/MemoryMappedFile.h",
        "line": 35,
        "signature": "void close(std::error_code& ec);"
      },
      {
        "file": "src/Platform/OSX/System/MemoryMappedFile.h",
        "line": 36,
        "signature": "void close();"
      },
      {
        "file": "src/Platform/Windows/System/MemoryMappedFile.h",
        "line": 35,
        "signature": "void close(std::error_code& ec);"
      },
      {
        "file": "src/Platform/Windows/System/MemoryMappedFile.h",
        "line": 36,
        "signature": "void close();"
      }
    ],
    "size": [
      {
        "file": "src/Common/BlockingQueue.h",
        "line": 88,
        "signature": "size_t size() {"
      },
      {
        "file": "src/P2p/NetNode.h",
        "line": 63,
        "signature": "size_t size() {"
      },
      {
        "file": "src/Serialization/MemoryStream.h",
        "line": 48,
        "signature": "size_t size() {"
      }
    ],
    "parser": [
      {
        "file": "src/Common/CommandLine.h",
        "line": 149,
        "signature": "return parser();"
      }
    ],
    "start": [
      {
        "file": "src/Common/ConsoleHandler.h",
        "line": 39,
        "signature": "void start();"
      },
      {
        "file": "src/Common/ConsoleHandler.h",
        "line": 67,
        "signature": "void start(bool startThread = true, const std::string& prompt = \"\", Console::Color promptColor = Console::Color::Default);"
      },
      {
        "file": "src/CryptoNoteCore/Miner.h",
        "line": 44,
        "signature": "bool start(const AccountPublicAddress& adr, size_t threads_count);"
      },
      {
        "file": "src/JsonRpcServer/JsonRpcServer.h",
        "line": 49,
        "signature": "void start(const std::string& bindAddress, uint16_t bindPort, const std::string& user = \"\", const std::string& password = \"\");"
      },
      {
        "file": "src/Miner/MinerManager.h",
        "line": 42,
        "signature": "void start();"
      },
      {
        "file": "src/P2p/P2pContext.h",
        "line": 69,
        "signature": "void start();"
      },
      {
        "file": "src/P2p/P2pNode.h",
        "line": 68,
        "signature": "void start();"
      },
      {
        "file": "src/Rpc/HttpServer.h",
        "line": 41,
        "signature": "void start(const std::string& address, uint16_t port, const std::string& user = \"\", const std::string& password = \"\");"
      }
    ],
    "getline": [
      {
        "file": "src/Common/ConsoleHandler.h",
        "line": 40,
        "signature": "bool getline(std::string& line);"
      }
    ],
    "stop": [
      {
        "file": "src/Common/ConsoleHandler.h",
        "line": 41,
        "signature": "void stop();"
      },
      {
        "file": "src/Common/ConsoleHandler.h",
        "line": 68,
        "signature": "void stop();"
      },
      {
        "file": "src/CryptoNoteCore/MessageQueue.h",
        "line": 37,
        "signature": "void stop();"
      },
      {
        "file": "src/CryptoNoteCore/Miner.h",
        "line": 47,
        "signature": "bool stop();"
      },
      {
        "file": "src/CryptoNoteProtocol/CryptoNoteProtocolHandler.h",
        "line": 74,
        "signature": "void stop();"
      },
      {
        "file": "src/Miner/BlockchainMonitor.h",
        "line": 33,
        "signature": "void stop();"
      },
      {
        "file": "src/Miner/Miner.h",
        "line": 47,
        "signature": "void stop();"
      },
      {
        "file": "src/P2p/P2pContext.h",
        "line": 70,
        "signature": "void stop();"
      },
      {
        "file": "src/PaymentGateService/PaymentGateService.h",
        "line": 43,
        "signature": "void stop();"
      },
      {
        "file": "src/Rpc/HttpServer.h",
        "line": 42,
        "signature": "void stop();"
      },
      {
        "file": "src/SimpleWallet/SimpleWallet.h",
        "line": 55,
        "signature": "void stop();"
      },
      {
        "file": "src/WalletLegacy/WalletTransactionSender.h",
        "line": 40,
        "signature": "void stop();"
      }
    ],
    "consoleThread": [
      {
        "file": "src/Common/ConsoleHandler.h",
        "line": 46,
        "signature": "void consoleThread();"
      }
    ],
    "waitInput": [
      {
        "file": "src/Common/ConsoleHandler.h",
        "line": 47,
        "signature": "bool waitInput();"
      }
    ],
    "setHandler": [
      {
        "file": "src/Common/ConsoleHandler.h",
        "line": 63,
        "signature": "void setHandler(const std::string& command, const ConsoleCommandHandler& handler, const std::string& usage = \"\");"
      }
    ],
    "requestStop": [
      {
        "file": "src/Common/ConsoleHandler.h",
        "line": 64,
        "signature": "void requestStop();"
      }
    ],
    "runCommand": [
      {
        "file": "src/Common/ConsoleHandler.h",
        "line": 65,
        "signature": "bool runCommand(const std::vector<std::string>& cmdAndArgs);"
      }
    ],
    "wait": [
      {
        "file": "src/Common/ConsoleHandler.h",
        "line": 69,
        "signature": "void wait();"
      },
      {
        "file": "src/CryptoNoteCore/MessageQueue.h",
        "line": 42,
        "signature": "void wait();"
      },
      {
        "file": "src/System/Context.h",
        "line": 70,
        "signature": "void wait() {"
      },
      {
        "file": "src/System/Context.h",
        "line": 132,
        "signature": "void wait() {"
      },
      {
        "file": "src/System/ContextGroup.h",
        "line": 34,
        "signature": "void wait();"
      },
      {
        "file": "src/System/Event.h",
        "line": 36,
        "signature": "void wait();"
      }
    ],
    "handleCommand": [
      {
        "file": "src/Common/ConsoleHandler.h",
        "line": 75,
        "signature": "virtual void handleCommand(const std::string& cmd);"
      },
      {
        "file": "src/CryptoNoteProtocol/CryptoNoteProtocolHandler.h",
        "line": 82,
        "signature": "int handleCommand(bool is_notify, int command, const BinaryArray& in_buff, BinaryArray& buff_out, CryptoNoteConnectionContext& context, bool& handled);"
      },
      {
        "file": "src/P2p/NetNode.h",
        "line": 152,
        "signature": "int handleCommand(const LevinProtocol::Command& cmd, BinaryArray& buff_out, P2pConnectionContext& context, bool& handled);"
      }
    ],
    "handlerThread": [
      {
        "file": "src/Common/ConsoleHandler.h",
        "line": 77,
        "signature": "void handlerThread();"
      }
    ],
    "isConsoleTty": [
      {
        "file": "src/Common/ConsoleTools.cpp",
        "line": 32,
        "signature": "bool isConsoleTty() {"
      },
      {
        "file": "src/Common/ConsoleTools.h",
        "line": 45,
        "signature": "bool isConsoleTty();"
      }
    ],
    "setTextColor": [
      {
        "file": "src/Common/ConsoleTools.cpp",
        "line": 41,
        "signature": "void setTextColor(Color color) {"
      },
      {
        "file": "src/Common/ConsoleTools.h",
        "line": 44,
        "signature": "void setTextColor(Color color);"
      }
    ],
    "fetch_dns_txt": [
      {
        "file": "src/Common/DnsTools.cpp",
        "line": 49,
        "signature": "bool fetch_dns_txt(const std::string domain, std::vector<std::string>&records) {"
      },
      {
        "file": "src/Common/DnsTools.h",
        "line": 22,
        "signature": "bool fetch_dns_txt(const std::string domain, std::vector<std::string>&records);"
      }
    ],
    "const_iterator": [
      {
        "file": "src/Common/FileMappedVector.h",
        "line": 102,
        "signature": "return const_iterator(m_fileMappedVector, m_index + n);"
      },
      {
        "file": "src/Common/FileMappedVector.h",
        "line": 106,
        "signature": "return const_iterator(i.m_fileMappedVector, n + i.m_index);"
      },
      {
        "file": "src/Common/FileMappedVector.h",
        "line": 115,
        "signature": "return const_iterator(m_fileMappedVector, m_index - n);"
      },
      {
        "file": "src/Common/FileMappedVector.h",
        "line": 462,
        "signature": "return const_iterator(this, 0);"
      },
      {
        "file": "src/Common/FileMappedVector.h",
        "line": 469,
        "signature": "return const_iterator(this, 0);"
      },
      {
        "file": "src/CryptoNoteCore/SwappedVector.h",
        "line": 110,
        "signature": "return const_iterator(m_swappedVector, m_index + n);"
      },
      {
        "file": "src/CryptoNoteCore/SwappedVector.h",
        "line": 114,
        "signature": "return const_iterator(i.m_swappedVector, n + i.m_index);"
      },
      {
        "file": "src/CryptoNoteCore/SwappedVector.h",
        "line": 122,
        "signature": "return const_iterator(m_swappedVector, m_index - n);"
      },
      {
        "file": "src/CryptoNoteCore/SwappedVector.h",
        "line": 267,
        "signature": "return const_iterator(this, 0);"
      }
    ],
    "iterator": [
      {
        "file": "src/Common/FileMappedVector.h",
        "line": 209,
        "signature": "return iterator(const_iterator::m_fileMappedVector, const_iterator::m_index + n);"
      },
      {
        "file": "src/Common/FileMappedVector.h",
        "line": 213,
        "signature": "return iterator(i.m_fileMappedVector, n + i.m_index);"
      },
      {
        "file": "src/Common/FileMappedVector.h",
        "line": 222,
        "signature": "return iterator(const_iterator::m_fileMappedVector, const_iterator::m_index - n);"
      },
      {
        "file": "src/Common/FileMappedVector.h",
        "line": 455,
        "signature": "return iterator(this, 0);"
      },
      {
        "file": "src/CryptoNoteCore/IntrusiveLinkedList.h",
        "line": 143,
        "signature": "return iterator(head);"
      },
      {
        "file": "src/CryptoNoteCore/IntrusiveLinkedList.h",
        "line": 148,
        "signature": "return iterator(nullptr);"
      }
    ],
    "open": [
      {
        "file": "src/Common/FileMappedVector.h",
        "line": 239,
        "signature": "void open(const std::string& path, FileMappedVectorOpenMode mode = FileMappedVectorOpenMode::OPEN_OR_CREATE, uint64_t prefixSize = 0);"
      },
      {
        "file": "src/Common/FileMappedVector.h",
        "line": 312,
        "signature": "void open(const std::string& path, uint64_t prefixSize);"
      },
      {
        "file": "src/CryptoNoteCore/SwappedMap.h",
        "line": 89,
        "signature": "bool open(const std::string& itemFileName, const std::string& indexFileName, size_t poolSize);"
      },
      {
        "file": "src/CryptoNoteCore/SwappedVector.h",
        "line": 151,
        "signature": "bool open(const std::string& itemFileName, const std::string& indexFileName, size_t poolSize);"
      },
      {
        "file": "src/Platform/Linux/System/MemoryMappedFile.h",
        "line": 33,
        "signature": "void open(const std::string& path, std::error_code& ec);"
      },
      {
        "file": "src/Platform/Linux/System/MemoryMappedFile.h",
        "line": 34,
        "signature": "void open(const std::string& path);"
      },
      {
        "file": "src/Platform/OSX/System/MemoryMappedFile.h",
        "line": 33,
        "signature": "void open(const std::string& path, std::error_code& ec);"
      },
      {
        "file": "src/Platform/OSX/System/MemoryMappedFile.h",
        "line": 34,
        "signature": "void open(const std::string& path);"
      },
      {
        "file": "src/Platform/Windows/System/MemoryMappedFile.h",
        "line": 33,
        "signature": "void open(const std::string& path, std::error_code& ec);"
      },
      {
        "file": "src/Platform/Windows/System/MemoryMappedFile.h",
        "line": 34,
        "signature": "void open(const std::string& path);"
      }
    ],
    "reserve": [
      {
        "file": "src/Common/FileMappedVector.h",
        "line": 247,
        "signature": "void reserve(uint64_t n);"
      },
      {
        "file": "src/CryptoNoteCore/DepositIndex.h",
        "line": 36,
        "signature": "void reserve(DepositHeight expectedHeight);"
      },
      {
        "file": "src/CryptoNoteCore/InvestmentIndex.h",
        "line": 36,
        "signature": "void reserve(DepositHeight expectedHeight);"
      }
    ],
    "shrink_to_fit": [
      {
        "file": "src/Common/FileMappedVector.h",
        "line": 248,
        "signature": "void shrink_to_fit();"
      }
    ],
    "begin": [
      {
        "file": "src/Common/FileMappedVector.h",
        "line": 251,
        "signature": "iterator begin();"
      },
      {
        "file": "src/CryptoNoteCore/IntrusiveLinkedList.h",
        "line": 61,
        "signature": "iterator begin();"
      },
      {
        "file": "src/CryptoNoteCore/SwappedMap.h",
        "line": 93,
        "signature": "const_iterator begin();"
      },
      {
        "file": "src/CryptoNoteCore/SwappedVector.h",
        "line": 156,
        "signature": "const_iterator begin();"
      }
    ],
    "end": [
      {
        "file": "src/Common/FileMappedVector.h",
        "line": 254,
        "signature": "iterator end();"
      },
      {
        "file": "src/CryptoNoteCore/IntrusiveLinkedList.h",
        "line": 62,
        "signature": "iterator end();"
      },
      {
        "file": "src/CryptoNoteCore/SwappedMap.h",
        "line": 94,
        "signature": "const_iterator end();"
      },
      {
        "file": "src/CryptoNoteCore/SwappedVector.h",
        "line": 157,
        "signature": "const_iterator end();"
      }
    ],
    "clear": [
      {
        "file": "src/Common/FileMappedVector.h",
        "line": 268,
        "signature": "void clear();"
      },
      {
        "file": "src/Common/ObserverManager.h",
        "line": 52,
        "signature": "void clear() {"
      },
      {
        "file": "src/CryptoNoteCore/BlockIndex.h",
        "line": 63,
        "signature": "void clear() {"
      },
      {
        "file": "src/CryptoNoteCore/BlockchainIndices.h",
        "line": 38,
        "signature": "void clear();"
      },
      {
        "file": "src/CryptoNoteCore/BlockchainIndices.h",
        "line": 57,
        "signature": "void clear();"
      },
      {
        "file": "src/CryptoNoteCore/BlockchainIndices.h",
        "line": 76,
        "signature": "void clear();"
      },
      {
        "file": "src/CryptoNoteCore/BlockchainIndices.h",
        "line": 95,
        "signature": "void clear();"
      },
      {
        "file": "src/CryptoNoteCore/BlockchainIndices.h",
        "line": 116,
        "signature": "void clear();"
      },
      {
        "file": "src/CryptoNoteCore/ITransactionValidator.h",
        "line": 32,
        "signature": "void clear() {"
      },
      {
        "file": "src/CryptoNoteCore/SwappedMap.h",
        "line": 98,
        "signature": "void clear();"
      },
      {
        "file": "src/CryptoNoteCore/SwappedVector.h",
        "line": 161,
        "signature": "void clear();"
      },
      {
        "file": "src/Platform/Linux/System/Dispatcher.h",
        "line": 70,
        "signature": "void clear();"
      },
      {
        "file": "src/Platform/OSX/System/Dispatcher.h",
        "line": 61,
        "signature": "void clear();"
      },
      {
        "file": "src/Platform/Windows/System/Dispatcher.h",
        "line": 54,
        "signature": "void clear();"
      },
      {
        "file": "src/Serialization/MemoryStream.h",
        "line": 56,
        "signature": "void clear() {"
      },
      {
        "file": "src/SimpleWallet/PasswordContainer.h",
        "line": 34,
        "signature": "void clear();"
      },
      {
        "file": "src/System/Event.h",
        "line": 34,
        "signature": "void clear();"
      }
    ],
    "erase": [
      {
        "file": "src/Common/FileMappedVector.h",
        "line": 269,
        "signature": "iterator erase(const_iterator position);"
      },
      {
        "file": "src/Common/FileMappedVector.h",
        "line": 270,
        "signature": "iterator erase(const_iterator first, const_iterator last);"
      },
      {
        "file": "src/Common/JsonValue.h",
        "line": 133,
        "signature": "size_t erase(const Key& key);"
      },
      {
        "file": "src/CryptoNoteCore/SwappedMap.h",
        "line": 99,
        "signature": "void erase(const_iterator iterator);"
      },
      {
        "file": "src/WalletLegacy/WalletUnconfirmedTransactions.h",
        "line": 81,
        "signature": "void erase(const Crypto::Hash& hash);"
      }
    ],
    "insert": [
      {
        "file": "src/Common/FileMappedVector.h",
        "line": 271,
        "signature": "iterator insert(const_iterator position, const T& val);"
      },
      {
        "file": "src/Common/FileMappedVector.h",
        "line": 273,
        "signature": "iterator insert(const_iterator position, InputIterator first, InputIterator last);"
      },
      {
        "file": "src/Common/FileMappedVector.h",
        "line": 604,
        "signature": "return insert(position, &val, &val + 1);"
      },
      {
        "file": "src/CryptoNoteCore/IntrusiveLinkedList.h",
        "line": 56,
        "signature": "bool insert(Value& value);"
      }
    ],
    "pop_back": [
      {
        "file": "src/Common/FileMappedVector.h",
        "line": 274,
        "signature": "void pop_back();"
      },
      {
        "file": "src/CryptoNoteCore/SwappedVector.h",
        "line": 162,
        "signature": "void pop_back();"
      }
    ],
    "push_back": [
      {
        "file": "src/Common/FileMappedVector.h",
        "line": 275,
        "signature": "void push_back(const T& val);"
      },
      {
        "file": "src/CryptoNoteCore/SwappedVector.h",
        "line": 163,
        "signature": "void push_back(const T& item);"
      }
    ],
    "swap": [
      {
        "file": "src/Common/FileMappedVector.h",
        "line": 276,
        "signature": "void swap(FileMappedVector& other);"
      },
      {
        "file": "src/Platform/Linux/System/MemoryMappedFile.h",
        "line": 50,
        "signature": "void swap(MemoryMappedFile& other);"
      },
      {
        "file": "src/Platform/OSX/System/MemoryMappedFile.h",
        "line": 50,
        "signature": "void swap(MemoryMappedFile& other);"
      },
      {
        "file": "src/Platform/Windows/System/MemoryMappedFile.h",
        "line": 50,
        "signature": "void swap(MemoryMappedFile& other);"
      }
    ],
    "setAutoFlush": [
      {
        "file": "src/Common/FileMappedVector.h",
        "line": 279,
        "signature": "void setAutoFlush(bool autoFlush);"
      }
    ],
    "flush": [
      {
        "file": "src/Common/FileMappedVector.h",
        "line": 281,
        "signature": "void flush();"
      },
      {
        "file": "src/Platform/Linux/System/MemoryMappedFile.h",
        "line": 47,
        "signature": "void flush(uint8_t* data, uint64_t size, std::error_code& ec);"
      },
      {
        "file": "src/Platform/Linux/System/MemoryMappedFile.h",
        "line": 48,
        "signature": "void flush(uint8_t* data, uint64_t size);"
      },
      {
        "file": "src/Platform/OSX/System/MemoryMappedFile.h",
        "line": 47,
        "signature": "void flush(uint8_t* data, uint64_t size, std::error_code& ec);"
      },
      {
        "file": "src/Platform/OSX/System/MemoryMappedFile.h",
        "line": 48,
        "signature": "void flush(uint8_t* data, uint64_t size);"
      },
      {
        "file": "src/Platform/Windows/System/MemoryMappedFile.h",
        "line": 47,
        "signature": "void flush(uint8_t* data, uint64_t size, std::error_code& ec);"
      },
      {
        "file": "src/Platform/Windows/System/MemoryMappedFile.h",
        "line": 48,
        "signature": "void flush(uint8_t* data, uint64_t size);"
      }
    ],
    "resizePrefix": [
      {
        "file": "src/Common/FileMappedVector.h",
        "line": 286,
        "signature": "void resizePrefix(uint64_t newPrefixSize);"
      }
    ],
    "resizeSuffix": [
      {
        "file": "src/Common/FileMappedVector.h",
        "line": 291,
        "signature": "void resizeSuffix(uint64_t newSuffixSize);"
      }
    ],
    "rename": [
      {
        "file": "src/Common/FileMappedVector.h",
        "line": 293,
        "signature": "void rename(const std::string& newPath, std::error_code& ec);"
      },
      {
        "file": "src/Common/FileMappedVector.h",
        "line": 294,
        "signature": "void rename(const std::string& newPath);"
      },
      {
        "file": "src/Platform/Linux/System/MemoryMappedFile.h",
        "line": 44,
        "signature": "void rename(const std::string& newPath, std::error_code& ec);"
      },
      {
        "file": "src/Platform/Linux/System/MemoryMappedFile.h",
        "line": 45,
        "signature": "void rename(const std::string& newPath);"
      },
      {
        "file": "src/Platform/OSX/System/MemoryMappedFile.h",
        "line": 44,
        "signature": "void rename(const std::string& newPath, std::error_code& ec);"
      },
      {
        "file": "src/Platform/OSX/System/MemoryMappedFile.h",
        "line": 45,
        "signature": "void rename(const std::string& newPath);"
      },
      {
        "file": "src/Platform/Windows/System/MemoryMappedFile.h",
        "line": 44,
        "signature": "void rename(const std::string& newPath, std::error_code& ec);"
      },
      {
        "file": "src/Platform/Windows/System/MemoryMappedFile.h",
        "line": 45,
        "signature": "void rename(const std::string& newPath);"
      }
    ],
    "atomicUpdate": [
      {
        "file": "src/Common/FileMappedVector.h",
        "line": 297,
        "signature": "void atomicUpdate(F&& func);"
      },
      {
        "file": "src/Common/FileMappedVector.h",
        "line": 308,
        "signature": "void atomicUpdate(uint64_t newSize, uint64_t newCapacity, uint64_t newPrefixSize, uint64_t newSuffixSize, F&& func);"
      }
    ],
    "atomicUpdate0": [
      {
        "file": "src/Common/FileMappedVector.h",
        "line": 310,
        "signature": "void atomicUpdate0(uint64_t newCapacity, uint64_t newPrefixSize, uint64_t newSuffixSize, F&& func);"
      }
    ],
    "create": [
      {
        "file": "src/Common/FileMappedVector.h",
        "line": 313,
        "signature": "void create(const std::string& path, uint64_t initialCapacity, uint64_t prefixSize, uint64_t suffixSize);"
      },
      {
        "file": "src/Platform/Linux/System/MemoryMappedFile.h",
        "line": 31,
        "signature": "void create(const std::string& path, uint64_t size, bool overwrite, std::error_code& ec);"
      },
      {
        "file": "src/Platform/Linux/System/MemoryMappedFile.h",
        "line": 32,
        "signature": "void create(const std::string& path, uint64_t size, bool overwrite);"
      },
      {
        "file": "src/Platform/OSX/System/MemoryMappedFile.h",
        "line": 31,
        "signature": "void create(const std::string& path, uint64_t size, bool overwrite, std::error_code& ec);"
      },
      {
        "file": "src/Platform/OSX/System/MemoryMappedFile.h",
        "line": 32,
        "signature": "void create(const std::string& path, uint64_t size, bool overwrite);"
      },
      {
        "file": "src/Platform/Windows/System/MemoryMappedFile.h",
        "line": 31,
        "signature": "void create(const std::string& path, uint64_t size, bool overwrite, std::error_code& ec);"
      },
      {
        "file": "src/Platform/Windows/System/MemoryMappedFile.h",
        "line": 32,
        "signature": "void create(const std::string& path, uint64_t size, bool overwrite);"
      }
    ],
    "vectorDataSize": [
      {
        "file": "src/Common/FileMappedVector.h",
        "line": 326,
        "signature": "uint64_t vectorDataSize();"
      }
    ],
    "nextCapacity": [
      {
        "file": "src/Common/FileMappedVector.h",
        "line": 328,
        "signature": "uint64_t nextCapacity();"
      }
    ],
    "flushElement": [
      {
        "file": "src/Common/FileMappedVector.h",
        "line": 330,
        "signature": "void flushElement(uint64_t index);"
      }
    ],
    "flushSize": [
      {
        "file": "src/Common/FileMappedVector.h",
        "line": 331,
        "signature": "void flushSize();"
      }
    ],
    "vectorDataPtr": [
      {
        "file": "src/Common/FileMappedVector.h",
        "line": 561,
        "signature": "return vectorDataPtr();"
      },
      {
        "file": "src/Common/FileMappedVector.h",
        "line": 568,
        "signature": "return vectorDataPtr();"
      }
    ],
    "prefixPtr": [
      {
        "file": "src/Common/FileMappedVector.h",
        "line": 684,
        "signature": "return prefixPtr();"
      },
      {
        "file": "src/Common/FileMappedVector.h",
        "line": 691,
        "signature": "return prefixPtr();"
      }
    ],
    "suffixPtr": [
      {
        "file": "src/Common/FileMappedVector.h",
        "line": 716,
        "signature": "return suffixPtr();"
      },
      {
        "file": "src/Common/FileMappedVector.h",
        "line": 723,
        "signature": "return suffixPtr();"
      }
    ],
    "readChar": [
      {
        "file": "src/Common/JsonValue.cpp",
        "line": 666,
        "signature": "char readChar(std::istream& in) {"
      }
    ],
    "readNonWsChar": [
      {
        "file": "src/Common/JsonValue.cpp",
        "line": 675,
        "signature": "char readNonWsChar(std::istream& in) {"
      }
    ],
    "JsonValue": [
      {
        "file": "src/Common/JsonValue.h",
        "line": 57,
        "signature": "explicit JsonValue(Bool value);"
      }
    ],
    "fromString": [
      {
        "file": "src/Common/JsonValue.h",
        "line": 135,
        "signature": "static JsonValue fromString(const std::string& source);"
      }
    ],
    "fromStringWithWhiteSpaces": [
      {
        "file": "src/Common/JsonValue.h",
        "line": 136,
        "signature": "static JsonValue fromStringWithWhiteSpaces(const std::string& source);"
      }
    ],
    "destructValue": [
      {
        "file": "src/Common/JsonValue.h",
        "line": 153,
        "signature": "void destructValue();"
      }
    ],
    "readArray": [
      {
        "file": "src/Common/JsonValue.h",
        "line": 155,
        "signature": "void readArray(std::istream& in);"
      }
    ],
    "readTrue": [
      {
        "file": "src/Common/JsonValue.h",
        "line": 156,
        "signature": "void readTrue(std::istream& in);"
      }
    ],
    "readFalse": [
      {
        "file": "src/Common/JsonValue.h",
        "line": 157,
        "signature": "void readFalse(std::istream& in);"
      }
    ],
    "readNull": [
      {
        "file": "src/Common/JsonValue.h",
        "line": 158,
        "signature": "void readNull(std::istream& in);"
      }
    ],
    "readNumber": [
      {
        "file": "src/Common/JsonValue.h",
        "line": 159,
        "signature": "void readNumber(std::istream& in, char c);"
      }
    ],
    "readObject": [
      {
        "file": "src/Common/JsonValue.h",
        "line": 160,
        "signature": "void readObject(std::istream& in);"
      }
    ],
    "readString": [
      {
        "file": "src/Common/JsonValue.h",
        "line": 161,
        "signature": "void readString(std::istream& in);"
      }
    ],
    "medianValue": [
      {
        "file": "src/Common/Math.h",
        "line": 26,
        "signature": "T medianValue(std::vector<T> &v) {"
      }
    ],
    "T": [
      {
        "file": "src/Common/Math.h",
        "line": 28,
        "signature": "return T();"
      },
      {
        "file": "src/WalletLegacy/WalletTransactionSender.cpp",
        "line": 806,
        "signature": "return T();"
      }
    ],
    "add": [
      {
        "file": "src/Common/ObserverManager.h",
        "line": 29,
        "signature": "bool add(T* observer) {"
      },
      {
        "file": "src/CryptoNoteCore/BlockchainIndices.h",
        "line": 35,
        "signature": "bool add(const Transaction& transaction);"
      },
      {
        "file": "src/CryptoNoteCore/BlockchainIndices.h",
        "line": 54,
        "signature": "bool add(uint64_t timestamp, const Crypto::Hash& hash);"
      },
      {
        "file": "src/CryptoNoteCore/BlockchainIndices.h",
        "line": 73,
        "signature": "bool add(uint64_t timestamp, const Crypto::Hash& hash);"
      },
      {
        "file": "src/CryptoNoteCore/BlockchainIndices.h",
        "line": 92,
        "signature": "bool add(const Block& block);"
      },
      {
        "file": "src/CryptoNoteCore/BlockchainIndices.h",
        "line": 113,
        "signature": "bool add(const Block& block);"
      }
    ],
    "remove": [
      {
        "file": "src/Common/ObserverManager.h",
        "line": 40,
        "signature": "bool remove(T* observer) {"
      },
      {
        "file": "src/CryptoNoteCore/BlockchainIndices.h",
        "line": 36,
        "signature": "bool remove(const Transaction& transaction);"
      },
      {
        "file": "src/CryptoNoteCore/BlockchainIndices.h",
        "line": 55,
        "signature": "bool remove(uint64_t timestamp, const Crypto::Hash& hash);"
      },
      {
        "file": "src/CryptoNoteCore/BlockchainIndices.h",
        "line": 74,
        "signature": "bool remove(uint64_t timestamp, const Crypto::Hash& hash);"
      },
      {
        "file": "src/CryptoNoteCore/BlockchainIndices.h",
        "line": 93,
        "signature": "bool remove(const Block& block);"
      },
      {
        "file": "src/CryptoNoteCore/BlockchainIndices.h",
        "line": 114,
        "signature": "bool remove(const Block& block);"
      },
      {
        "file": "src/CryptoNoteCore/IntrusiveLinkedList.h",
        "line": 57,
        "signature": "bool remove(Value& value);"
      }
    ],
    "notify": [
      {
        "file": "src/Common/ObserverManager.h",
        "line": 59,
        "signature": "void notify(F notification) {"
      },
      {
        "file": "src/Common/ObserverManager.h",
        "line": 72,
        "signature": "void notify(F notification, const Arg0& arg0) {"
      },
      {
        "file": "src/Common/ObserverManager.h",
        "line": 85,
        "signature": "void notify(F notification, const Arg0& arg0, const Arg1& arg1) {"
      },
      {
        "file": "src/Common/ObserverManager.h",
        "line": 98,
        "signature": "void notify(F notification, const Arg0& arg0, const Arg1& arg1, const Arg2& arg2) {"
      },
      {
        "file": "src/Common/ObserverManager.h",
        "line": 111,
        "signature": "void notify(F notification, const Arg0& arg0, const Arg1& arg1, const Arg2& arg2, const Arg3& arg3) {"
      },
      {
        "file": "src/Common/ObserverManager.h",
        "line": 124,
        "signature": "void notify(F notification, const Arg0& arg0, const Arg1& arg1, const Arg2& arg2, const Arg3& arg3, const Arg4& arg4) {"
      },
      {
        "file": "src/Common/ObserverManager.h",
        "line": 137,
        "signature": "void notify(F notification, const Arg0& arg0, const Arg1& arg1, const Arg2& arg2, const Arg3& arg3, const Arg4& arg4, const Arg5& arg5) {"
      },
      {
        "file": "src/Common/ObserverManager.h",
        "line": 152,
        "signature": "void notify(F notification, Args... args) {"
      },
      {
        "file": "src/P2p/LevinProtocol.h",
        "line": 65,
        "signature": "void notify(uint32_t command, const Request& request, int) {"
      }
    ],
    "SplitPath": [
      {
        "file": "src/Common/PathTools.cpp",
        "line": 74,
        "signature": "void SplitPath(const std::string& path, std::string& directory, std::string& filename) {"
      },
      {
        "file": "src/Common/PathTools.h",
        "line": 28,
        "signature": "void SplitPath(const std::string& path, std::string& directory, std::string& filename);"
      }
    ],
    "HasParentPath": [
      {
        "file": "src/Common/PathTools.cpp",
        "line": 106,
        "signature": "bool HasParentPath(const std::string& path) {"
      },
      {
        "file": "src/Common/PathTools.h",
        "line": 34,
        "signature": "bool HasParentPath(const std::string& path);"
      }
    ],
    "cancel": [
      {
        "file": "src/Common/ScopeExit.h",
        "line": 34,
        "signature": "void cancel();"
      }
    ],
    "handleSignal": [
      {
        "file": "src/Common/SignalHandler.cpp",
        "line": 37,
        "signature": "void handleSignal() {"
      }
    ],
    "winHandler": [
      {
        "file": "src/Common/SignalHandler.cpp",
        "line": 48,
        "signature": "BOOL WINAPI winHandler(DWORD type) {"
      }
    ],
    "posixHandler": [
      {
        "file": "src/Common/SignalHandler.cpp",
        "line": 61,
        "signature": "void posixHandler(int /*type*/) {"
      }
    ],
    "read": [
      {
        "file": "src/Common/StreamTools.cpp",
        "line": 25,
        "signature": "void read(IInputStream& in, void* data, size_t size) {"
      },
      {
        "file": "src/Common/StreamTools.cpp",
        "line": 37,
        "signature": "void read(IInputStream& in, int8_t& value) {"
      },
      {
        "file": "src/Common/StreamTools.cpp",
        "line": 41,
        "signature": "void read(IInputStream& in, int16_t& value) {"
      },
      {
        "file": "src/Common/StreamTools.cpp",
        "line": 46,
        "signature": "void read(IInputStream& in, int32_t& value) {"
      },
      {
        "file": "src/Common/StreamTools.cpp",
        "line": 51,
        "signature": "void read(IInputStream& in, int64_t& value) {"
      },
      {
        "file": "src/Common/StreamTools.cpp",
        "line": 56,
        "signature": "void read(IInputStream& in, uint8_t& value) {"
      },
      {
        "file": "src/Common/StreamTools.cpp",
        "line": 60,
        "signature": "void read(IInputStream& in, uint16_t& value) {"
      },
      {
        "file": "src/Common/StreamTools.cpp",
        "line": 65,
        "signature": "void read(IInputStream& in, uint32_t& value) {"
      },
      {
        "file": "src/Common/StreamTools.cpp",
        "line": 70,
        "signature": "void read(IInputStream& in, uint64_t& value) {"
      },
      {
        "file": "src/Common/StreamTools.cpp",
        "line": 75,
        "signature": "void read(IInputStream& in, std::vector<uint8_t>& data, size_t size) {"
      },
      {
        "file": "src/Common/StreamTools.cpp",
        "line": 80,
        "signature": "void read(IInputStream& in, std::string& data, size_t size) {"
      },
      {
        "file": "src/Common/StreamTools.h",
        "line": 28,
        "signature": "void read(IInputStream& in, void* data, size_t size);"
      },
      {
        "file": "src/Common/StreamTools.h",
        "line": 29,
        "signature": "void read(IInputStream& in, int8_t& value);"
      },
      {
        "file": "src/Common/StreamTools.h",
        "line": 30,
        "signature": "void read(IInputStream& in, int16_t& value);"
      },
      {
        "file": "src/Common/StreamTools.h",
        "line": 31,
        "signature": "void read(IInputStream& in, int32_t& value);"
      },
      {
        "file": "src/Common/StreamTools.h",
        "line": 32,
        "signature": "void read(IInputStream& in, int64_t& value);"
      },
      {
        "file": "src/Common/StreamTools.h",
        "line": 33,
        "signature": "void read(IInputStream& in, uint8_t& value);"
      },
      {
        "file": "src/Common/StreamTools.h",
        "line": 34,
        "signature": "void read(IInputStream& in, uint16_t& value);"
      },
      {
        "file": "src/Common/StreamTools.h",
        "line": 35,
        "signature": "void read(IInputStream& in, uint32_t& value);"
      },
      {
        "file": "src/Common/StreamTools.h",
        "line": 36,
        "signature": "void read(IInputStream& in, uint64_t& value);"
      },
      {
        "file": "src/Common/StreamTools.h",
        "line": 37,
        "signature": "void read(IInputStream& in, std::vector<uint8_t>& data, size_t size);"
      },
      {
        "file": "src/Common/StreamTools.h",
        "line": 38,
        "signature": "void read(IInputStream& in, std::string& data, size_t size);"
      },
      {
        "file": "src/Platform/Windows/System/TcpConnection.h",
        "line": 25,
        "signature": "size_t read(uint8_t* data, size_t size);"
      }
    ],
    "readVarint": [
      {
        "file": "src/Common/StreamTools.cpp",
        "line": 86,
        "signature": "void readVarint(IInputStream& in, uint8_t& value) {"
      },
      {
        "file": "src/Common/StreamTools.cpp",
        "line": 108,
        "signature": "void readVarint(IInputStream& in, uint16_t& value) {"
      },
      {
        "file": "src/Common/StreamTools.cpp",
        "line": 130,
        "signature": "void readVarint(IInputStream& in, uint32_t& value) {"
      },
      {
        "file": "src/Common/StreamTools.cpp",
        "line": 152,
        "signature": "void readVarint(IInputStream& in, uint64_t& value) {"
      },
      {
        "file": "src/Common/StreamTools.h",
        "line": 39,
        "signature": "void readVarint(IInputStream& in, uint8_t& value);"
      },
      {
        "file": "src/Common/StreamTools.h",
        "line": 40,
        "signature": "void readVarint(IInputStream& in, uint16_t& value);"
      },
      {
        "file": "src/Common/StreamTools.h",
        "line": 41,
        "signature": "void readVarint(IInputStream& in, uint32_t& value);"
      },
      {
        "file": "src/Common/StreamTools.h",
        "line": 42,
        "signature": "void readVarint(IInputStream& in, uint64_t& value);"
      },
      {
        "file": "src/Serialization/KVBinaryInputStreamSerializer.cpp",
        "line": 51,
        "signature": "size_t readVarint(Common::IInputStream& s) {"
      }
    ],
    "write": [
      {
        "file": "src/Common/StreamTools.cpp",
        "line": 174,
        "signature": "void write(IOutputStream& out, const void* data, size_t size) {"
      },
      {
        "file": "src/Common/StreamTools.cpp",
        "line": 186,
        "signature": "void write(IOutputStream& out, int8_t value) {"
      },
      {
        "file": "src/Common/StreamTools.cpp",
        "line": 190,
        "signature": "void write(IOutputStream& out, int16_t value) {"
      },
      {
        "file": "src/Common/StreamTools.cpp",
        "line": 195,
        "signature": "void write(IOutputStream& out, int32_t value) {"
      },
      {
        "file": "src/Common/StreamTools.cpp",
        "line": 200,
        "signature": "void write(IOutputStream& out, int64_t value) {"
      },
      {
        "file": "src/Common/StreamTools.cpp",
        "line": 205,
        "signature": "void write(IOutputStream& out, uint8_t value) {"
      },
      {
        "file": "src/Common/StreamTools.cpp",
        "line": 209,
        "signature": "void write(IOutputStream& out, uint16_t value) {"
      },
      {
        "file": "src/Common/StreamTools.cpp",
        "line": 214,
        "signature": "void write(IOutputStream& out, uint32_t value) {"
      },
      {
        "file": "src/Common/StreamTools.cpp",
        "line": 219,
        "signature": "void write(IOutputStream& out, uint64_t value) {"
      },
      {
        "file": "src/Common/StreamTools.cpp",
        "line": 224,
        "signature": "void write(IOutputStream& out, const std::vector<uint8_t>& data) {"
      },
      {
        "file": "src/Common/StreamTools.cpp",
        "line": 228,
        "signature": "void write(IOutputStream& out, const std::string& data) {"
      },
      {
        "file": "src/Common/StreamTools.h",
        "line": 44,
        "signature": "void write(IOutputStream& out, const void* data, size_t size);"
      },
      {
        "file": "src/Common/StreamTools.h",
        "line": 45,
        "signature": "void write(IOutputStream& out, int8_t value);"
      },
      {
        "file": "src/Common/StreamTools.h",
        "line": 46,
        "signature": "void write(IOutputStream& out, int16_t value);"
      },
      {
        "file": "src/Common/StreamTools.h",
        "line": 47,
        "signature": "void write(IOutputStream& out, int32_t value);"
      },
      {
        "file": "src/Common/StreamTools.h",
        "line": 48,
        "signature": "void write(IOutputStream& out, int64_t value);"
      },
      {
        "file": "src/Common/StreamTools.h",
        "line": 49,
        "signature": "void write(IOutputStream& out, uint8_t value);"
      },
      {
        "file": "src/Common/StreamTools.h",
        "line": 50,
        "signature": "void write(IOutputStream& out, uint16_t value);"
      },
      {
        "file": "src/Common/StreamTools.h",
        "line": 51,
        "signature": "void write(IOutputStream& out, uint32_t value);"
      },
      {
        "file": "src/Common/StreamTools.h",
        "line": 52,
        "signature": "void write(IOutputStream& out, uint64_t value);"
      },
      {
        "file": "src/Common/StreamTools.h",
        "line": 53,
        "signature": "void write(IOutputStream& out, const std::vector<uint8_t>& data);"
      },
      {
        "file": "src/Common/StreamTools.h",
        "line": 54,
        "signature": "void write(IOutputStream& out, const std::string& data);"
      },
      {
        "file": "src/Platform/Windows/System/TcpConnection.h",
        "line": 26,
        "signature": "size_t write(const uint8_t* data, size_t size);"
      }
    ],
    "writeVarint": [
      {
        "file": "src/Common/StreamTools.cpp",
        "line": 232,
        "signature": "void writeVarint(IOutputStream& out, uint32_t value) {"
      },
      {
        "file": "src/Common/StreamTools.cpp",
        "line": 241,
        "signature": "void writeVarint(IOutputStream& out, uint64_t value) {"
      },
      {
        "file": "src/Common/StreamTools.h",
        "line": 55,
        "signature": "void writeVarint(IOutputStream& out, uint64_t value);"
      }
    ],
    "StringView": [
      {
        "file": "src/Common/StringBuffer.h",
        "line": 96,
        "signature": "return StringView(data, size);"
      },
      {
        "file": "src/Common/StringBuffer.h",
        "line": 391,
        "signature": "return StringView(data, headSize);"
      },
      {
        "file": "src/Common/StringBuffer.h",
        "line": 405,
        "signature": "return StringView(data + headSize, size - headSize);"
      },
      {
        "file": "src/Common/StringBuffer.h",
        "line": 412,
        "signature": "return StringView(data, size - tailSize);"
      },
      {
        "file": "src/Common/StringBuffer.h",
        "line": 419,
        "signature": "return StringView(data + startIndex, endIndex - startIndex);"
      },
      {
        "file": "src/Common/StringBuffer.h",
        "line": 426,
        "signature": "return StringView(data + startIndex, sliceSize);"
      },
      {
        "file": "src/Common/StringView.cpp",
        "line": 314,
        "signature": "return StringView(data, headSize);"
      },
      {
        "file": "src/Common/StringView.cpp",
        "line": 326,
        "signature": "return StringView(data + headSize, size - headSize);"
      },
      {
        "file": "src/Common/StringView.cpp",
        "line": 332,
        "signature": "return StringView(data, size - tailSize);"
      },
      {
        "file": "src/Common/StringView.cpp",
        "line": 338,
        "signature": "return StringView(data + startIndex, endIndex - startIndex);"
      },
      {
        "file": "src/Common/StringView.cpp",
        "line": 344,
        "signature": "return StringView(data + startIndex, sliceSize);"
      }
    ],
    "fromHex": [
      {
        "file": "src/Common/StringTools.cpp",
        "line": 60,
        "signature": "uint8_t fromHex(char character) {"
      },
      {
        "file": "src/Common/StringTools.cpp",
        "line": 69,
        "signature": "bool fromHex(char character, uint8_t& value) {"
      },
      {
        "file": "src/Common/StringTools.cpp",
        "line": 78,
        "signature": "size_t fromHex(const std::string& text, void* data, size_t bufferSize) {"
      },
      {
        "file": "src/Common/StringTools.cpp",
        "line": 94,
        "signature": "bool fromHex(const std::string& text, void* data, size_t bufferSize, size_t& size) {"
      },
      {
        "file": "src/Common/StringTools.cpp",
        "line": 134,
        "signature": "bool fromHex(const std::string& text, std::vector<uint8_t>& data) {"
      },
      {
        "file": "src/Common/StringTools.h",
        "line": 31,
        "signature": "uint8_t fromHex(char character); // Returns value of hex 'character', throws on error"
      },
      {
        "file": "src/Common/StringTools.h",
        "line": 32,
        "signature": "bool fromHex(char character, uint8_t& value); // Assigns value of hex 'character' to 'value', returns false on error, does not throw"
      },
      {
        "file": "src/Common/StringTools.h",
        "line": 33,
        "signature": "size_t fromHex(const std::string& text, void* data, size_t bufferSize); // Assigns values of hex 'text' to buffer 'data' up to 'bufferSize', returns actual data size, throws on error"
      },
      {
        "file": "src/Common/StringTools.h",
        "line": 34,
        "signature": "bool fromHex(const std::string& text, void* data, size_t bufferSize, size_t& size); // Assigns values of hex 'text' to buffer 'data' up to 'bufferSize', assigns actual data size to 'size', returns false on error, does not throw"
      },
      {
        "file": "src/Common/StringTools.h",
        "line": 36,
        "signature": "bool fromHex(const std::string& text, std::vector<uint8_t>& data); // Appends values of hex 'text' to 'data', returns false on error, does not throw"
      }
    ],
    "toHex": [
      {
        "file": "src/Common/StringTools.cpp",
        "line": 166,
        "signature": "void toHex(const void* data, size_t size, std::string& text) {"
      },
      {
        "file": "src/Common/StringTools.cpp",
        "line": 183,
        "signature": "void toHex(const std::vector<uint8_t>& data, std::string& text) {"
      },
      {
        "file": "src/Common/StringTools.h",
        "line": 45,
        "signature": "void toHex(const void* data, size_t size, std::string& text); // Appends hex representation of ('data', 'size') to 'text', does not throw"
      },
      {
        "file": "src/Common/StringTools.h",
        "line": 47,
        "signature": "void toHex(const std::vector<uint8_t>& data, std::string& text); // Appends hex representation of 'data' to 'text', does not throw"
      }
    ],
    "is_base64": [
      {
        "file": "src/Common/StringTools.cpp",
        "line": 221,
        "signature": "bool is_base64(unsigned char c) {"
      }
    ],
    "loadFileToString": [
      {
        "file": "src/Common/StringTools.cpp",
        "line": 269,
        "signature": "bool loadFileToString(const std::string& filepath, std::string& buf) {"
      },
      {
        "file": "src/Common/StringTools.h",
        "line": 108,
        "signature": "bool loadFileToString(const std::string& filepath, std::string& buf);"
      }
    ],
    "saveStringToFile": [
      {
        "file": "src/Common/StringTools.cpp",
        "line": 289,
        "signature": "bool saveStringToFile(const std::string& filepath, const std::string& buf) {"
      },
      {
        "file": "src/Common/StringTools.h",
        "line": 109,
        "signature": "bool saveStringToFile(const std::string& filepath, const std::string& buf);"
      }
    ],
    "stringToIpAddress": [
      {
        "file": "src/Common/StringTools.cpp",
        "line": 316,
        "signature": "uint32_t stringToIpAddress(std::string addr) {"
      },
      {
        "file": "src/Common/StringTools.h",
        "line": 115,
        "signature": "uint32_t stringToIpAddress(std::string addr);"
      }
    ],
    "parseIpAddressAndPort": [
      {
        "file": "src/Common/StringTools.cpp",
        "line": 331,
        "signature": "bool parseIpAddressAndPort(uint32_t& ip, uint32_t& port, const std::string& addr) {"
      },
      {
        "file": "src/Common/StringTools.h",
        "line": 116,
        "signature": "bool parseIpAddressAndPort(uint32_t& ip, uint32_t& port, const std::string& addr);"
      }
    ],
    "podFromHex": [
      {
        "file": "src/Common/StringTools.h",
        "line": 39,
        "signature": "bool podFromHex(const std::string& text, T& val) {"
      }
    ],
    "GetSystemInfo": [
      {
        "file": "src/Common/Util.cpp",
        "line": 66,
        "signature": "else GetSystemInfo(&si);"
      }
    ],
    "get_windows_version_display_string": [
      {
        "file": "src/Common/Util.cpp",
        "line": 277,
        "signature": "return get_windows_version_display_string();"
      }
    ],
    "get_nix_version_display_string": [
      {
        "file": "src/Common/Util.cpp",
        "line": 279,
        "signature": "return get_nix_version_display_string();"
      }
    ],
    "directoryExists": [
      {
        "file": "src/Common/Util.cpp",
        "line": 362,
        "signature": "bool directoryExists(const std::string& path) {"
      },
      {
        "file": "src/Common/Util.h",
        "line": 29,
        "signature": "bool directoryExists(const std::string& path);"
      }
    ],
    "create_directories_if_necessary": [
      {
        "file": "src/Common/Util.h",
        "line": 27,
        "signature": "bool create_directories_if_necessary(const std::string& path);"
      }
    ],
    "read_varint": [
      {
        "file": "src/Common/Varint.h",
        "line": 72,
        "signature": "int read_varint(InputIt &&first, InputIt &&last, T &i) {"
      }
    ],
    "rol32": [
      {
        "file": "src/Common/int-util.h",
        "line": 31,
        "signature": "static inline uint32_t rol32(uint32_t x, int r) {"
      },
      {
        "file": "src/Common/int-util.h",
        "line": 42,
        "signature": "static inline uint32_t rol32(uint32_t x, int r) {"
      }
    ],
    "_rotl": [
      {
        "file": "src/Common/int-util.h",
        "line": 33,
        "signature": "return _rotl(x, r);"
      }
    ],
    "rol64": [
      {
        "file": "src/Common/int-util.h",
        "line": 36,
        "signature": "static inline uint64_t rol64(uint64_t x, int r) {"
      },
      {
        "file": "src/Common/int-util.h",
        "line": 46,
        "signature": "static inline uint64_t rol64(uint64_t x, int r) {"
      }
    ],
    "_rotl64": [
      {
        "file": "src/Common/int-util.h",
        "line": 37,
        "signature": "return _rotl64(x, r);"
      }
    ],
    "hi_dword": [
      {
        "file": "src/Common/int-util.h",
        "line": 52,
        "signature": "static inline uint64_t hi_dword(uint64_t val) {"
      }
    ],
    "lo_dword": [
      {
        "file": "src/Common/int-util.h",
        "line": 56,
        "signature": "static inline uint64_t lo_dword(uint64_t val) {"
      }
    ],
    "mul128": [
      {
        "file": "src/Common/int-util.h",
        "line": 60,
        "signature": "static inline uint64_t mul128(uint64_t multiplier, uint64_t multiplicand, uint64_t* product_hi) {"
      }
    ],
    "div_with_reminder": [
      {
        "file": "src/Common/int-util.h",
        "line": 86,
        "signature": "static inline uint64_t div_with_reminder(uint64_t dividend, uint32_t divisor, uint32_t* remainder) {"
      }
    ],
    "div128_32": [
      {
        "file": "src/Common/int-util.h",
        "line": 93,
        "signature": "static inline uint32_t div128_32(uint64_t dividend_hi, uint64_t dividend_lo, uint32_t divisor, uint64_t* quotient_hi, uint64_t* quotient_lo) {"
      }
    ],
    "ident32": [
      {
        "file": "src/Common/int-util.h",
        "line": 126,
        "signature": "static inline uint32_t ident32(uint32_t x) { return x; }"
      }
    ],
    "ident64": [
      {
        "file": "src/Common/int-util.h",
        "line": 127,
        "signature": "static inline uint64_t ident64(uint64_t x) { return x; }"
      }
    ],
    "swap32": [
      {
        "file": "src/Common/int-util.h",
        "line": 129,
        "signature": "static inline uint32_t swap32(uint32_t x) {"
      }
    ],
    "swap64": [
      {
        "file": "src/Common/int-util.h",
        "line": 133,
        "signature": "static inline uint64_t swap64(uint64_t x) {"
      }
    ],
    "mem_inplace_ident": [
      {
        "file": "src/Common/int-util.h",
        "line": 144,
        "signature": "static inline void mem_inplace_ident(void *mem UNUSED, size_t n UNUSED) { }"
      }
    ],
    "mem_inplace_swap32": [
      {
        "file": "src/Common/int-util.h",
        "line": 147,
        "signature": "static inline void mem_inplace_swap32(void *mem, size_t n) {"
      }
    ],
    "mem_inplace_swap64": [
      {
        "file": "src/Common/int-util.h",
        "line": 153,
        "signature": "static inline void mem_inplace_swap64(void *mem, size_t n) {"
      }
    ],
    "memcpy_ident32": [
      {
        "file": "src/Common/int-util.h",
        "line": 160,
        "signature": "static inline void memcpy_ident32(void *dst, const void *src, size_t n) {"
      }
    ],
    "memcpy_ident64": [
      {
        "file": "src/Common/int-util.h",
        "line": 163,
        "signature": "static inline void memcpy_ident64(void *dst, const void *src, size_t n) {"
      }
    ],
    "memcpy_swap32": [
      {
        "file": "src/Common/int-util.h",
        "line": 167,
        "signature": "static inline void memcpy_swap32(void *dst, const void *src, size_t n) {"
      }
    ],
    "memcpy_swap64": [
      {
        "file": "src/Common/int-util.h",
        "line": 173,
        "signature": "static inline void memcpy_swap64(void *dst, const void *src, size_t n) {"
      }
    ],
    "print_COMMAND_REQUEST_STAT_INFO": [
      {
        "file": "src/ConnectivityTool/ConnectivityTool.cpp",
        "line": 150,
        "signature": "bool print_COMMAND_REQUEST_STAT_INFO(const COMMAND_REQUEST_STAT_INFO::response &si) {"
      }
    ],
    "print_COMMAND_REQUEST_NETWORK_STATE": [
      {
        "file": "src/ConnectivityTool/ConnectivityTool.cpp",
        "line": 166,
        "signature": "bool print_COMMAND_REQUEST_NETWORK_STATE(const COMMAND_REQUEST_NETWORK_STATE::response &ns) {"
      }
    ],
    "handle_get_daemon_info": [
      {
        "file": "src/ConnectivityTool/ConnectivityTool.cpp",
        "line": 188,
        "signature": "bool handle_get_daemon_info(po::variables_map& vm) {"
      }
    ],
    "handle_request_stat": [
      {
        "file": "src/ConnectivityTool/ConnectivityTool.cpp",
        "line": 222,
        "signature": "bool handle_request_stat(po::variables_map& vm, PeerIdType peer_id) {"
      }
    ],
    "levin": [
      {
        "file": "src/ConnectivityTool/ConnectivityTool.cpp",
        "line": 254,
        "signature": "LevinProtocol levin(connection);"
      }
    ],
    "generate_and_print_keys": [
      {
        "file": "src/ConnectivityTool/ConnectivityTool.cpp",
        "line": 325,
        "signature": "bool generate_and_print_keys() {"
      }
    ],
    "main": [
      {
        "file": "src/ConnectivityTool/ConnectivityTool.cpp",
        "line": 334,
        "signature": "int main(int argc, char *argv[]) {"
      },
      {
        "file": "src/Miner/main.cpp",
        "line": 28,
        "signature": "int main(int argc, char** argv) {"
      },
      {
        "file": "src/Optimizer/Optimizer.cpp",
        "line": 303,
        "signature": "int main(int argc, char *argv[]) {"
      },
      {
        "file": "src/PaymentGateService/main.cpp",
        "line": 295,
        "signature": "int main(int argc, char** argv) {"
      },
      {
        "file": "src/SimpleWallet/SimpleWallet.cpp",
        "line": 1954,
        "signature": "int main(int argc, char* argv[]) {"
      }
    ],
    "generate": [
      {
        "file": "src/CryptoNoteCore/Account.h",
        "line": 33,
        "signature": "void generate();"
      },
      {
        "file": "src/P2p/P2pNode.cpp",
        "line": 57,
        "signature": "bool generate(size_t& num) {"
      }
    ],
    "generateViewFromSpend": [
      {
        "file": "src/CryptoNoteCore/Account.h",
        "line": 34,
        "signature": "static void generateViewFromSpend(Crypto::SecretKey &, Crypto::SecretKey &, Crypto::PublicKey &);"
      }
    ],
    "setAccountKeys": [
      {
        "file": "src/CryptoNoteCore/Account.h",
        "line": 38,
        "signature": "void setAccountKeys(const AccountKeys& keys);"
      }
    ],
    "set_createtime": [
      {
        "file": "src/CryptoNoteCore/Account.h",
        "line": 40,
        "signature": "void set_createtime(uint64_t val) { m_creation_timestamp = val; }"
      }
    ],
    "serialize": [
      {
        "file": "src/CryptoNoteCore/Account.h",
        "line": 41,
        "signature": "void serialize(ISerializer& s);"
      },
      {
        "file": "src/CryptoNoteCore/Account.h",
        "line": 44,
        "signature": "inline void serialize(t_archive &a, const unsigned int /*ver*/) {"
      },
      {
        "file": "src/CryptoNoteCore/BlockIndex.h",
        "line": 73,
        "signature": "void serialize(ISerializer& s);"
      },
      {
        "file": "src/CryptoNoteCore/Blockchain.cpp",
        "line": 77,
        "signature": "bool serialize(google::sparse_hash_map<K, V, Hash>& value, Common::StringView name, CryptoNote::ISerializer& serializer) {"
      },
      {
        "file": "src/CryptoNoteCore/Blockchain.cpp",
        "line": 82,
        "signature": "bool serialize(google::sparse_hash_set<K, Hash>& value, Common::StringView name, CryptoNote::ISerializer& serializer) {"
      },
      {
        "file": "src/CryptoNoteCore/Blockchain.cpp",
        "line": 106,
        "signature": "bool serialize(std::vector<std::pair<Blockchain::TransactionIndex, uint16_t>>& value, Common::StringView name, CryptoNote::ISerializer& s) {"
      },
      {
        "file": "src/CryptoNoteCore/Blockchain.cpp",
        "line": 129,
        "signature": "void serialize(Blockchain::TransactionIndex& value, ISerializer& s) {"
      },
      {
        "file": "src/CryptoNoteCore/Blockchain.cpp",
        "line": 173,
        "signature": "void serialize(ISerializer& s) {"
      },
      {
        "file": "src/CryptoNoteCore/Blockchain.cpp",
        "line": 261,
        "signature": "void serialize(ISerializer& s) {"
      },
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 89,
        "signature": "void serialize(archive_t &ar, const unsigned int version);"
      },
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 198,
        "signature": "void serialize(ISerializer& s) {"
      },
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 214,
        "signature": "void serialize(ISerializer& s) {"
      },
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 225,
        "signature": "void serialize(ISerializer& s) {"
      },
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 239,
        "signature": "void serialize(ISerializer& s) {"
      },
      {
        "file": "src/CryptoNoteCore/BlockchainIndices.h",
        "line": 40,
        "signature": "void serialize(ISerializer& s);"
      },
      {
        "file": "src/CryptoNoteCore/BlockchainIndices.h",
        "line": 43,
        "signature": "void serialize(Archive& archive, unsigned int version) {"
      },
      {
        "file": "src/CryptoNoteCore/BlockchainIndices.h",
        "line": 59,
        "signature": "void serialize(ISerializer& s);"
      },
      {
        "file": "src/CryptoNoteCore/BlockchainIndices.h",
        "line": 62,
        "signature": "void serialize(Archive& archive, unsigned int version) {"
      },
      {
        "file": "src/CryptoNoteCore/BlockchainIndices.h",
        "line": 78,
        "signature": "void serialize(ISerializer& s);"
      },
      {
        "file": "src/CryptoNoteCore/BlockchainIndices.h",
        "line": 81,
        "signature": "void serialize(Archive& archive, unsigned int version) {"
      },
      {
        "file": "src/CryptoNoteCore/BlockchainIndices.h",
        "line": 97,
        "signature": "void serialize(ISerializer& s);"
      },
      {
        "file": "src/CryptoNoteCore/BlockchainIndices.h",
        "line": 100,
        "signature": "void serialize(Archive& archive, unsigned int version) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.cpp",
        "line": 149,
        "signature": "bool serialize(PublicKey& pubKey, Common::StringView name, CryptoNote::ISerializer& serializer) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.cpp",
        "line": 153,
        "signature": "bool serialize(SecretKey& secKey, Common::StringView name, CryptoNote::ISerializer& serializer) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.cpp",
        "line": 157,
        "signature": "bool serialize(Hash& h, Common::StringView name, CryptoNote::ISerializer& serializer) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.cpp",
        "line": 161,
        "signature": "bool serialize(KeyImage& keyImage, Common::StringView name, CryptoNote::ISerializer& serializer) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.cpp",
        "line": 170,
        "signature": "bool serialize(Signature& sig, Common::StringView name, CryptoNote::ISerializer& serializer) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.cpp",
        "line": 174,
        "signature": "bool serialize(EllipticCurveScalar& ecScalar, Common::StringView name, CryptoNote::ISerializer& serializer) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.cpp",
        "line": 178,
        "signature": "bool serialize(EllipticCurvePoint& ecPoint, Common::StringView name, CryptoNote::ISerializer& serializer) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.cpp",
        "line": 186,
        "signature": "void serialize(TransactionPrefix& txP, ISerializer& serializer) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.cpp",
        "line": 199,
        "signature": "void serialize(Transaction& tx, ISerializer& serializer) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.cpp",
        "line": 246,
        "signature": "void serialize(TransactionInput& in, ISerializer& serializer) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.cpp",
        "line": 262,
        "signature": "void serialize(BaseInput& gen, ISerializer& serializer) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.cpp",
        "line": 266,
        "signature": "void serialize(KeyInput& key, ISerializer& serializer) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.cpp",
        "line": 272,
        "signature": "void serialize(MultisignatureInput& multisignature, ISerializer& serializer) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.cpp",
        "line": 280,
        "signature": "void serialize(TransactionInputs & inputs, ISerializer & serializer) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.cpp",
        "line": 285,
        "signature": "void serialize(TransactionOutput& output, ISerializer& serializer) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.cpp",
        "line": 290,
        "signature": "void serialize(TransactionOutputTarget& output, ISerializer& serializer) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.cpp",
        "line": 306,
        "signature": "void serialize(KeyOutput& key, ISerializer& serializer) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.cpp",
        "line": 310,
        "signature": "void serialize(MultisignatureOutput& multisignature, ISerializer& serializer) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.cpp",
        "line": 316,
        "signature": "void serialize(ParentBlockSerializer& pbs, ISerializer& serializer) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.cpp",
        "line": 406,
        "signature": "void serialize(BlockHeader& header, ISerializer& serializer) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.cpp",
        "line": 410,
        "signature": "void serialize(Block& block, ISerializer& serializer) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.cpp",
        "line": 422,
        "signature": "void serialize(AccountPublicAddress& address, ISerializer& serializer) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.cpp",
        "line": 427,
        "signature": "void serialize(AccountKeys& keys, ISerializer& s) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.cpp",
        "line": 440,
        "signature": "void serialize(TransactionExtraMergeMiningTag& tag, ISerializer& serializer) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.cpp",
        "line": 456,
        "signature": "void serialize(KeyPair& keyPair, ISerializer& serializer) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.h",
        "line": 27,
        "signature": "bool serialize(PublicKey& pubKey, Common::StringView name, CryptoNote::ISerializer& serializer);"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.h",
        "line": 28,
        "signature": "bool serialize(SecretKey& secKey, Common::StringView name, CryptoNote::ISerializer& serializer);"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.h",
        "line": 29,
        "signature": "bool serialize(Hash& h, Common::StringView name, CryptoNote::ISerializer& serializer);"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.h",
        "line": 30,
        "signature": "bool serialize(chacha8_iv &chacha8, Common::StringView name, CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.h",
        "line": 31,
        "signature": "bool serialize(KeyImage &keyImage, Common::StringView name, CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.h",
        "line": 32,
        "signature": "bool serialize(Signature& sig, Common::StringView name, CryptoNote::ISerializer& serializer);"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.h",
        "line": 33,
        "signature": "bool serialize(EllipticCurveScalar& ecScalar, Common::StringView name, CryptoNote::ISerializer& serializer);"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.h",
        "line": 34,
        "signature": "bool serialize(EllipticCurvePoint& ecPoint, Common::StringView name, CryptoNote::ISerializer& serializer);"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.h",
        "line": 43,
        "signature": "void serialize(TransactionPrefix& txP, ISerializer& serializer);"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.h",
        "line": 44,
        "signature": "void serialize(Transaction& tx, ISerializer& serializer);"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.h",
        "line": 45,
        "signature": "void serialize(TransactionInput& in, ISerializer& serializer);"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.h",
        "line": 46,
        "signature": "void serialize(TransactionOutput& in, ISerializer& serializer);"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.h",
        "line": 48,
        "signature": "void serialize(BaseInput& gen, ISerializer& serializer);"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.h",
        "line": 49,
        "signature": "void serialize(KeyInput& key, ISerializer& serializer);"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.h",
        "line": 50,
        "signature": "void serialize(MultisignatureInput& multisignature, ISerializer& serializer);"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.h",
        "line": 52,
        "signature": "void serialize(TransactionOutput& output, ISerializer& serializer);"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.h",
        "line": 53,
        "signature": "void serialize(TransactionOutputTarget& output, ISerializer& serializer);"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.h",
        "line": 54,
        "signature": "void serialize(KeyOutput& key, ISerializer& serializer);"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.h",
        "line": 55,
        "signature": "void serialize(MultisignatureOutput& multisignature, ISerializer& serializer);"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.h",
        "line": 57,
        "signature": "void serialize(BlockHeader& header, ISerializer& serializer);"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.h",
        "line": 58,
        "signature": "void serialize(Block& block, ISerializer& serializer);"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.h",
        "line": 59,
        "signature": "void serialize(ParentBlockSerializer& pbs, ISerializer& serializer);"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.h",
        "line": 60,
        "signature": "void serialize(TransactionExtraMergeMiningTag& tag, ISerializer& serializer);"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.h",
        "line": 62,
        "signature": "void serialize(AccountPublicAddress& address, ISerializer& serializer);"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.h",
        "line": 63,
        "signature": "void serialize(AccountKeys& keys, ISerializer& s);"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.h",
        "line": 64,
        "signature": "void serialize(TransactionInputs &inputs, ISerializer &serializer);"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.h",
        "line": 66,
        "signature": "void serialize(KeyPair& keyPair, ISerializer& serializer);"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteStatInfo.h",
        "line": 32,
        "signature": "void serialize(ISerializer& s) {"
      },
      {
        "file": "src/CryptoNoteCore/DepositIndex.h",
        "line": 43,
        "signature": "void serialize(ISerializer& s);"
      },
      {
        "file": "src/CryptoNoteCore/DepositIndex.h",
        "line": 51,
        "signature": "void serialize(ISerializer& s);"
      },
      {
        "file": "src/CryptoNoteCore/InvestmentIndex.h",
        "line": 43,
        "signature": "void serialize(ISerializer& s);"
      },
      {
        "file": "src/CryptoNoteCore/InvestmentIndex.h",
        "line": 51,
        "signature": "void serialize(ISerializer& s);"
      },
      {
        "file": "src/CryptoNoteCore/Miner.h",
        "line": 65,
        "signature": "void serialize(ISerializer& s) {"
      },
      {
        "file": "src/CryptoNoteCore/TransactionExtra.h",
        "line": 66,
        "signature": "bool serialize(ISerializer& serializer);"
      },
      {
        "file": "src/CryptoNoteCore/TransactionPool.h",
        "line": 139,
        "signature": "void serialize(ISerializer& s);"
      },
      {
        "file": "src/CryptoNoteProtocol/CryptoNoteProtocolDefinitions.h",
        "line": 32,
        "signature": "void serialize(ISerializer& s) {"
      },
      {
        "file": "src/CryptoNoteProtocol/CryptoNoteProtocolDefinitions.h",
        "line": 43,
        "signature": "void serialize(ISerializer& s) {"
      },
      {
        "file": "src/CryptoNoteProtocol/CryptoNoteProtocolDefinitions.h",
        "line": 54,
        "signature": "void serialize(ISerializer& s) {"
      },
      {
        "file": "src/CryptoNoteProtocol/CryptoNoteProtocolDefinitions.h",
        "line": 65,
        "signature": "void serialize(ISerializer& s) {"
      },
      {
        "file": "src/CryptoNoteProtocol/CryptoNoteProtocolDefinitions.h",
        "line": 81,
        "signature": "void serialize(ISerializer& s) {"
      },
      {
        "file": "src/CryptoNoteProtocol/CryptoNoteProtocolDefinitions.h",
        "line": 101,
        "signature": "void serialize(ISerializer& s) {"
      },
      {
        "file": "src/CryptoNoteProtocol/CryptoNoteProtocolDefinitions.h",
        "line": 121,
        "signature": "void serialize(ISerializer& s) {"
      },
      {
        "file": "src/CryptoNoteProtocol/CryptoNoteProtocolDefinitions.h",
        "line": 140,
        "signature": "void serialize(ISerializer& s) {"
      },
      {
        "file": "src/CryptoNoteProtocol/CryptoNoteProtocolDefinitions.h",
        "line": 163,
        "signature": "void serialize(ISerializer& s) {"
      },
      {
        "file": "src/CryptoNoteProtocol/CryptoNoteProtocolDefinitions.h",
        "line": 175,
        "signature": "void serialize(ISerializer& s) {"
      },
      {
        "file": "src/CryptoNoteProtocol/CryptoNoteProtocolDefinitions.h",
        "line": 194,
        "signature": "void serialize(ISerializer& s) {"
      },
      {
        "file": "src/CryptoNoteProtocol/CryptoNoteProtocolHandler.h",
        "line": 56,
        "signature": "void serialize(ISerializer& s) {"
      },
      {
        "file": "src/P2p/NetNode.h",
        "line": 131,
        "signature": "void serialize(ISerializer& s);"
      },
      {
        "file": "src/P2p/NetNode.h",
        "line": 239,
        "signature": "void serialize(ISerializer& s) {"
      },
      {
        "file": "src/P2p/P2pNode.h",
        "line": 69,
        "signature": "void serialize(ISerializer& s);"
      },
      {
        "file": "src/P2p/P2pProtocolDefinitions.h",
        "line": 24,
        "signature": "inline bool serialize(uuid& v, Common::StringView name, ISerializer& s) {"
      },
      {
        "file": "src/P2p/P2pProtocolDefinitions.h",
        "line": 30,
        "signature": "void serialize(ISerializer& s) {"
      },
      {
        "file": "src/P2p/P2pProtocolDefinitions.h",
        "line": 54,
        "signature": "void serialize(ISerializer& s) {"
      },
      {
        "file": "src/P2p/P2pProtocolDefinitions.h",
        "line": 71,
        "signature": "void serialize(ISerializer& s) {"
      },
      {
        "file": "src/P2p/P2pProtocolDefinitions.h",
        "line": 91,
        "signature": "void serialize(ISerializer& s) {"
      },
      {
        "file": "src/P2p/P2pProtocolDefinitions.h",
        "line": 104,
        "signature": "void serialize(ISerializer& s) {"
      },
      {
        "file": "src/P2p/P2pProtocolDefinitions.h",
        "line": 124,
        "signature": "void serialize(ISerializer& s) {"
      },
      {
        "file": "src/P2p/P2pProtocolDefinitions.h",
        "line": 136,
        "signature": "void serialize(ISerializer& s) {"
      },
      {
        "file": "src/P2p/P2pProtocolDefinitions.h",
        "line": 162,
        "signature": "void serialize(ISerializer& s) {}"
      },
      {
        "file": "src/P2p/P2pProtocolDefinitions.h",
        "line": 170,
        "signature": "void serialize(ISerializer& s) {"
      },
      {
        "file": "src/P2p/P2pProtocolDefinitions.h",
        "line": 188,
        "signature": "void serialize(ISerializer& s) {"
      },
      {
        "file": "src/P2p/P2pProtocolDefinitions.h",
        "line": 210,
        "signature": "void serialize(ISerializer& s) {"
      },
      {
        "file": "src/P2p/P2pProtocolDefinitions.h",
        "line": 223,
        "signature": "void serialize(ISerializer& s) {"
      },
      {
        "file": "src/P2p/P2pProtocolDefinitions.h",
        "line": 245,
        "signature": "void serialize(ISerializer& s) {"
      },
      {
        "file": "src/P2p/P2pProtocolDefinitions.h",
        "line": 258,
        "signature": "void serialize(ISerializer& s) {"
      },
      {
        "file": "src/P2p/P2pProtocolDefinitions.h",
        "line": 277,
        "signature": "void serialize(ISerializer& s) {}"
      },
      {
        "file": "src/P2p/P2pProtocolDefinitions.h",
        "line": 284,
        "signature": "void serialize(ISerializer& s) {"
      },
      {
        "file": "src/P2p/PeerListManager.cpp",
        "line": 30,
        "signature": "bool serialize(boost::multi_index_container<T, Indexes>& value, Common::StringView name, ISerializer& s) {"
      },
      {
        "file": "src/P2p/PeerListManager.cpp",
        "line": 40,
        "signature": "void serialize(NetworkAddress& na, ISerializer& s) {"
      },
      {
        "file": "src/P2p/PeerListManager.cpp",
        "line": 45,
        "signature": "void serialize(PeerlistEntry& pe, ISerializer& s) {"
      },
      {
        "file": "src/P2p/PeerListManager.h",
        "line": 95,
        "signature": "void serialize(ISerializer& s);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 41,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 46,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 55,
        "signature": "void serialize(CryptoNote::ISerializer& serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 59,
        "signature": "void serialize(CryptoNote::ISerializer& serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 69,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 74,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 84,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 89,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 97,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 104,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 112,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 125,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 138,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 145,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 156,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 163,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 177,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 184,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 194,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 209,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 217,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 224,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 235,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 242,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 252,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 258,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 268,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 273,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 283,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 291,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 301,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 311,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 322,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 329,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 338,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 351,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 358,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 369,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 375,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 385,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 393,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 404,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 424,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 433,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 440,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 449,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 462,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 469,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 479,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 486,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 496,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 504,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 520,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 528,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 545,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 552,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 560,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 567,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 577,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 582,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 592,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 597,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 607,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 614,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 625,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 633,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 646,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 653,
        "signature": "void serialize(CryptoNote::ISerializer &serializer);"
      },
      {
        "file": "src/Rpc/CoreRpcServerCommandsDefinitions.h",
        "line": 33,
        "signature": "void serialize(ISerializer &s) {}"
      },
      {
        "file": "src/Rpc/CoreRpcServerCommandsDefinitions.h",
        "line": 39,
        "signature": "void serialize(ISerializer &s) {"
      },
      {
        "file": "src/Rpc/CoreRpcServerCommandsDefinitions.h",
        "line": 51,
        "signature": "void serialize(ISerializer &s) {"
      },
      {
        "file": "src/Rpc/CoreRpcServerCommandsDefinitions.h",
        "line": 63,
        "signature": "void serialize(ISerializer &s) {"
      },
      {
        "file": "src/Rpc/CoreRpcServerCommandsDefinitions.h",
        "line": 74,
        "signature": "void serialize(ISerializer &s) {"
      },
      {
        "file": "src/Rpc/CoreRpcServerCommandsDefinitions.h",
        "line": 87,
        "signature": "void serialize(ISerializer &s) {"
      },
      {
        "file": "src/Rpc/CoreRpcServerCommandsDefinitions.h",
        "line": 97,
        "signature": "void serialize(ISerializer &s) {"
      },
      {
        "file": "src/Rpc/CoreRpcServerCommandsDefinitions.h",
        "line": 131,
        "signature": "void serialize(ISerializer &s) {"
      },
      {
        "file": "src/Rpc/CoreRpcServerCommandsDefinitions.h",
        "line": 143,
        "signature": "void serialize(ISerializer &s) {"
      },
      {
        "file": "src/Rpc/CoreRpcServerCommandsDefinitions.h",
        "line": 174,
        "signature": "void serialize(ISerializer &s) {"
      },
      {
        "file": "src/Rpc/CoreRpcServerCommandsDefinitions.h",
        "line": 186,
        "signature": "void serialize(ISerializer &s) {"
      },
      {
        "file": "src/Rpc/CoreRpcServerCommandsDefinitions.h",
        "line": 201,
        "signature": "void serialize(ISerializer &s) {"
      },
      {
        "file": "src/Rpc/CoreRpcServerCommandsDefinitions.h",
        "line": 210,
        "signature": "void serialize(ISerializer &s) {"
      },
      {
        "file": "src/Rpc/CoreRpcServerCommandsDefinitions.h",
        "line": 221,
        "signature": "void serialize(ISerializer &s) {"
      },
      {
        "file": "src/Rpc/CoreRpcServerCommandsDefinitions.h",
        "line": 238,
        "signature": "void serialize(ISerializer &s) {"
      },
      {
        "file": "src/Rpc/CoreRpcServerCommandsDefinitions.h",
        "line": 248,
        "signature": "void serialize(ISerializer &s) {"
      },
      {
        "file": "src/Rpc/CoreRpcServerCommandsDefinitions.h",
        "line": 270,
        "signature": "void serialize(ISerializer &s) {"
      },
      {
        "file": "src/Rpc/CoreRpcServerCommandsDefinitions.h",
        "line": 278,
        "signature": "void serialize(ISerializer &s) {"
      },
      {
        "file": "src/Rpc/CoreRpcServerCommandsDefinitions.h",
        "line": 289,
        "signature": "void serialize(ISerializer &s) {"
      },
      {
        "file": "src/Rpc/CoreRpcServerCommandsDefinitions.h",
        "line": 298,
        "signature": "void serialize(ISerializer &s) {"
      },
      {
        "file": "src/Rpc/CoreRpcServerCommandsDefinitions.h",
        "line": 330,
        "signature": "void serialize(ISerializer &s) {"
      },
      {
        "file": "src/Rpc/CoreRpcServerCommandsDefinitions.h",
        "line": 364,
        "signature": "void serialize(ISerializer &s) {"
      },
      {
        "file": "src/Rpc/CoreRpcServerCommandsDefinitions.h",
        "line": 391,
        "signature": "void serialize(ISerializer &s) {"
      },
      {
        "file": "src/Rpc/CoreRpcServerCommandsDefinitions.h",
        "line": 405,
        "signature": "void serialize(ISerializer &s) {"
      },
      {
        "file": "src/Rpc/CoreRpcServerCommandsDefinitions.h",
        "line": 422,
        "signature": "void serialize(ISerializer &s) {"
      },
      {
        "file": "src/Rpc/CoreRpcServerCommandsDefinitions.h",
        "line": 435,
        "signature": "void serialize(ISerializer &s) {"
      },
      {
        "file": "src/Rpc/CoreRpcServerCommandsDefinitions.h",
        "line": 451,
        "signature": "void serialize(ISerializer &s) {"
      },
      {
        "file": "src/Rpc/CoreRpcServerCommandsDefinitions.h",
        "line": 476,
        "signature": "void serialize(ISerializer &s) {"
      },
      {
        "file": "src/Rpc/CoreRpcServerCommandsDefinitions.h",
        "line": 496,
        "signature": "void serialize(ISerializer &s) {"
      },
      {
        "file": "src/Rpc/CoreRpcServerCommandsDefinitions.h",
        "line": 509,
        "signature": "void serialize(ISerializer &s) {"
      },
      {
        "file": "src/Rpc/CoreRpcServerCommandsDefinitions.h",
        "line": 525,
        "signature": "void serialize(ISerializer &s) {"
      },
      {
        "file": "src/Rpc/CoreRpcServerCommandsDefinitions.h",
        "line": 543,
        "signature": "void serialize(ISerializer &s) {"
      },
      {
        "file": "src/Rpc/CoreRpcServerCommandsDefinitions.h",
        "line": 576,
        "signature": "void serialize(ISerializer &s) {"
      },
      {
        "file": "src/Rpc/CoreRpcServerCommandsDefinitions.h",
        "line": 604,
        "signature": "void serialize(ISerializer &s) {"
      },
      {
        "file": "src/Rpc/CoreRpcServerCommandsDefinitions.h",
        "line": 635,
        "signature": "void serialize(ISerializer &s) {"
      },
      {
        "file": "src/Rpc/CoreRpcServerCommandsDefinitions.h",
        "line": 675,
        "signature": "void serialize(ISerializer &s) {"
      },
      {
        "file": "src/Rpc/CoreRpcServerCommandsDefinitions.h",
        "line": 687,
        "signature": "void serialize(ISerializer &s) {"
      },
      {
        "file": "src/Rpc/CoreRpcServerCommandsDefinitions.h",
        "line": 701,
        "signature": "void serialize(ISerializer &s) {"
      },
      {
        "file": "src/Rpc/CoreRpcServerCommandsDefinitions.h",
        "line": 710,
        "signature": "void serialize(ISerializer &s) {"
      },
      {
        "file": "src/Rpc/CoreRpcServerCommandsDefinitions.h",
        "line": 721,
        "signature": "void serialize(ISerializer &s) {"
      },
      {
        "file": "src/Rpc/CoreRpcServerCommandsDefinitions.h",
        "line": 730,
        "signature": "void serialize(ISerializer &s) {"
      },
      {
        "file": "src/Rpc/CoreRpcServerCommandsDefinitions.h",
        "line": 741,
        "signature": "void serialize(ISerializer &s) {"
      },
      {
        "file": "src/Rpc/CoreRpcServerCommandsDefinitions.h",
        "line": 752,
        "signature": "void serialize(ISerializer &s) {"
      },
      {
        "file": "src/Rpc/CoreRpcServerCommandsDefinitions.h",
        "line": 768,
        "signature": "void serialize(ISerializer &s) {"
      },
      {
        "file": "src/Rpc/CoreRpcServerCommandsDefinitions.h",
        "line": 783,
        "signature": "void serialize(ISerializer &s) {"
      },
      {
        "file": "src/Rpc/CoreRpcServerCommandsDefinitions.h",
        "line": 799,
        "signature": "void serialize(ISerializer &s) {"
      },
      {
        "file": "src/Rpc/CoreRpcServerCommandsDefinitions.h",
        "line": 812,
        "signature": "void serialize(ISerializer &s) {"
      },
      {
        "file": "src/Rpc/CoreRpcServerCommandsDefinitions.h",
        "line": 827,
        "signature": "void serialize(ISerializer &s) {"
      },
      {
        "file": "src/Rpc/CoreRpcServerCommandsDefinitions.h",
        "line": 840,
        "signature": "void serialize(ISerializer &s) {"
      },
      {
        "file": "src/Rpc/CoreRpcServerCommandsDefinitions.h",
        "line": 856,
        "signature": "void serialize(ISerializer &s) {"
      },
      {
        "file": "src/Rpc/CoreRpcServerCommandsDefinitions.h",
        "line": 886,
        "signature": "void serialize(ISerializer &s) {"
      },
      {
        "file": "src/Rpc/CoreRpcServerCommandsDefinitions.h",
        "line": 898,
        "signature": "void serialize(ISerializer &s) {"
      },
      {
        "file": "src/Rpc/CoreRpcServerCommandsDefinitions.h",
        "line": 912,
        "signature": "void serialize(ISerializer &s) {"
      },
      {
        "file": "src/Rpc/CoreRpcServerCommandsDefinitions.h",
        "line": 928,
        "signature": "void serialize(ISerializer &s) {"
      },
      {
        "file": "src/Rpc/CoreRpcServerCommandsDefinitions.h",
        "line": 940,
        "signature": "void serialize(ISerializer &s) {"
      },
      {
        "file": "src/Rpc/JsonRpc.h",
        "line": 55,
        "signature": "void serialize(ISerializer& s) {"
      },
      {
        "file": "src/Serialization/ISerializer.h",
        "line": 65,
        "signature": "return serialize(value, name, *this);"
      },
      {
        "file": "src/Serialization/ISerializer.h",
        "line": 69,
        "signature": "bool serialize(T& value, Common::StringView name, ISerializer& serializer) {"
      },
      {
        "file": "src/Serialization/ISerializer.h",
        "line": 80,
        "signature": "void serialize(T& value, ISerializer& serializer) {"
      },
      {
        "file": "src/Transfers/TransfersContainer.cpp",
        "line": 32,
        "signature": "void serialize(TransactionInformation& ti, CryptoNote::ISerializer& s) {"
      },
      {
        "file": "src/Transfers/TransfersContainer.h",
        "line": 61,
        "signature": "void serialize(ISerializer& s) {"
      },
      {
        "file": "src/Transfers/TransfersContainer.h",
        "line": 120,
        "signature": "void serialize(CryptoNote::ISerializer& s) {"
      },
      {
        "file": "src/Transfers/TransfersContainer.h",
        "line": 148,
        "signature": "void serialize(ISerializer& s) {"
      },
      {
        "file": "src/Transfers/TransfersContainer.h",
        "line": 164,
        "signature": "void serialize(ISerializer& s) {"
      },
      {
        "file": "src/Transfers/TransfersContainer.h",
        "line": 178,
        "signature": "void serialize(ISerializer& s) {"
      },
      {
        "file": "src/Wallet/LegacyKeysImporter.cpp",
        "line": 43,
        "signature": "void serialize(CryptoNote::ISerializer& s) {"
      },
      {
        "file": "src/Wallet/WalletRpcServerCommandsDefinitions.h",
        "line": 46,
        "signature": "void serialize(ISerializer& s) {"
      },
      {
        "file": "src/Wallet/WalletRpcServerCommandsDefinitions.h",
        "line": 61,
        "signature": "void serialize(ISerializer& s) {"
      },
      {
        "file": "src/Wallet/WalletRpcServerCommandsDefinitions.h",
        "line": 72,
        "signature": "void serialize(ISerializer& s) {"
      },
      {
        "file": "src/Wallet/WalletRpcServerCommandsDefinitions.h",
        "line": 90,
        "signature": "void serialize(ISerializer& s) {"
      },
      {
        "file": "src/Wallet/WalletRpcServerCommandsDefinitions.h",
        "line": 106,
        "signature": "void serialize(ISerializer& s) {"
      },
      {
        "file": "src/Wallet/WalletRpcServerCommandsDefinitions.h",
        "line": 126,
        "signature": "void serialize(ISerializer& s) {"
      },
      {
        "file": "src/Wallet/WalletRpcServerCommandsDefinitions.h",
        "line": 142,
        "signature": "void serialize(ISerializer& s) {"
      },
      {
        "file": "src/Wallet/WalletRpcServerCommandsDefinitions.h",
        "line": 165,
        "signature": "void serialize(ISerializer& s) {"
      },
      {
        "file": "src/Wallet/WalletRpcServerCommandsDefinitions.h",
        "line": 175,
        "signature": "void serialize(ISerializer& s) {"
      },
      {
        "file": "src/Wallet/WalletRpcServerCommandsDefinitions.h",
        "line": 189,
        "signature": "void serialize(ISerializer& s) {"
      },
      {
        "file": "src/Wallet/WalletRpcServerCommandsDefinitions.h",
        "line": 203,
        "signature": "void serialize(ISerializer& s) {"
      },
      {
        "file": "src/Wallet/WalletRpcServerCommandsDefinitions.h",
        "line": 212,
        "signature": "void serialize(ISerializer& s) {"
      },
      {
        "file": "src/Wallet/WalletRpcServerCommandsDefinitions.h",
        "line": 229,
        "signature": "void serialize(ISerializer& s) {"
      },
      {
        "file": "src/Wallet/WalletRpcServerCommandsDefinitions.h",
        "line": 248,
        "signature": "void serialize(ISerializer& s) {"
      },
      {
        "file": "src/Wallet/WalletRpcServerCommandsDefinitions.h",
        "line": 260,
        "signature": "void serialize(ISerializer& s) {"
      },
      {
        "file": "src/Wallet/WalletRpcServerCommandsDefinitions.h",
        "line": 274,
        "signature": "void serialize(ISerializer& s) {"
      },
      {
        "file": "src/Wallet/WalletRpcServerCommandsDefinitions.h",
        "line": 289,
        "signature": "void serialize(ISerializer& s) {"
      },
      {
        "file": "src/Wallet/WalletRpcServerCommandsDefinitions.h",
        "line": 312,
        "signature": "void serialize(ISerializer& s) {"
      },
      {
        "file": "src/Wallet/WalletSerializationV1.cpp",
        "line": 117,
        "signature": "void serialize(WalletRecordDto& value, CryptoNote::ISerializer& serializer) {"
      },
      {
        "file": "src/Wallet/WalletSerializationV1.cpp",
        "line": 125,
        "signature": "void serialize(ObsoleteSpentOutputDto& value, CryptoNote::ISerializer& serializer) {"
      },
      {
        "file": "src/Wallet/WalletSerializationV1.cpp",
        "line": 133,
        "signature": "void serialize(ObsoleteChangeDto& value, CryptoNote::ISerializer& serializer) {"
      },
      {
        "file": "src/Wallet/WalletSerializationV1.cpp",
        "line": 138,
        "signature": "void serialize(UnlockTransactionJobDto& value, CryptoNote::ISerializer& serializer) {"
      },
      {
        "file": "src/Wallet/WalletSerializationV1.cpp",
        "line": 144,
        "signature": "void serialize(WalletTransactionDto& value, CryptoNote::ISerializer& serializer) {"
      },
      {
        "file": "src/Wallet/WalletSerializationV1.cpp",
        "line": 161,
        "signature": "void serialize(WalletTransferDto& value, CryptoNote::ISerializer& serializer) {"
      },
      {
        "file": "src/Wallet/WalletSerializationV2.cpp",
        "line": 118,
        "signature": "void serialize(UnlockTransactionJobDtoV2& value, CryptoNote::ISerializer& serializer) {"
      },
      {
        "file": "src/Wallet/WalletSerializationV2.cpp",
        "line": 124,
        "signature": "void serialize(WalletTransactionDtoV2& value, CryptoNote::ISerializer& serializer) {"
      },
      {
        "file": "src/Wallet/WalletSerializationV2.cpp",
        "line": 144,
        "signature": "void serialize(WalletTransferDtoV2& value, CryptoNote::ISerializer& serializer) {"
      },
      {
        "file": "src/Wallet/WalletSerializationV2.cpp",
        "line": 150,
        "signature": "void serialize(WalletDepositDtoV2& value, CryptoNote::ISerializer& serializer) {"
      },
      {
        "file": "src/WalletLegacy/KeysStorage.h",
        "line": 38,
        "signature": "void serialize(ISerializer& serializer, const std::string& name);"
      },
      {
        "file": "src/WalletLegacy/WalletLegacySerialization.cpp",
        "line": 30,
        "signature": "void serialize(UnconfirmedTransferDetails& utd, CryptoNote::ISerializer& serializer) {"
      },
      {
        "file": "src/WalletLegacy/WalletLegacySerialization.cpp",
        "line": 42,
        "signature": "void serialize(UnconfirmedSpentDepositDetails& details, ISerializer& serializer) {"
      },
      {
        "file": "src/WalletLegacy/WalletLegacySerialization.cpp",
        "line": 51,
        "signature": "void serialize(WalletLegacyTransaction& txi, CryptoNote::ISerializer& serializer) {"
      },
      {
        "file": "src/WalletLegacy/WalletLegacySerialization.cpp",
        "line": 92,
        "signature": "void serialize(WalletLegacyTransfer& tr, CryptoNote::ISerializer& serializer) {"
      },
      {
        "file": "src/WalletLegacy/WalletLegacySerialization.cpp",
        "line": 97,
        "signature": "void serialize(Deposit& deposit, CryptoNote::ISerializer& serializer) {"
      },
      {
        "file": "src/WalletLegacy/WalletLegacySerialization.cpp",
        "line": 112,
        "signature": "void serialize(DepositInfo& depositInfo, CryptoNote::ISerializer& serializer) {"
      },
      {
        "file": "src/WalletLegacy/WalletLegacySerialization.h",
        "line": 35,
        "signature": "void serialize(UnconfirmedTransferDetails& utd, ISerializer& serializer);"
      },
      {
        "file": "src/WalletLegacy/WalletLegacySerialization.h",
        "line": 36,
        "signature": "void serialize(UnconfirmedSpentDepositDetails& details, ISerializer& serializer);"
      },
      {
        "file": "src/WalletLegacy/WalletLegacySerialization.h",
        "line": 37,
        "signature": "void serialize(WalletLegacyTransaction& txi, ISerializer& serializer);"
      },
      {
        "file": "src/WalletLegacy/WalletLegacySerialization.h",
        "line": 38,
        "signature": "void serialize(WalletLegacyTransfer& tr, ISerializer& serializer);"
      },
      {
        "file": "src/WalletLegacy/WalletLegacySerialization.h",
        "line": 39,
        "signature": "void serialize(DepositInfo& depositInfo, ISerializer& serializer);"
      },
      {
        "file": "src/WalletLegacy/WalletLegacySerialization.h",
        "line": 40,
        "signature": "void serialize(Deposit& deposit, ISerializer& serializer);"
      },
      {
        "file": "src/WalletLegacy/WalletLegacySerializer.h",
        "line": 40,
        "signature": "void serialize(std::ostream& stream, const std::string& password, bool saveDetailed, const std::string& cache);"
      },
      {
        "file": "src/WalletLegacy/WalletUnconfirmedTransactions.h",
        "line": 77,
        "signature": "bool serialize(CryptoNote::ISerializer& s);"
      },
      {
        "file": "src/WalletLegacy/WalletUserTransactionsCache.cpp",
        "line": 47,
        "signature": "void serialize(LegacyDeposit& deposit, ISerializer& serializer) {"
      },
      {
        "file": "src/WalletLegacy/WalletUserTransactionsCache.cpp",
        "line": 60,
        "signature": "void serialize(LegacyDepositInfo& depositInfo, ISerializer& serializer) {"
      },
      {
        "file": "src/WalletLegacy/WalletUserTransactionsCache.h",
        "line": 58,
        "signature": "bool serialize(CryptoNote::ISerializer& serializer);"
      }
    ],
    "setNull": [
      {
        "file": "src/CryptoNoteCore/Account.h",
        "line": 50,
        "signature": "void setNull();"
      }
    ],
    "serializeMap": [
      {
        "file": "src/CryptoNoteCore/Blockchain.cpp",
        "line": 78,
        "signature": "return serializeMap(value, name, serializer, [&value](size_t size) { value.resize(size); });"
      },
      {
        "file": "src/Serialization/SerializationOverloads.h",
        "line": 257,
        "signature": "return serializeMap(value, name, serializer, [&value](size_t size) { value.reserve(size); });"
      },
      {
        "file": "src/Serialization/SerializationOverloads.h",
        "line": 263,
        "signature": "return serializeMap(value, name, serializer, [](size_t size) {});"
      },
      {
        "file": "src/Serialization/SerializationOverloads.h",
        "line": 269,
        "signature": "return serializeMap(value, name, serializer, [](size_t size) {});"
      },
      {
        "file": "src/Serialization/SerializationOverloads.h",
        "line": 275,
        "signature": "return serializeMap(value, name, serializer, [&value](size_t size) { value.reserve(size); });"
      },
      {
        "file": "src/Serialization/SerializationOverloads.h",
        "line": 281,
        "signature": "return serializeMap(value, name, serializer, [](size_t size) {});"
      },
      {
        "file": "src/Serialization/SerializationOverloads.h",
        "line": 287,
        "signature": "return serializeMap(value, name, serializer, [](size_t size) {});"
      }
    ],
    "load": [
      {
        "file": "src/CryptoNoteCore/Blockchain.cpp",
        "line": 141,
        "signature": "void load(const std::string& filename) {"
      },
      {
        "file": "src/Wallet/WalletSerializationV1.h",
        "line": 58,
        "signature": "void load(const Crypto::chacha8_key &key, Common::IInputStream &source);"
      },
      {
        "file": "src/Wallet/WalletSerializationV2.h",
        "line": 50,
        "signature": "void load(Common::IInputStream& source, uint8_t version);"
      }
    ],
    "stream": [
      {
        "file": "src/CryptoNoteCore/Blockchain.cpp",
        "line": 148,
        "signature": "StdInputStream stream(stdStream);"
      },
      {
        "file": "src/CryptoNoteCore/Blockchain.cpp",
        "line": 163,
        "signature": "StdOutputStream stream(file);"
      },
      {
        "file": "src/P2p/NetNode.cpp",
        "line": 682,
        "signature": "StdOutputStream stream(p2p_data);"
      },
      {
        "file": "src/P2p/P2pNode.cpp",
        "line": 189,
        "signature": "StdOutputStream stream(os);"
      },
      {
        "file": "src/P2p/P2pNode.cpp",
        "line": 195,
        "signature": "StdInputStream stream(in);"
      },
      {
        "file": "src/Transfers/SynchronizationState.cpp",
        "line": 111,
        "signature": "StdOutputStream stream(os);"
      },
      {
        "file": "src/Transfers/SynchronizationState.cpp",
        "line": 117,
        "signature": "StdInputStream stream(in);"
      },
      {
        "file": "src/Transfers/TransfersContainer.cpp",
        "line": 868,
        "signature": "StdOutputStream stream(os);"
      },
      {
        "file": "src/Transfers/TransfersContainer.cpp",
        "line": 883,
        "signature": "StdInputStream stream(in);"
      },
      {
        "file": "src/Transfers/TransfersSynchronizer.cpp",
        "line": 164,
        "signature": "StdOutputStream stream(os);"
      },
      {
        "file": "src/Wallet/WalletGreen.cpp",
        "line": 1114,
        "signature": "StdInputStream stream(walletFileStream);"
      }
    ],
    "s": [
      {
        "file": "src/CryptoNoteCore/Blockchain.cpp",
        "line": 149,
        "signature": "BinaryInputStreamSerializer s(stream);"
      },
      {
        "file": "src/CryptoNoteCore/Blockchain.cpp",
        "line": 164,
        "signature": "BinaryOutputStreamSerializer s(stream);"
      },
      {
        "file": "src/Serialization/SerializationTools.h",
        "line": 74,
        "signature": "JsonInputValueSerializer s(js);"
      },
      {
        "file": "src/Serialization/SerializationTools.h",
        "line": 126,
        "signature": "KVBinaryInputStreamSerializer s(stream);"
      },
      {
        "file": "src/Wallet/WalletSerializationV1.cpp",
        "line": 354,
        "signature": "BinaryOutputStreamSerializer s(destination);"
      },
      {
        "file": "src/Wallet/WalletSerializationV1.cpp",
        "line": 359,
        "signature": "BinaryOutputStreamSerializer s(destination);"
      }
    ],
    "save": [
      {
        "file": "src/CryptoNoteCore/Blockchain.cpp",
        "line": 156,
        "signature": "bool save(const std::string& filename) {"
      },
      {
        "file": "src/Daemon/DaemonCommandsHandler.h",
        "line": 80,
        "signature": "bool save(const std::vector<std::string> &args);"
      },
      {
        "file": "src/SimpleWallet/SimpleWallet.h",
        "line": 105,
        "signature": "bool save(const std::vector<std::string> &args);"
      },
      {
        "file": "src/Wallet/WalletSerializationV1.h",
        "line": 57,
        "signature": "void save(const std::string &password, Common::IOutputStream &destination, bool saveDetails, bool saveCache);"
      },
      {
        "file": "src/Wallet/WalletSerializationV2.h",
        "line": 51,
        "signature": "void save(Common::IOutputStream& destination, WalletSaveLevel saveLevel);"
      }
    ],
    "getTailId": [
      {
        "file": "src/CryptoNoteCore/Blockchain.cpp",
        "line": 724,
        "signature": "return getTailId();"
      }
    ],
    "doBuildSparseChain": [
      {
        "file": "src/CryptoNoteCore/Blockchain.cpp",
        "line": 741,
        "signature": "return doBuildSparseChain(startBlockId);"
      }
    ],
    "checkTransactionInputs": [
      {
        "file": "src/CryptoNoteCore/Blockchain.cpp",
        "line": 1763,
        "signature": "return checkTransactionInputs(tx, tx_prefix_hash, pmax_used_block_height);"
      },
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 116,
        "signature": "bool checkTransactionInputs(const Transaction& tx, uint32_t& pmax_used_block_height, Crypto::Hash& max_used_block_id, BlockInfo* tail = 0);"
      },
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 326,
        "signature": "bool checkTransactionInputs(const Transaction& tx, const Crypto::Hash& tx_prefix_hash, uint32_t* pmax_used_block_height = NULL);"
      },
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 327,
        "signature": "bool checkTransactionInputs(const Transaction& tx, uint32_t* pmax_used_block_height = NULL);"
      }
    ],
    "handle_output": [
      {
        "file": "src/CryptoNoteCore/Blockchain.cpp",
        "line": 1854,
        "signature": "bool handle_output(const Transaction& tx, const TransactionOutput& out, size_t transactionOutputIndex) {"
      }
    ],
    "time": [
      {
        "file": "src/CryptoNoteCore/Blockchain.cpp",
        "line": 1911,
        "signature": "return time(NULL);"
      },
      {
        "file": "src/CryptoNoteCore/ITimeProvider.h",
        "line": 31,
        "signature": "return time(nullptr);"
      }
    ],
    "addObserver": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 61,
        "signature": "bool addObserver(IBlockchainStorageObserver* observer);"
      },
      {
        "file": "src/CryptoNoteCore/TransactionPool.h",
        "line": 93,
        "signature": "bool addObserver(ITxPoolObserver* observer);"
      },
      {
        "file": "src/NodeRpcProxy/NodeRpcProxy.h",
        "line": 54,
        "signature": "virtual bool addObserver(CryptoNote::INodeRpcProxyObserver* observer);"
      }
    ],
    "removeObserver": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 62,
        "signature": "bool removeObserver(IBlockchainStorageObserver* observer);"
      },
      {
        "file": "src/CryptoNoteCore/TransactionPool.h",
        "line": 94,
        "signature": "bool removeObserver(ITxPoolObserver* observer);"
      },
      {
        "file": "src/NodeRpcProxy/NodeRpcProxy.h",
        "line": 55,
        "signature": "virtual bool removeObserver(CryptoNote::INodeRpcProxyObserver* observer);"
      },
      {
        "file": "src/WalletLegacy/WalletHelper.h",
        "line": 59,
        "signature": "void removeObserver();"
      }
    ],
    "rebuildCache": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 63,
        "signature": "void rebuildCache();"
      }
    ],
    "storeCache": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 64,
        "signature": "bool storeCache();"
      }
    ],
    "init": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 72,
        "signature": "bool init() { return init(Tools::getDefaultDataDirectory(), true); }"
      },
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 73,
        "signature": "bool init(const std::string& config_folder, bool load_existing);"
      },
      {
        "file": "src/CryptoNoteCore/Core.h",
        "line": 67,
        "signature": "bool init(const CoreConfig& config, const MinerConfig& minerConfig, bool load_existing);"
      },
      {
        "file": "src/CryptoNoteCore/CoreConfig.h",
        "line": 31,
        "signature": "void init(const boost::program_options::variables_map& options);"
      },
      {
        "file": "src/CryptoNoteCore/Currency.h",
        "line": 229,
        "signature": "bool init();"
      },
      {
        "file": "src/CryptoNoteCore/Miner.h",
        "line": 41,
        "signature": "bool init(const MinerConfig& config);"
      },
      {
        "file": "src/CryptoNoteCore/MinerConfig.h",
        "line": 32,
        "signature": "void init(const boost::program_options::variables_map& options);"
      },
      {
        "file": "src/CryptoNoteCore/TransactionPool.h",
        "line": 97,
        "signature": "bool init(const std::string& config_folder);"
      },
      {
        "file": "src/CryptoNoteCore/UpgradeDetector.h",
        "line": 52,
        "signature": "bool init() {"
      },
      {
        "file": "src/Logging/FileLogger.h",
        "line": 28,
        "signature": "void init(const std::string& filename);"
      },
      {
        "file": "src/P2p/NetNode.h",
        "line": 125,
        "signature": "bool init(const NetNodeConfig& config);"
      },
      {
        "file": "src/P2p/NetNodeConfig.h",
        "line": 33,
        "signature": "bool init(const boost::program_options::variables_map& vm);"
      },
      {
        "file": "src/P2p/PeerListManager.h",
        "line": 76,
        "signature": "bool init(bool allow_local_ip);"
      },
      {
        "file": "src/PaymentGate/WalletService.h",
        "line": 62,
        "signature": "void init();"
      },
      {
        "file": "src/PaymentGateService/ConfigurationManager.h",
        "line": 30,
        "signature": "bool init(int argc, char** argv);"
      },
      {
        "file": "src/PaymentGateService/PaymentGateService.h",
        "line": 36,
        "signature": "bool init(int argc, char** argv);"
      },
      {
        "file": "src/PaymentGateService/PaymentServiceConfiguration.h",
        "line": 36,
        "signature": "void init(const boost::program_options::variables_map& options);"
      },
      {
        "file": "src/PaymentGateService/RpcNodeConfiguration.h",
        "line": 30,
        "signature": "void init(const boost::program_options::variables_map& options);"
      },
      {
        "file": "src/Rpc/RpcServerConfig.h",
        "line": 30,
        "signature": "void init(const boost::program_options::variables_map& options);"
      },
      {
        "file": "src/SimpleWallet/SimpleWallet.h",
        "line": 52,
        "signature": "bool init(const boost::program_options::variables_map& vm);"
      },
      {
        "file": "src/Wallet/PoolRpcServer.h",
        "line": 49,
        "signature": "bool init(const boost::program_options::variables_map& vm);"
      },
      {
        "file": "src/Wallet/WalletRpcServer.h",
        "line": 49,
        "signature": "bool init(const boost::program_options::variables_map& vm);"
      }
    ],
    "deinit": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 74,
        "signature": "bool deinit();"
      },
      {
        "file": "src/CryptoNoteCore/Core.h",
        "line": 69,
        "signature": "bool deinit();"
      },
      {
        "file": "src/CryptoNoteCore/TransactionPool.h",
        "line": 98,
        "signature": "bool deinit();"
      },
      {
        "file": "src/P2p/NetNode.h",
        "line": 126,
        "signature": "bool deinit();"
      },
      {
        "file": "src/SimpleWallet/SimpleWallet.h",
        "line": 53,
        "signature": "bool deinit();"
      }
    ],
    "getLowerBound": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 76,
        "signature": "bool getLowerBound(uint64_t timestamp, uint64_t startOffset, uint32_t& height);"
      }
    ],
    "setCheckpoints": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 79,
        "signature": "void setCheckpoints(Checkpoints&& chk_pts) { m_checkpoints = chk_pts; }"
      }
    ],
    "getBlocks": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 80,
        "signature": "bool getBlocks(uint32_t start_offset, uint32_t count, std::list<Block>& blocks, std::list<Transaction>& txs);"
      },
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 81,
        "signature": "bool getBlocks(uint32_t start_offset, uint32_t count, std::list<Block>& blocks);"
      },
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 142,
        "signature": "bool getBlocks(const t_ids_container& block_ids, t_blocks_container& blocks, t_missed_container& missed_bs) {"
      }
    ],
    "getAlternativeBlocks": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 82,
        "signature": "bool getAlternativeBlocks(std::list<Block>& blocks);"
      }
    ],
    "getAlternativeBlocksCount": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 83,
        "signature": "uint32_t getAlternativeBlocksCount();"
      }
    ],
    "getBlockByHash": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 85,
        "signature": "bool getBlockByHash(const Crypto::Hash &h, Block &blk);"
      }
    ],
    "getBlockHeight": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 86,
        "signature": "bool getBlockHeight(const Crypto::Hash& blockId, uint32_t& blockHeight);"
      }
    ],
    "haveTransaction": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 91,
        "signature": "bool haveTransaction(const Crypto::Hash &id);"
      }
    ],
    "haveTransactionKeyImagesAsSpent": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 92,
        "signature": "bool haveTransactionKeyImagesAsSpent(const Transaction &tx);"
      }
    ],
    "getCurrentBlockchainHeight": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 94,
        "signature": "uint32_t getCurrentBlockchainHeight(); //TODO rename to getCurrentBlockchainSize"
      }
    ],
    "getDifficultyForNextBlock": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 97,
        "signature": "difficulty_type getDifficultyForNextBlock();"
      }
    ],
    "getBlockTimestamp": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 98,
        "signature": "uint64_t getBlockTimestamp(uint32_t height);"
      }
    ],
    "getCoinsInCirculation": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 99,
        "signature": "uint64_t getCoinsInCirculation();"
      }
    ],
    "addNewBlock": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 102,
        "signature": "bool addNewBlock(const Block& bl_, block_verification_context& bvc);"
      }
    ],
    "resetAndSetGenesisBlock": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 103,
        "signature": "bool resetAndSetGenesisBlock(const Block& b);"
      }
    ],
    "haveBlock": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 104,
        "signature": "bool haveBlock(const Crypto::Hash& id);"
      }
    ],
    "getTotalTransactions": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 105,
        "signature": "size_t getTotalTransactions();"
      }
    ],
    "findBlockchainSupplement": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 108,
        "signature": "uint32_t findBlockchainSupplement(const std::vector<Crypto::Hash>& qblock_ids); // !!!!"
      }
    ],
    "handleGetObjects": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 111,
        "signature": "bool handleGetObjects(NOTIFY_REQUEST_GET_OBJECTS_request& arg, NOTIFY_RESPONSE_GET_OBJECTS_request& rsp); //Deprecated. Should be removed with CryptoNoteProtocolHandler."
      }
    ],
    "getRandomOutsByAmount": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 112,
        "signature": "bool getRandomOutsByAmount(const COMMAND_RPC_GET_RANDOM_OUTPUTS_FOR_AMOUNTS_request& req, COMMAND_RPC_GET_RANDOM_OUTPUTS_FOR_AMOUNTS_response& res);"
      }
    ],
    "getBackwardBlocksSize": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 113,
        "signature": "bool getBackwardBlocksSize(size_t from_height, std::vector<size_t>& sz, size_t count);"
      }
    ],
    "getTransactionOutputGlobalIndexes": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 114,
        "signature": "bool getTransactionOutputGlobalIndexes(const Crypto::Hash& tx_id, std::vector<uint32_t>& indexs);"
      }
    ],
    "get_out_by_msig_gindex": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 115,
        "signature": "bool get_out_by_msig_gindex(uint64_t amount, uint64_t gindex, MultisignatureOutput& out);"
      }
    ],
    "getCurrentCumulativeBlocksizeLimit": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 117,
        "signature": "uint64_t getCurrentCumulativeBlocksizeLimit();"
      }
    ],
    "blockDifficulty": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 118,
        "signature": "uint64_t blockDifficulty(size_t i);"
      }
    ],
    "getBlockContainingTransaction": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 119,
        "signature": "bool getBlockContainingTransaction(const Crypto::Hash& txId, Crypto::Hash& blockId, uint32_t& blockHeight);"
      }
    ],
    "getAlreadyGeneratedCoins": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 120,
        "signature": "bool getAlreadyGeneratedCoins(const Crypto::Hash& hash, uint64_t& generatedCoins);"
      }
    ],
    "getBlockSize": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 121,
        "signature": "bool getBlockSize(const Crypto::Hash& hash, size_t& size);"
      }
    ],
    "getMultisigOutputReference": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 122,
        "signature": "bool getMultisigOutputReference(const MultisignatureInput& txInMultisig, std::pair<Crypto::Hash, size_t>& outputReference);"
      }
    ],
    "getGeneratedTransactionsNumber": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 123,
        "signature": "bool getGeneratedTransactionsNumber(uint32_t height, uint64_t& generatedTransactions);"
      }
    ],
    "getOrphanBlockIdsByHeight": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 124,
        "signature": "bool getOrphanBlockIdsByHeight(uint32_t height, std::vector<Crypto::Hash>& blockHashes);"
      }
    ],
    "getBlockIdsByTimestamp": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 125,
        "signature": "bool getBlockIdsByTimestamp(uint64_t timestampBegin, uint64_t timestampEnd, uint32_t blocksNumberLimit, std::vector<Crypto::Hash>& hashes, uint32_t& blocksNumberWithinTimestamps);"
      }
    ],
    "getTransactionIdsByPaymentId": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 126,
        "signature": "bool getTransactionIdsByPaymentId(const Crypto::Hash& paymentId, std::vector<Crypto::Hash>& transactionHashes);"
      },
      {
        "file": "src/CryptoNoteCore/TransactionPool.h",
        "line": 121,
        "signature": "bool getTransactionIdsByPaymentId(const Crypto::Hash& paymentId, std::vector<Crypto::Hash>& transactionIds);"
      }
    ],
    "isBlockInMainChain": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 127,
        "signature": "bool isBlockInMainChain(const Crypto::Hash& blockId);"
      }
    ],
    "coinsEmittedAtHeight": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 131,
        "signature": "uint64_t coinsEmittedAtHeight(uint64_t height);"
      },
      {
        "file": "src/CryptoNoteCore/Core.h",
        "line": 127,
        "signature": "uint64_t coinsEmittedAtHeight(uint64_t height);"
      }
    ],
    "difficultyAtHeight": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 132,
        "signature": "uint64_t difficultyAtHeight(uint64_t height);"
      },
      {
        "file": "src/CryptoNoteCore/Core.h",
        "line": 128,
        "signature": "uint64_t difficultyAtHeight(uint64_t height);"
      }
    ],
    "isInCheckpointZone": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 133,
        "signature": "bool isInCheckpointZone(const uint32_t height);"
      }
    ],
    "scanOutputKeysForIndexes": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 136,
        "signature": "bool scanOutputKeysForIndexes(const KeyInput &tx_in_to_key, visitor_t &vis, uint32_t *pmax_related_block_height = NULL);"
      }
    ],
    "addMessageQueue": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 138,
        "signature": "bool addMessageQueue(MessageQueue<BlockchainMessage>& messageQueue);"
      }
    ],
    "removeMessageQueue": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 139,
        "signature": "bool removeMessageQueue(MessageQueue<BlockchainMessage>& messageQueue);"
      }
    ],
    "getBlockchainTransactions": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 160,
        "signature": "void getBlockchainTransactions(const t_ids_container& txs_ids, t_tx_container& txs, t_missed_container& missed_txs) {"
      }
    ],
    "print_blockchain": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 190,
        "signature": "void print_blockchain(uint64_t start_index, uint64_t end_index);"
      },
      {
        "file": "src/CryptoNoteCore/Core.h",
        "line": 149,
        "signature": "void print_blockchain(uint32_t start_index, uint32_t end_index);"
      }
    ],
    "print_blockchain_index": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 191,
        "signature": "void print_blockchain_index();"
      },
      {
        "file": "src/CryptoNoteCore/Core.h",
        "line": 150,
        "signature": "void print_blockchain_index();"
      }
    ],
    "print_blockchain_outs": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 192,
        "signature": "void print_blockchain_outs(const std::string& file);"
      },
      {
        "file": "src/CryptoNoteCore/Core.h",
        "line": 153,
        "signature": "void print_blockchain_outs(const std::string &file);"
      }
    ],
    "rollbackBlockchainTo": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 204,
        "signature": "bool rollbackBlockchainTo(uint32_t height);"
      }
    ],
    "have_tx_keyimg_as_spent": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 205,
        "signature": "bool have_tx_keyimg_as_spent(const Crypto::KeyImage &key_im);"
      }
    ],
    "switch_to_alternative_blockchain": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 304,
        "signature": "bool switch_to_alternative_blockchain(std::list<blocks_ext_by_hash::iterator> &alt_chain, bool discard_disconnected_chain);"
      }
    ],
    "handle_alternative_block": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 305,
        "signature": "bool handle_alternative_block(const Block &b, const Crypto::Hash &id, block_verification_context &bvc, bool sendNewAlternativeBlockMessage = true);"
      }
    ],
    "get_next_difficulty_for_alternative_chain": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 306,
        "signature": "difficulty_type get_next_difficulty_for_alternative_chain(const std::list<blocks_ext_by_hash::iterator> &alt_chain, BlockEntry &bei);"
      }
    ],
    "pushToDepositIndex": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 307,
        "signature": "void pushToDepositIndex(const BlockEntry &block, uint64_t interest);"
      }
    ],
    "prevalidate_miner_transaction": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 308,
        "signature": "bool prevalidate_miner_transaction(const Block &b, uint32_t height);"
      }
    ],
    "validate_miner_transaction": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 309,
        "signature": "bool validate_miner_transaction(const Block &b, uint32_t height, size_t cumulativeBlockSize, uint64_t alreadyGeneratedCoins, uint64_t fee, uint64_t &reward, int64_t &emissionChange);"
      }
    ],
    "rollback_blockchain_switching": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 310,
        "signature": "bool rollback_blockchain_switching(std::list<Block> &original_chain, size_t rollback_height);"
      }
    ],
    "get_last_n_blocks_sizes": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 311,
        "signature": "bool get_last_n_blocks_sizes(std::vector<size_t> &sz, size_t count);"
      }
    ],
    "add_out_to_get_random_outs": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 312,
        "signature": "bool add_out_to_get_random_outs(std::vector<std::pair<TransactionIndex, uint16_t>> &amount_outs, COMMAND_RPC_GET_RANDOM_OUTPUTS_FOR_AMOUNTS_outs_for_amount &result_outs, uint64_t amount, size_t i);"
      }
    ],
    "is_tx_spendtime_unlocked": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 313,
        "signature": "bool is_tx_spendtime_unlocked(uint64_t unlock_time);"
      },
      {
        "file": "src/CryptoNoteCore/Core.h",
        "line": 181,
        "signature": "bool is_tx_spendtime_unlocked(uint64_t unlock_time);"
      }
    ],
    "find_end_of_allowed_index": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 314,
        "signature": "size_t find_end_of_allowed_index(const std::vector<std::pair<TransactionIndex, uint16_t>> &amount_outs);"
      }
    ],
    "check_block_timestamp_main": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 315,
        "signature": "bool check_block_timestamp_main(const Block &b);"
      }
    ],
    "check_block_timestamp": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 316,
        "signature": "bool check_block_timestamp(std::vector<uint64_t> timestamps, const Block &b);"
      }
    ],
    "get_adjusted_time": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 317,
        "signature": "uint64_t get_adjusted_time();"
      }
    ],
    "complete_timestamps_vector": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 318,
        "signature": "bool complete_timestamps_vector(uint8_t blockMajorVersion, uint64_t start_height, std::vector<uint64_t>& timestamps);"
      }
    ],
    "checkBlockVersion": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 319,
        "signature": "bool checkBlockVersion(const Block& b, const Crypto::Hash& blockHash);"
      }
    ],
    "checkParentBlockSize": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 320,
        "signature": "bool checkParentBlockSize(const Block& b, const Crypto::Hash& blockHash);"
      }
    ],
    "checkCumulativeBlockSize": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 321,
        "signature": "bool checkCumulativeBlockSize(const Crypto::Hash& blockId, size_t cumulativeBlockSize, uint64_t height);"
      }
    ],
    "getBlockCumulativeSize": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 323,
        "signature": "bool getBlockCumulativeSize(const Block& block, size_t& cumulativeSize);"
      }
    ],
    "update_next_comulative_size_limit": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 324,
        "signature": "bool update_next_comulative_size_limit();"
      }
    ],
    "check_tx_input": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 325,
        "signature": "bool check_tx_input(const KeyInput& txin, const Crypto::Hash& tx_prefix_hash, const std::vector<Crypto::Signature>& sig, uint32_t* pmax_related_block_height = NULL);"
      }
    ],
    "pushBlock": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 330,
        "signature": "bool pushBlock(const Block &blockData, const Crypto::Hash &id, block_verification_context &bvc, uint32_t height);"
      },
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 331,
        "signature": "bool pushBlock(const Block &blockData, const std::vector<Transaction> &transactions, const Crypto::Hash &id, block_verification_context &bvc);"
      },
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 332,
        "signature": "bool pushBlock(BlockEntry &block);"
      },
      {
        "file": "src/CryptoNoteCore/DepositIndex.h",
        "line": 34,
        "signature": "void pushBlock(DepositAmount amount, DepositInterest interest);"
      },
      {
        "file": "src/CryptoNoteCore/InvestmentIndex.h",
        "line": 34,
        "signature": "void pushBlock(DepositAmount amount, DepositInterest interest);"
      }
    ],
    "popBlock": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 333,
        "signature": "void popBlock(const Crypto::Hash &blockHash);"
      },
      {
        "file": "src/CryptoNoteCore/DepositIndex.h",
        "line": 35,
        "signature": "void popBlock();"
      },
      {
        "file": "src/CryptoNoteCore/InvestmentIndex.h",
        "line": 35,
        "signature": "void popBlock();"
      }
    ],
    "pushTransaction": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 334,
        "signature": "bool pushTransaction(BlockEntry &block, const Crypto::Hash &transactionHash, TransactionIndex transactionIndex);"
      }
    ],
    "popTransaction": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 335,
        "signature": "void popTransaction(const Transaction &transaction, const Crypto::Hash &transactionHash);"
      }
    ],
    "popTransactions": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 336,
        "signature": "void popTransactions(const BlockEntry &block, const Crypto::Hash &minerTransactionHash);"
      }
    ],
    "validateInput": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 337,
        "signature": "bool validateInput(const MultisignatureInput &input, const Crypto::Hash &transactionHash, const Crypto::Hash &transactionPrefixHash, const std::vector<Crypto::Signature> &transactionSignatures);"
      }
    ],
    "removeLastBlock": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 338,
        "signature": "bool removeLastBlock();"
      }
    ],
    "checkCheckpoints": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 339,
        "signature": "bool checkCheckpoints(uint32_t &lastValidCheckpointHeight);"
      }
    ],
    "checkUpgradeHeight": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 340,
        "signature": "bool checkUpgradeHeight(const UpgradeDetector& upgradeDetector);"
      }
    ],
    "storeBlockchainIndices": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 342,
        "signature": "bool storeBlockchainIndices();"
      }
    ],
    "loadBlockchainIndices": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 343,
        "signature": "bool loadBlockchainIndices();"
      }
    ],
    "loadTransactions": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 345,
        "signature": "bool loadTransactions(const Block& block, std::vector<Transaction>& transactions, uint32_t height);"
      },
      {
        "file": "src/Wallet/WalletSerializationV1.h",
        "line": 98,
        "signature": "void loadTransactions(Common::IInputStream &source, CryptoContext &cryptoContext);"
      },
      {
        "file": "src/Wallet/WalletSerializationV2.h",
        "line": 63,
        "signature": "void loadTransactions(CryptoNote::ISerializer& serializer);"
      }
    ],
    "saveTransactions": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 346,
        "signature": "void saveTransactions(const std::vector<Transaction>& transactions, uint32_t height);"
      },
      {
        "file": "src/Wallet/WalletSerializationV1.h",
        "line": 79,
        "signature": "void saveTransactions(Common::IOutputStream &destination, CryptoContext &cryptoContext);"
      },
      {
        "file": "src/Wallet/WalletSerializationV2.h",
        "line": 64,
        "signature": "void saveTransactions(CryptoNote::ISerializer& serializer);"
      }
    ],
    "sendMessage": [
      {
        "file": "src/CryptoNoteCore/Blockchain.h",
        "line": 348,
        "signature": "void sendMessage(const BlockchainMessage& message);"
      },
      {
        "file": "src/P2p/LevinProtocol.h",
        "line": 80,
        "signature": "void sendMessage(uint32_t command, const BinaryArray& out, bool needResponse);"
      }
    ],
    "find": [
      {
        "file": "src/CryptoNoteCore/BlockchainIndices.h",
        "line": 37,
        "signature": "bool find(const Crypto::Hash& paymentId, std::vector<Crypto::Hash>& transactionHashes);"
      },
      {
        "file": "src/CryptoNoteCore/BlockchainIndices.h",
        "line": 56,
        "signature": "bool find(uint64_t timestampBegin, uint64_t timestampEnd, uint32_t hashesNumberLimit, std::vector<Crypto::Hash>& hashes, uint32_t& hashesNumberWithinTimestamps);"
      },
      {
        "file": "src/CryptoNoteCore/BlockchainIndices.h",
        "line": 75,
        "signature": "bool find(uint64_t timestampBegin, uint64_t timestampEnd, uint64_t hashesNumberLimit, std::vector<Crypto::Hash>& hashes, uint64_t& hashesNumberWithinTimestamps);"
      },
      {
        "file": "src/CryptoNoteCore/BlockchainIndices.h",
        "line": 94,
        "signature": "bool find(uint32_t height, uint64_t& generatedTransactions);"
      },
      {
        "file": "src/CryptoNoteCore/BlockchainIndices.h",
        "line": 115,
        "signature": "bool find(uint32_t height, std::vector<Crypto::Hash>& blockHashes);"
      },
      {
        "file": "src/CryptoNoteCore/SwappedMap.h",
        "line": 96,
        "signature": "const_iterator find(const Key& key);"
      }
    ],
    "check_block": [
      {
        "file": "src/CryptoNoteCore/Checkpoints.cpp",
        "line": 80,
        "signature": "return check_block(height, h, ignored);"
      }
    ],
    "add_checkpoint": [
      {
        "file": "src/CryptoNoteCore/Checkpoints.h",
        "line": 30,
        "signature": "bool add_checkpoint(uint32_t height, const std::string& hash_str);"
      }
    ],
    "load_checkpoints_from_file": [
      {
        "file": "src/CryptoNoteCore/Checkpoints.h",
        "line": 32,
        "signature": "bool load_checkpoints_from_file(const std::string& fileName);"
      }
    ],
    "load_checkpoints_from_dns": [
      {
        "file": "src/CryptoNoteCore/Checkpoints.h",
        "line": 33,
        "signature": "bool load_checkpoints_from_dns();"
      }
    ],
    "load_checkpoints": [
      {
        "file": "src/CryptoNoteCore/Checkpoints.h",
        "line": 34,
        "signature": "bool load_checkpoints();"
      }
    ],
    "load_state_data": [
      {
        "file": "src/CryptoNoteCore/Core.cpp",
        "line": 187,
        "signature": "return load_state_data();"
      },
      {
        "file": "src/CryptoNoteCore/Core.h",
        "line": 171,
        "signature": "bool load_state_data();"
      }
    ],
    "lbs": [
      {
        "file": "src/CryptoNoteCore/Core.cpp",
        "line": 429,
        "signature": "LockedBlockchainStorage lbs(m_blockchain);"
      },
      {
        "file": "src/CryptoNoteCore/Core.cpp",
        "line": 783,
        "signature": "LockedBlockchainStorage lbs(m_blockchain);"
      },
      {
        "file": "src/CryptoNoteCore/Core.cpp",
        "line": 793,
        "signature": "LockedBlockchainStorage lbs(m_blockchain);"
      },
      {
        "file": "src/CryptoNoteCore/Core.cpp",
        "line": 874,
        "signature": "LockedBlockchainStorage lbs(m_blockchain);"
      },
      {
        "file": "src/CryptoNoteCore/Core.cpp",
        "line": 931,
        "signature": "LockedBlockchainStorage lbs(m_blockchain);"
      },
      {
        "file": "src/CryptoNoteCore/Core.cpp",
        "line": 954,
        "signature": "LockedBlockchainStorage lbs(m_blockchain);"
      },
      {
        "file": "src/CryptoNoteCore/Core.cpp",
        "line": 966,
        "signature": "LockedBlockchainStorage lbs(m_blockchain);"
      },
      {
        "file": "src/CryptoNoteCore/Core.cpp",
        "line": 1156,
        "signature": "LockedBlockchainStorage lbs(m_blockchain);"
      },
      {
        "file": "src/CryptoNoteCore/Core.cpp",
        "line": 1214,
        "signature": "LockedBlockchainStorage lbs(m_blockchain);"
      }
    ],
    "blockchainLock": [
      {
        "file": "src/CryptoNoteCore/Core.cpp",
        "line": 448,
        "signature": "LockedBlockchainStorage blockchainLock(m_blockchain);"
      }
    ],
    "handle_incoming_block": [
      {
        "file": "src/CryptoNoteCore/Core.cpp",
        "line": 701,
        "signature": "return handle_incoming_block(b, bvc, control_miner, relay_block);"
      },
      {
        "file": "src/CryptoNoteCore/Core.h",
        "line": 173,
        "signature": "bool handle_incoming_block(const Block &b, block_verification_context &bvc, bool control_miner, bool relay_block);"
      }
    ],
    "parseAndValidateTransactionFromBinaryArray": [
      {
        "file": "src/CryptoNoteCore/Core.cpp",
        "line": 758,
        "signature": "return parseAndValidateTransactionFromBinaryArray(blob, tx, tx_hash, tx_prefix_hash);"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.cpp",
        "line": 45,
        "signature": "bool parseAndValidateTransactionFromBinaryArray(const BinaryArray& tx_blob, Transaction& tx, Hash& tx_hash, Hash& tx_prefix_hash) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.h",
        "line": 34,
        "signature": "bool parseAndValidateTransactionFromBinaryArray(const BinaryArray& transactionBinaryArray, Transaction& transaction, Crypto::Hash& transactionHash, Crypto::Hash& transactionPrefixHash);"
      }
    ],
    "vi": [
      {
        "file": "src/CryptoNoteCore/Core.cpp",
        "line": 1059,
        "signature": "outputs_visitor vi(outputReferences);"
      }
    ],
    "func": [
      {
        "file": "src/CryptoNoteCore/Core.cpp",
        "line": 1158,
        "signature": "return func();"
      }
    ],
    "init_options": [
      {
        "file": "src/CryptoNoteCore/Core.h",
        "line": 66,
        "signature": "static void init_options(boost::program_options::options_description& desc);"
      },
      {
        "file": "src/P2p/NetNode.h",
        "line": 120,
        "signature": "static void init_options(boost::program_options::options_description& desc);"
      },
      {
        "file": "src/Wallet/PoolRpcServer.h",
        "line": 48,
        "signature": "static void init_options(boost::program_options::options_description& desc);"
      },
      {
        "file": "src/Wallet/WalletRpcServer.h",
        "line": 48,
        "signature": "static void init_options(boost::program_options::options_description& desc);"
      }
    ],
    "set_genesis_block": [
      {
        "file": "src/CryptoNoteCore/Core.h",
        "line": 68,
        "signature": "bool set_genesis_block(const Block& b);"
      }
    ],
    "getCurrentBlockMajorVersion": [
      {
        "file": "src/CryptoNoteCore/Core.h",
        "line": 98,
        "signature": "uint8_t getCurrentBlockMajorVersion();"
      }
    ],
    "get_current_blockchain_height": [
      {
        "file": "src/CryptoNoteCore/Core.h",
        "line": 99,
        "signature": "uint32_t get_current_blockchain_height();"
      },
      {
        "file": "src/CryptoNoteProtocol/CryptoNoteProtocolHandler.h",
        "line": 105,
        "signature": "uint32_t get_current_blockchain_height();"
      }
    ],
    "get_blocks": [
      {
        "file": "src/CryptoNoteCore/Core.h",
        "line": 106,
        "signature": "bool get_blocks(uint32_t start_offset, uint32_t count, std::list<Block>& blocks, std::list<Transaction>& txs);"
      },
      {
        "file": "src/CryptoNoteCore/Core.h",
        "line": 107,
        "signature": "bool get_blocks(uint32_t start_offset, uint32_t count, std::list<Block>& blocks);"
      }
    ],
    "rollback_chain_to": [
      {
        "file": "src/CryptoNoteCore/Core.h",
        "line": 108,
        "signature": "bool rollback_chain_to(uint32_t height);"
      }
    ],
    "get_alternative_blocks": [
      {
        "file": "src/CryptoNoteCore/Core.h",
        "line": 125,
        "signature": "bool get_alternative_blocks(std::list<Block> &blocks);"
      }
    ],
    "get_alternative_blocks_count": [
      {
        "file": "src/CryptoNoteCore/Core.h",
        "line": 126,
        "signature": "size_t get_alternative_blocks_count();"
      }
    ],
    "set_cryptonote_protocol": [
      {
        "file": "src/CryptoNoteCore/Core.h",
        "line": 130,
        "signature": "void set_cryptonote_protocol(i_cryptonote_protocol *pprotocol);"
      }
    ],
    "set_checkpoints": [
      {
        "file": "src/CryptoNoteCore/Core.h",
        "line": 131,
        "signature": "void set_checkpoints(Checkpoints &&chk_pts);"
      }
    ],
    "get_pool_transactions_count": [
      {
        "file": "src/CryptoNoteCore/Core.h",
        "line": 135,
        "signature": "size_t get_pool_transactions_count();"
      }
    ],
    "get_blockchain_total_transactions": [
      {
        "file": "src/CryptoNoteCore/Core.h",
        "line": 136,
        "signature": "size_t get_blockchain_total_transactions();"
      }
    ],
    "getNextBlockDifficulty": [
      {
        "file": "src/CryptoNoteCore/Core.h",
        "line": 161,
        "signature": "uint64_t getNextBlockDifficulty();"
      }
    ],
    "getTotalGeneratedAmount": [
      {
        "file": "src/CryptoNoteCore/Core.h",
        "line": 162,
        "signature": "uint64_t getTotalGeneratedAmount();"
      }
    ],
    "is_key_image_spent": [
      {
        "file": "src/CryptoNoteCore/Core.h",
        "line": 167,
        "signature": "bool is_key_image_spent(const Crypto::KeyImage &key_im);"
      }
    ],
    "add_new_tx": [
      {
        "file": "src/CryptoNoteCore/Core.h",
        "line": 170,
        "signature": "bool add_new_tx(const Transaction &tx, const Crypto::Hash &tx_hash, size_t blob_size, tx_verification_context &tvc, bool keeped_by_block, uint32_t height);"
      }
    ],
    "parse_tx_from_blob": [
      {
        "file": "src/CryptoNoteCore/Core.h",
        "line": 172,
        "signature": "bool parse_tx_from_blob(Transaction &tx, Crypto::Hash &tx_hash, Crypto::Hash &tx_prefix_hash, const BinaryArray &blob);"
      }
    ],
    "check_tx_syntax": [
      {
        "file": "src/CryptoNoteCore/Core.h",
        "line": 175,
        "signature": "bool check_tx_syntax(const Transaction &tx);  //check correct values, amounts and all lightweight checks not related with database"
      }
    ],
    "check_tx_semantic": [
      {
        "file": "src/CryptoNoteCore/Core.h",
        "line": 176,
        "signature": "bool check_tx_semantic(const Transaction &tx, bool keeped_by_block, uint32_t &height); //check if tx already in memory pool or in main blockchain"
      }
    ],
    "check_tx_mixin": [
      {
        "file": "src/CryptoNoteCore/Core.h",
        "line": 177,
        "signature": "bool check_tx_mixin(const Transaction& tx);   //check if the mixin is not too large"
      }
    ],
    "check_tx_fee": [
      {
        "file": "src/CryptoNoteCore/Core.h",
        "line": 178,
        "signature": "bool check_tx_fee(const Transaction& tx, size_t blobSize, tx_verification_context& tvc); //check for proper tx fee"
      }
    ],
    "check_tx_ring_signature": [
      {
        "file": "src/CryptoNoteCore/Core.h",
        "line": 180,
        "signature": "bool check_tx_ring_signature(const KeyInput &tx, const Crypto::Hash &tx_prefix_hash, const std::vector<Crypto::Signature> &sig);"
      }
    ],
    "update_miner_block_template": [
      {
        "file": "src/CryptoNoteCore/Core.h",
        "line": 182,
        "signature": "bool update_miner_block_template();"
      }
    ],
    "handle_command_line": [
      {
        "file": "src/CryptoNoteCore/Core.h",
        "line": 183,
        "signature": "bool handle_command_line(const boost::program_options::variables_map &vm);"
      },
      {
        "file": "src/P2p/NetNode.h",
        "line": 190,
        "signature": "bool handle_command_line(const boost::program_options::variables_map& vm);"
      },
      {
        "file": "src/SimpleWallet/SimpleWallet.h",
        "line": 75,
        "signature": "void handle_command_line(const boost::program_options::variables_map& vm);"
      },
      {
        "file": "src/Wallet/PoolRpcServer.h",
        "line": 76,
        "signature": "bool handle_command_line(const boost::program_options::variables_map& vm);"
      },
      {
        "file": "src/Wallet/WalletRpcServer.h",
        "line": 80,
        "signature": "bool handle_command_line(const boost::program_options::variables_map& vm);"
      }
    ],
    "on_update_blocktemplate_interval": [
      {
        "file": "src/CryptoNoteCore/Core.h",
        "line": 184,
        "signature": "bool on_update_blocktemplate_interval();"
      }
    ],
    "check_tx_inputs_keyimages_diff": [
      {
        "file": "src/CryptoNoteCore/Core.h",
        "line": 185,
        "signature": "bool check_tx_inputs_keyimages_diff(const Transaction &tx);"
      }
    ],
    "poolUpdated": [
      {
        "file": "src/CryptoNoteCore/Core.h",
        "line": 188,
        "signature": "void poolUpdated();"
      },
      {
        "file": "src/CryptoNoteCore/ICoreObserver.h",
        "line": 26,
        "signature": "virtual void poolUpdated() {};"
      }
    ],
    "findStartAndFullOffsets": [
      {
        "file": "src/CryptoNoteCore/Core.h",
        "line": 190,
        "signature": "bool findStartAndFullOffsets(const std::vector<Crypto::Hash> &knownBlockIds, uint64_t timestamp, uint32_t &startOffset, uint32_t &startFullOffset);"
      }
    ],
    "initOptions": [
      {
        "file": "src/CryptoNoteCore/CoreConfig.h",
        "line": 30,
        "signature": "static void initOptions(boost::program_options::options_description& desc);"
      },
      {
        "file": "src/CryptoNoteCore/MinerConfig.h",
        "line": 31,
        "signature": "static void initOptions(boost::program_options::options_description& desc);"
      },
      {
        "file": "src/P2p/NetNodeConfig.h",
        "line": 32,
        "signature": "static void initOptions(boost::program_options::options_description& desc);"
      },
      {
        "file": "src/PaymentGateService/PaymentServiceConfiguration.h",
        "line": 37,
        "signature": "static void initOptions(boost::program_options::options_description& desc);"
      },
      {
        "file": "src/PaymentGateService/RpcNodeConfiguration.h",
        "line": 29,
        "signature": "static void initOptions(boost::program_options::options_description& desc);"
      },
      {
        "file": "src/Rpc/RpcServerConfig.h",
        "line": 29,
        "signature": "static void initOptions(boost::program_options::options_description& desc);"
      }
    ],
    "generateKeyPair": [
      {
        "file": "src/CryptoNoteCore/CryptoNoteBasic.cpp",
        "line": 23,
        "signature": "KeyPair generateKeyPair() {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteBasic.h",
        "line": 28,
        "signature": "KeyPair generateKeyPair();"
      }
    ],
    "makeParentBlockSerializer": [
      {
        "file": "src/CryptoNoteCore/CryptoNoteBasic.h",
        "line": 42,
        "signature": "inline ParentBlockSerializer makeParentBlockSerializer(const Block& b, bool hashingSerialization, bool headerOnly) {"
      }
    ],
    "ParentBlockSerializer": [
      {
        "file": "src/CryptoNoteCore/CryptoNoteBasic.h",
        "line": 44,
        "signature": "return ParentBlockSerializer(blockRef.parentBlock, blockRef.timestamp, blockRef.nonce, hashingSerialization, headerOnly);"
      }
    ],
    "getPenalizedAmount": [
      {
        "file": "src/CryptoNoteCore/CryptoNoteBasicImpl.cpp",
        "line": 36,
        "signature": "uint64_t getPenalizedAmount(uint64_t amount, size_t medianSize, size_t currentBlockSize) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteBasicImpl.h",
        "line": 42,
        "signature": "uint64_t getPenalizedAmount(uint64_t amount, size_t medianSize, size_t currentBlockSize);"
      }
    ],
    "is_coinbase": [
      {
        "file": "src/CryptoNoteCore/CryptoNoteBasicImpl.cpp",
        "line": 71,
        "signature": "bool is_coinbase(const Transaction& tx) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteBasicImpl.h",
        "line": 45,
        "signature": "bool is_coinbase(const Transaction& tx);"
      }
    ],
    "parseAccountAddressString": [
      {
        "file": "src/CryptoNoteCore/CryptoNoteBasicImpl.cpp",
        "line": 83,
        "signature": "bool parseAccountAddressString(uint64_t& prefix, AccountPublicAddress& adr, const std::string& str) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteBasicImpl.h",
        "line": 44,
        "signature": "bool parseAccountAddressString(uint64_t& prefix, AccountPublicAddress& adr, const std::string& str);"
      },
      {
        "file": "src/Wallet/WalletGreen.cpp",
        "line": 4425,
        "signature": "return parseAccountAddressString(changeDestinationAddress, m_currency);"
      },
      {
        "file": "src/Wallet/WalletGreen.cpp",
        "line": 4434,
        "signature": "return parseAccountAddressString(sourceAddresses[0], m_currency);"
      }
    ],
    "parse_hash256": [
      {
        "file": "src/CryptoNoteCore/CryptoNoteBasicImpl.cpp",
        "line": 104,
        "signature": "bool parse_hash256(const std::string& str_hash, Crypto::Hash& hash) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteBasicImpl.h",
        "line": 56,
        "signature": "bool parse_hash256(const std::string& str_hash, Crypto::Hash& hash);"
      }
    ],
    "generate_key_image_helper": [
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.cpp",
        "line": 56,
        "signature": "bool generate_key_image_helper(const AccountKeys& ack, const PublicKey& tx_public_key, size_t real_output_index, KeyPair& in_ephemeral, KeyImage& ki) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.h",
        "line": 84,
        "signature": "bool generate_key_image_helper(const AccountKeys& ack, const Crypto::PublicKey& tx_public_key, size_t real_output_index, KeyPair& in_ephemeral, Crypto::KeyImage& ki);"
      }
    ],
    "power_integral": [
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.cpp",
        "line": 79,
        "signature": "uint64_t power_integral(uint64_t a, uint64_t b) {"
      }
    ],
    "logger": [
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.cpp",
        "line": 99,
        "signature": "LoggerRef logger(log, \"construct_tx\");"
      },
      {
        "file": "src/Daemon/Daemon.cpp",
        "line": 130,
        "signature": "LoggerRef logger(logManager, \"daemon\");"
      },
      {
        "file": "src/SimpleWallet/SimpleWallet.h",
        "line": 66,
        "signature": "return logger(Logging::INFO, color ? Logging::GREEN : Logging::DEFAULT);"
      }
    ],
    "generateDeterministicTransactionKeys": [
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.cpp",
        "line": 266,
        "signature": "return generateDeterministicTransactionKeys(inputsHash, viewSecretKey, generatedKeys);"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.h",
        "line": 61,
        "signature": "bool generateDeterministicTransactionKeys(const Crypto::Hash &inputsHash, const Crypto::SecretKey &viewSecretKey, KeyPair &generatedKeys);"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.h",
        "line": 62,
        "signature": "bool generateDeterministicTransactionKeys(const Transaction &tx, const Crypto::SecretKey &viewSecretKey, KeyPair &generatedKeys);"
      }
    ],
    "get_inputs_money_amount": [
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.cpp",
        "line": 269,
        "signature": "bool get_inputs_money_amount(const Transaction& tx, uint64_t& money) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.h",
        "line": 93,
        "signature": "bool get_inputs_money_amount(const Transaction& tx, uint64_t& money);"
      }
    ],
    "get_block_height": [
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.cpp",
        "line": 286,
        "signature": "uint32_t get_block_height(const Block& b) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.h",
        "line": 102,
        "signature": "uint32_t get_block_height(const Block& b);"
      }
    ],
    "check_inputs_types_supported": [
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.cpp",
        "line": 297,
        "signature": "bool check_inputs_types_supported(const TransactionPrefix& tx) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.h",
        "line": 95,
        "signature": "bool check_inputs_types_supported(const TransactionPrefix& tx);"
      }
    ],
    "check_outs_valid": [
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.cpp",
        "line": 312,
        "signature": "bool check_outs_valid(const TransactionPrefix& tx, std::string* error) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.h",
        "line": 96,
        "signature": "bool check_outs_valid(const TransactionPrefix& tx, std::string* error = 0);"
      }
    ],
    "checkMultisignatureInputsDiff": [
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.cpp",
        "line": 360,
        "signature": "bool checkMultisignatureInputsDiff(const TransactionPrefix& tx) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.h",
        "line": 97,
        "signature": "bool checkMultisignatureInputsDiff(const TransactionPrefix& tx);"
      }
    ],
    "check_money_overflow": [
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.cpp",
        "line": 373,
        "signature": "bool check_money_overflow(const TransactionPrefix &tx) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.h",
        "line": 99,
        "signature": "bool check_money_overflow(const TransactionPrefix& tx);"
      }
    ],
    "check_inputs_overflow": [
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.cpp",
        "line": 377,
        "signature": "bool check_inputs_overflow(const TransactionPrefix &tx) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.h",
        "line": 101,
        "signature": "bool check_inputs_overflow(const TransactionPrefix& tx);"
      }
    ],
    "check_outs_overflow": [
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.cpp",
        "line": 397,
        "signature": "bool check_outs_overflow(const TransactionPrefix& tx) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.h",
        "line": 100,
        "signature": "bool check_outs_overflow(const TransactionPrefix& tx);"
      }
    ],
    "get_outs_money_amount": [
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.cpp",
        "line": 407,
        "signature": "uint64_t get_outs_money_amount(const Transaction& tx) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.h",
        "line": 94,
        "signature": "uint64_t get_outs_money_amount(const Transaction& tx);"
      }
    ],
    "is_out_to_acc": [
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.cpp",
        "line": 426,
        "signature": "bool is_out_to_acc(const AccountKeys& acc, const KeyOutput& out_key, const KeyDerivation& derivation, size_t keyIndex) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.cpp",
        "line": 432,
        "signature": "bool is_out_to_acc(const AccountKeys& acc, const KeyOutput& out_key, const PublicKey& tx_pub_key, size_t keyIndex) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.cpp",
        "line": 435,
        "signature": "return is_out_to_acc(acc, out_key, derivation, keyIndex);"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.h",
        "line": 80,
        "signature": "bool is_out_to_acc(const AccountKeys& acc, const KeyOutput& out_key, const Crypto::PublicKey& tx_pub_key, size_t keyIndex);"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.h",
        "line": 81,
        "signature": "bool is_out_to_acc(const AccountKeys& acc, const KeyOutput& out_key, const Crypto::KeyDerivation& derivation, size_t keyIndex);"
      }
    ],
    "lookup_acc_outs": [
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.cpp",
        "line": 438,
        "signature": "bool lookup_acc_outs(const AccountKeys& acc, const Transaction& tx, std::vector<size_t>& outs, uint64_t& money_transfered) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.cpp",
        "line": 442,
        "signature": "return lookup_acc_outs(acc, tx, transactionPublicKey, outs, money_transfered);"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.cpp",
        "line": 445,
        "signature": "bool lookup_acc_outs(const AccountKeys& acc, const Transaction& tx, const PublicKey& tx_pub_key, std::vector<size_t>& outs, uint64_t& money_transfered) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.h",
        "line": 82,
        "signature": "bool lookup_acc_outs(const AccountKeys& acc, const Transaction& tx, const Crypto::PublicKey& tx_pub_key, std::vector<size_t>& outs, uint64_t& money_transfered);"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.h",
        "line": 83,
        "signature": "bool lookup_acc_outs(const AccountKeys& acc, const Transaction& tx, std::vector<size_t>& outs, uint64_t& money_transfered);"
      }
    ],
    "get_block_hashing_blob": [
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.cpp",
        "line": 471,
        "signature": "bool get_block_hashing_blob(const Block& b, BinaryArray& ba) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.h",
        "line": 87,
        "signature": "bool get_block_hashing_blob(const Block& b, BinaryArray& blob);"
      }
    ],
    "get_parent_block_hashing_blob": [
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.cpp",
        "line": 483,
        "signature": "bool get_parent_block_hashing_blob(const Block& b, BinaryArray& blob) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.h",
        "line": 88,
        "signature": "bool get_parent_block_hashing_blob(const Block& b, BinaryArray& blob);"
      }
    ],
    "toBinaryArray": [
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.cpp",
        "line": 485,
        "signature": "return toBinaryArray(serializer, blob);"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteTools.cpp",
        "line": 23,
        "signature": "bool toBinaryArray(const BinaryArray& object, BinaryArray& binaryArray) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteTools.h",
        "line": 34,
        "signature": "bool toBinaryArray(const T& object, BinaryArray& binaryArray) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteTools.h",
        "line": 47,
        "signature": "bool toBinaryArray(const BinaryArray& object, BinaryArray& binaryArray);"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteTools.h",
        "line": 50,
        "signature": "BinaryArray toBinaryArray(const T& object) {"
      },
      {
        "file": "src/CryptoNoteCore/Transaction.cpp",
        "line": 412,
        "signature": "return toBinaryArray(transaction);"
      },
      {
        "file": "src/CryptoNoteCore/TransactionPrefixImpl.cpp",
        "line": 223,
        "signature": "return toBinaryArray(m_txPrefix);"
      }
    ],
    "get_block_hash": [
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.cpp",
        "line": 488,
        "signature": "bool get_block_hash(const Block& b, Hash& res) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.cpp",
        "line": 506,
        "signature": "Hash get_block_hash(const Block& b) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.h",
        "line": 90,
        "signature": "bool get_block_hash(const Block& b, Crypto::Hash& res);"
      }
    ],
    "getObjectHash": [
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.cpp",
        "line": 503,
        "signature": "return getObjectHash(ba, res);"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.cpp",
        "line": 518,
        "signature": "return getObjectHash(blob, res);"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteTools.h",
        "line": 91,
        "signature": "bool getObjectHash(const T& object, Crypto::Hash& hash) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteTools.h",
        "line": 103,
        "signature": "bool getObjectHash(const T& object, Crypto::Hash& hash, size_t& size) {"
      },
      {
        "file": "src/CryptoNoteCore/Transaction.cpp",
        "line": 224,
        "signature": "return getObjectHash(transaction.inputs);"
      },
      {
        "file": "src/CryptoNoteCore/TransactionPrefixImpl.cpp",
        "line": 100,
        "signature": "return getObjectHash(m_txPrefix);"
      },
      {
        "file": "src/CryptoNoteCore/TransactionPrefixImpl.cpp",
        "line": 105,
        "signature": "return getObjectHash(m_txPrefix.inputs);"
      },
      {
        "file": "src/Wallet/WalletGreen.cpp",
        "line": 878,
        "signature": "return getObjectHash(pair.second);"
      },
      {
        "file": "src/Wallet/WalletSerializationV1.cpp",
        "line": 816,
        "signature": "return getObjectHash(pair.second);"
      }
    ],
    "get_aux_block_header_hash": [
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.cpp",
        "line": 512,
        "signature": "bool get_aux_block_header_hash(const Block& b, Hash& res) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.h",
        "line": 89,
        "signature": "bool get_aux_block_header_hash(const Block& b, Crypto::Hash& res);"
      }
    ],
    "get_block_longhash": [
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.cpp",
        "line": 521,
        "signature": "bool get_block_longhash(cn_context &context, const Block& b, Hash& res) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.h",
        "line": 92,
        "signature": "bool get_block_longhash(Crypto::cn_context &context, const Block& b, Crypto::Hash& res);"
      }
    ],
    "get_tx_tree_hash": [
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.cpp",
        "line": 558,
        "signature": "void get_tx_tree_hash(const std::vector<Hash>& tx_hashes, Hash& h) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.cpp",
        "line": 562,
        "signature": "Hash get_tx_tree_hash(const std::vector<Hash>& tx_hashes) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.cpp",
        "line": 568,
        "signature": "Hash get_tx_tree_hash(const Block& b) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.cpp",
        "line": 576,
        "signature": "return get_tx_tree_hash(txs_ids);"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.h",
        "line": 140,
        "signature": "void get_tx_tree_hash(const std::vector<Crypto::Hash>& tx_hashes, Crypto::Hash& h);"
      }
    ],
    "is_valid_decomposed_amount": [
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.cpp",
        "line": 579,
        "signature": "bool is_valid_decomposed_amount(uint64_t amount) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.h",
        "line": 143,
        "signature": "bool is_valid_decomposed_amount(uint64_t amount);"
      }
    ],
    "decompose_amount_into_digits": [
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.h",
        "line": 109,
        "signature": "void decompose_amount_into_digits(uint64_t amount, uint64_t dust_threshold, const chunk_handler_t& chunk_handler, const dust_handler_t& dust_handler) {"
      }
    ],
    "getSignaturesCount": [
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.cpp",
        "line": 48,
        "signature": "size_t getSignaturesCount(const TransactionInput& input) {"
      }
    ],
    "getVariantValue": [
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.cpp",
        "line": 78,
        "signature": "void getVariantValue(CryptoNote::ISerializer& serializer, uint8_t tag, CryptoNote::TransactionInput& in) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.cpp",
        "line": 103,
        "signature": "void getVariantValue(CryptoNote::ISerializer& serializer, uint8_t tag, CryptoNote::TransactionOutputTarget& out) {"
      }
    ],
    "serializePod": [
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.cpp",
        "line": 123,
        "signature": "bool serializePod(T& v, Common::StringView name, CryptoNote::ISerializer& serializer) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.cpp",
        "line": 150,
        "signature": "return serializePod(pubKey, name, serializer);"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.cpp",
        "line": 154,
        "signature": "return serializePod(secKey, name, serializer);"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.cpp",
        "line": 158,
        "signature": "return serializePod(h, name, serializer);"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.cpp",
        "line": 162,
        "signature": "return serializePod(keyImage, name, serializer);"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.cpp",
        "line": 167,
        "signature": "return serializePod(chacha8, name, serializer);"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.cpp",
        "line": 171,
        "signature": "return serializePod(sig, name, serializer);"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.cpp",
        "line": 175,
        "signature": "return serializePod(ecScalar, name, serializer);"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.cpp",
        "line": 179,
        "signature": "return serializePod(ecPoint, name, serializer);"
      }
    ],
    "serializeVarintVector": [
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.cpp",
        "line": 127,
        "signature": "bool serializeVarintVector(std::vector<uint32_t>& vector, CryptoNote::ISerializer& serializer, Common::StringView name) {"
      }
    ],
    "visitor": [
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.cpp",
        "line": 252,
        "signature": "VariantSerializer visitor(serializer, \"value\");"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.cpp",
        "line": 296,
        "signature": "VariantSerializer visitor(serializer, \"data\");"
      },
      {
        "file": "src/CryptoNoteCore/TransactionExtra.cpp",
        "line": 178,
        "signature": "ExtraSerializerVisitor visitor(tx_extra);"
      }
    ],
    "serializeBlockHeader": [
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.cpp",
        "line": 388,
        "signature": "void serializeBlockHeader(BlockHeader& header, ISerializer& serializer) {"
      }
    ],
    "doSerialize": [
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.cpp",
        "line": 433,
        "signature": "void doSerialize(TransactionExtraMergeMiningTag& tag, ISerializer& serializer) {"
      }
    ],
    "os": [
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.cpp",
        "line": 443,
        "signature": "StringOutputStream os(field);"
      }
    ],
    "output": [
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.cpp",
        "line": 444,
        "signature": "BinaryOutputStreamSerializer output(os);"
      },
      {
        "file": "src/Wallet/WalletSerializationV1.cpp",
        "line": 173,
        "signature": "StdOutputStream output(stream);"
      },
      {
        "file": "src/WalletLegacy/WalletLegacySerializer.cpp",
        "line": 82,
        "signature": "StdOutputStream output(stream);"
      }
    ],
    "input": [
      {
        "file": "src/CryptoNoteCore/CryptoNoteSerialization.cpp",
        "line": 451,
        "signature": "BinaryInputStreamSerializer input(stream);"
      }
    ],
    "serializer": [
      {
        "file": "src/CryptoNoteCore/CryptoNoteTools.cpp",
        "line": 26,
        "signature": "BinaryOutputStreamSerializer serializer(stream);"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteTools.h",
        "line": 37,
        "signature": "BinaryOutputStreamSerializer serializer(stream);"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteTools.h",
        "line": 61,
        "signature": "BinaryInputStreamSerializer serializer(stream);"
      },
      {
        "file": "src/P2p/LevinProtocol.h",
        "line": 87,
        "signature": "KVBinaryInputStreamSerializer serializer(stream);"
      },
      {
        "file": "src/Wallet/WalletGreen.cpp",
        "line": 660,
        "signature": "BinaryInputStreamSerializer serializer(stream);"
      },
      {
        "file": "src/Wallet/WalletGreen.cpp",
        "line": 679,
        "signature": "BinaryOutputStreamSerializer serializer(outputStream);"
      },
      {
        "file": "src/WalletLegacy/WalletLegacy.cpp",
        "line": 272,
        "signature": "WalletLegacySerializer serializer(m_account, m_transactionsCache);"
      },
      {
        "file": "src/WalletLegacy/WalletLegacy.cpp",
        "line": 401,
        "signature": "WalletLegacySerializer serializer(m_account, m_transactionsCache);"
      },
      {
        "file": "src/WalletLegacy/WalletLegacy.cpp",
        "line": 1477,
        "signature": "WalletLegacySerializer serializer(m_account, m_transactionsCache);"
      }
    ],
    "getBinaryArrayHash": [
      {
        "file": "src/CryptoNoteCore/CryptoNoteTools.cpp",
        "line": 36,
        "signature": "void getBinaryArrayHash(const BinaryArray& binaryArray, Crypto::Hash& hash) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteTools.h",
        "line": 30,
        "signature": "void getBinaryArrayHash(const BinaryArray& binaryArray, Crypto::Hash& hash);"
      }
    ],
    "getInputAmount": [
      {
        "file": "src/CryptoNoteCore/CryptoNoteTools.cpp",
        "line": 46,
        "signature": "uint64_t getInputAmount(const Transaction& transaction) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteTools.h",
        "line": 123,
        "signature": "uint64_t getInputAmount(const Transaction& transaction);"
      }
    ],
    "getOutputAmount": [
      {
        "file": "src/CryptoNoteCore/CryptoNoteTools.cpp",
        "line": 74,
        "signature": "uint64_t getOutputAmount(const Transaction& transaction) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteTools.h",
        "line": 125,
        "signature": "uint64_t getOutputAmount(const Transaction& transaction);"
      }
    ],
    "decomposeAmount": [
      {
        "file": "src/CryptoNoteCore/CryptoNoteTools.cpp",
        "line": 83,
        "signature": "void decomposeAmount(uint64_t amount, uint64_t dustThreshold, std::vector<uint64_t>& decomposedAmounts) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteTools.h",
        "line": 126,
        "signature": "void decomposeAmount(uint64_t amount, uint64_t dustThreshold, std::vector<uint64_t>& decomposedAmounts);"
      }
    ],
    "fromBinaryArray": [
      {
        "file": "src/CryptoNoteCore/CryptoNoteTools.h",
        "line": 57,
        "signature": "bool fromBinaryArray(T& object, const BinaryArray& binaryArray) {"
      }
    ],
    "getObjectBinarySize": [
      {
        "file": "src/CryptoNoteCore/CryptoNoteTools.h",
        "line": 72,
        "signature": "bool getObjectBinarySize(const T& object, size_t& size) {"
      },
      {
        "file": "src/CryptoNoteCore/CryptoNoteTools.h",
        "line": 84,
        "signature": "size_t getObjectBinarySize(const T& object) {"
      }
    ],
    "if": [
      {
        "file": "src/CryptoNoteCore/Currency.cpp",
        "line": 135,
        "signature": "else if (blockMajorVersion == BLOCK_MAJOR_VERSION_2) {"
      },
      {
        "file": "src/CryptoNoteCore/Currency.cpp",
        "line": 147,
        "signature": "else if (majorVersion == BLOCK_MAJOR_VERSION_3) {"
      },
      {
        "file": "src/CryptoNoteCore/Currency.cpp",
        "line": 150,
        "signature": "else if (majorVersion == BLOCK_MAJOR_VERSION_4) {"
      },
      {
        "file": "src/CryptoNoteCore/Currency.cpp",
        "line": 153,
        "signature": "else if (majorVersion == BLOCK_MAJOR_VERSION_5) {"
      },
      {
        "file": "src/CryptoNoteCore/Currency.cpp",
        "line": 156,
        "signature": "else if (majorVersion == BLOCK_MAJOR_VERSION_6) {"
      },
      {
        "file": "src/CryptoNoteCore/Currency.cpp",
        "line": 159,
        "signature": "else if (majorVersion == BLOCK_MAJOR_VERSION_7) {"
      },
      {
        "file": "src/CryptoNoteCore/Currency.cpp",
        "line": 162,
        "signature": "else if (majorVersion == BLOCK_MAJOR_VERSION_8) {"
      },
      {
        "file": "src/CryptoNoteCore/Currency.cpp",
        "line": 165,
        "signature": "else if (majorVersion == BLOCK_MAJOR_VERSION_9) {"
      },
      {
        "file": "src/CryptoNoteCore/Currency.cpp",
        "line": 804,
        "signature": "else if (blockMajorVersion >= BLOCK_MAJOR_VERSION_4) {"
      },
      {
        "file": "src/CryptoNoteCore/Currency.cpp",
        "line": 807,
        "signature": "else if (blockMajorVersion >= BLOCK_MAJOR_VERSION_3) {"
      },
      {
        "file": "src/CryptoNoteCore/Currency.cpp",
        "line": 810,
        "signature": "else if (blockMajorVersion == BLOCK_MAJOR_VERSION_2) {"
      },
      {
        "file": "src/CryptoNoteCore/Currency.h",
        "line": 59,
        "signature": "else if (blockMajorVersion >= BLOCK_MAJOR_VERSION_5) {"
      },
      {
        "file": "src/CryptoNoteCore/Currency.h",
        "line": 77,
        "signature": "else if (blockMajorVersion == BLOCK_MAJOR_VERSION_8) {"
      }
    ],
    "calculateInterestV3": [
      {
        "file": "src/CryptoNoteCore/Currency.cpp",
        "line": 210,
        "signature": "return calculateInterestV3(amount, term);"
      }
    ],
    "calculateInterestV2": [
      {
        "file": "src/CryptoNoteCore/Currency.cpp",
        "line": 216,
        "signature": "return calculateInterestV2(amount, term);"
      },
      {
        "file": "src/CryptoNoteCore/Currency.cpp",
        "line": 221,
        "signature": "return calculateInterestV2(amount, term);"
      }
    ],
    "isAmountApplicableInFusionTransactionInput": [
      {
        "file": "src/CryptoNoteCore/Currency.cpp",
        "line": 663,
        "signature": "return isAmountApplicableInFusionTransactionInput(amount, threshold, ignore, height);"
      }
    ],
    "getAccountAddressAsStr": [
      {
        "file": "src/CryptoNoteCore/Currency.cpp",
        "line": 699,
        "signature": "return getAccountAddressAsStr(m_publicAddressBase58Prefix, accountPublicAddress);"
      }
    ],
    "nextDifficultyV5": [
      {
        "file": "src/CryptoNoteCore/Currency.cpp",
        "line": 802,
        "signature": "return nextDifficultyV5(height, blockMajorVersion, timestamps, cumulativeDifficulties);"
      }
    ],
    "nextDifficultyV4": [
      {
        "file": "src/CryptoNoteCore/Currency.cpp",
        "line": 805,
        "signature": "return nextDifficultyV4(height, blockMajorVersion, timestamps, cumulativeDifficulties);"
      }
    ],
    "nextDifficultyV3": [
      {
        "file": "src/CryptoNoteCore/Currency.cpp",
        "line": 808,
        "signature": "return nextDifficultyV3(timestamps, cumulativeDifficulties);"
      }
    ],
    "nextDifficultyV2": [
      {
        "file": "src/CryptoNoteCore/Currency.cpp",
        "line": 811,
        "signature": "return nextDifficultyV2(timestamps, cumulativeDifficulties);"
      }
    ],
    "nextDifficultyV1": [
      {
        "file": "src/CryptoNoteCore/Currency.cpp",
        "line": 814,
        "signature": "return nextDifficultyV1(timestamps, cumulativeDifficulties);"
      }
    ],
    "solveTime": [
      {
        "file": "src/CryptoNoteCore/Currency.cpp",
        "line": 960,
        "signature": "int64_t solveTime(0);"
      }
    ],
    "check_hash": [
      {
        "file": "src/CryptoNoteCore/Currency.cpp",
        "line": 1135,
        "signature": "return check_hash(proofOfWork, currentDiffic);"
      },
      {
        "file": "src/CryptoNoteCore/Difficulty.cpp",
        "line": 59,
        "signature": "bool check_hash(const Crypto::Hash &hash, difficulty_type difficulty) {"
      },
      {
        "file": "src/CryptoNoteCore/Difficulty.h",
        "line": 29,
        "signature": "bool check_hash(const Crypto::Hash &hash, difficulty_type difficulty);"
      }
    ],
    "checkProofOfWorkV1": [
      {
        "file": "src/CryptoNoteCore/Currency.cpp",
        "line": 1182,
        "signature": "return checkProofOfWorkV1(context, block, currentDiffic, proofOfWork);"
      }
    ],
    "checkProofOfWorkV2": [
      {
        "file": "src/CryptoNoteCore/Currency.cpp",
        "line": 1194,
        "signature": "return checkProofOfWorkV2(context, block, currentDiffic, proofOfWork);"
      }
    ],
    "timestampCheckWindow_v1": [
      {
        "file": "src/CryptoNoteCore/Currency.h",
        "line": 47,
        "signature": "return timestampCheckWindow_v1();"
      }
    ],
    "timestampCheckWindow": [
      {
        "file": "src/CryptoNoteCore/Currency.h",
        "line": 50,
        "signature": "return timestampCheckWindow();"
      }
    ],
    "blockFutureTimeLimit_v2": [
      {
        "file": "src/CryptoNoteCore/Currency.h",
        "line": 57,
        "signature": "return blockFutureTimeLimit_v2();"
      }
    ],
    "blockFutureTimeLimit_v1": [
      {
        "file": "src/CryptoNoteCore/Currency.h",
        "line": 60,
        "signature": "return blockFutureTimeLimit_v1();"
      }
    ],
    "blockFutureTimeLimit": [
      {
        "file": "src/CryptoNoteCore/Currency.h",
        "line": 63,
        "signature": "return blockFutureTimeLimit();"
      }
    ],
    "emissionSpeedFactor_FUEGO": [
      {
        "file": "src/CryptoNoteCore/Currency.h",
        "line": 75,
        "signature": "return emissionSpeedFactor_FUEGO();"
      }
    ],
    "emissionSpeedFactor_FANGO": [
      {
        "file": "src/CryptoNoteCore/Currency.h",
        "line": 78,
        "signature": "return emissionSpeedFactor_FANGO();"
      }
    ],
    "emissionSpeedFactor": [
      {
        "file": "src/CryptoNoteCore/Currency.h",
        "line": 81,
        "signature": "return emissionSpeedFactor();"
      }
    ],
    "difficultyTarget_DRGL": [
      {
        "file": "src/CryptoNoteCore/Currency.h",
        "line": 108,
        "signature": "return difficultyTarget_DRGL();"
      }
    ],
    "difficultyTarget": [
      {
        "file": "src/CryptoNoteCore/Currency.h",
        "line": 111,
        "signature": "return difficultyTarget();"
      }
    ],
    "difficultyBlocksCount2": [
      {
        "file": "src/CryptoNoteCore/Currency.h",
        "line": 125,
        "signature": "return difficultyBlocksCount2();"
      }
    ],
    "difficultyBlocksCount": [
      {
        "file": "src/CryptoNoteCore/Currency.h",
        "line": 129,
        "signature": "return difficultyBlocksCount();"
      }
    ],
    "lockedTxAllowedDeltaSeconds_v2": [
      {
        "file": "src/CryptoNoteCore/Currency.h",
        "line": 147,
        "signature": "return lockedTxAllowedDeltaSeconds_v2();"
      }
    ],
    "lockedTxAllowedDeltaSeconds": [
      {
        "file": "src/CryptoNoteCore/Currency.h",
        "line": 150,
        "signature": "return lockedTxAllowedDeltaSeconds();"
      }
    ],
    "generateGenesisBlock": [
      {
        "file": "src/CryptoNoteCore/Currency.h",
        "line": 231,
        "signature": "bool generateGenesisBlock();"
      }
    ],
    "currency": [
      {
        "file": "src/CryptoNoteCore/Currency.h",
        "line": 328,
        "signature": "Currency currency() {"
      }
    ],
    "generateGenesisTransaction": [
      {
        "file": "src/CryptoNoteCore/Currency.h",
        "line": 335,
        "signature": "Transaction generateGenesisTransaction();"
      }
    ],
    "sumWillOverflow": [
      {
        "file": "src/CryptoNoteCore/DepositIndex.cpp",
        "line": 50,
        "signature": "static inline bool sumWillOverflow(int64_t x, int64_t y) {"
      },
      {
        "file": "src/CryptoNoteCore/DepositIndex.cpp",
        "line": 62,
        "signature": "static inline bool sumWillOverflow(uint64_t x, uint64_t y) {"
      },
      {
        "file": "src/CryptoNoteCore/InvestmentIndex.cpp",
        "line": 50,
        "signature": "static inline bool sumWillOverflow(int64_t x, int64_t y) {"
      },
      {
        "file": "src/CryptoNoteCore/InvestmentIndex.cpp",
        "line": 62,
        "signature": "static inline bool sumWillOverflow(uint64_t x, uint64_t y) {"
      }
    ],
    "DepositIndex": [
      {
        "file": "src/CryptoNoteCore/DepositIndex.h",
        "line": 33,
        "signature": "explicit DepositIndex(DepositHeight expectedHeight);"
      }
    ],
    "popBlocks": [
      {
        "file": "src/CryptoNoteCore/DepositIndex.h",
        "line": 37,
        "signature": "size_t popBlocks(DepositHeight from);"
      },
      {
        "file": "src/CryptoNoteCore/InvestmentIndex.h",
        "line": 37,
        "signature": "size_t popBlocks(DepositHeight from);"
      }
    ],
    "mul": [
      {
        "file": "src/CryptoNoteCore/Difficulty.cpp",
        "line": 36,
        "signature": "static inline void mul(uint64_t a, uint64_t b, uint64_t &low, uint64_t &high) {"
      },
      {
        "file": "src/CryptoNoteCore/Difficulty.cpp",
        "line": 45,
        "signature": "static inline void mul(uint64_t a, uint64_t b, uint64_t &low, uint64_t &high) {"
      },
      {
        "file": "src/crypto/slow-hash.c",
        "line": 1178,
        "signature": "void mul(const uint8_t *ca, const uint8_t *cb, uint8_t *cres) {"
      },
      {
        "file": "src/crypto/slow-hash.c",
        "line": 1421,
        "signature": "static void mul(const uint8_t* a, const uint8_t* b, uint8_t* res) {"
      }
    ],
    "cadd": [
      {
        "file": "src/CryptoNoteCore/Difficulty.cpp",
        "line": 51,
        "signature": "static inline bool cadd(uint64_t a, uint64_t b) {"
      }
    ],
    "cadc": [
      {
        "file": "src/CryptoNoteCore/Difficulty.cpp",
        "line": 55,
        "signature": "static inline bool cadc(uint64_t a, uint64_t b, bool c) {"
      }
    ],
    "blockchainUpdated": [
      {
        "file": "src/CryptoNoteCore/ICoreObserver.h",
        "line": 25,
        "signature": "virtual void blockchainUpdated() {};"
      }
    ],
    "InvestmentIndex": [
      {
        "file": "src/CryptoNoteCore/InvestmentIndex.h",
        "line": 33,
        "signature": "explicit InvestmentIndex(DepositHeight expectedHeight);"
      }
    ],
    "request_block_template": [
      {
        "file": "src/CryptoNoteCore/Miner.cpp",
        "line": 99,
        "signature": "return request_block_template();"
      },
      {
        "file": "src/CryptoNoteCore/Miner.h",
        "line": 59,
        "signature": "bool request_block_template();"
      }
    ],
    "millisecondsSinceEpoch": [
      {
        "file": "src/CryptoNoteCore/Miner.cpp",
        "line": 142,
        "signature": "uint64_t millisecondsSinceEpoch() {"
      }
    ],
    "lb": [
      {
        "file": "src/CryptoNoteCore/Miner.cpp",
        "line": 294,
        "signature": "Block lb(bl); // copy to local block"
      }
    ],
    "set_block_template": [
      {
        "file": "src/CryptoNoteCore/Miner.h",
        "line": 42,
        "signature": "bool set_block_template(const Block& bl, const difficulty_type& diffic);"
      }
    ],
    "on_block_chain_update": [
      {
        "file": "src/CryptoNoteCore/Miner.h",
        "line": 43,
        "signature": "bool on_block_chain_update();"
      }
    ],
    "get_speed": [
      {
        "file": "src/CryptoNoteCore/Miner.h",
        "line": 45,
        "signature": "uint64_t get_speed();"
      }
    ],
    "send_stop_signal": [
      {
        "file": "src/CryptoNoteCore/Miner.h",
        "line": 46,
        "signature": "void send_stop_signal();"
      },
      {
        "file": "src/Wallet/PoolRpcServer.h",
        "line": 52,
        "signature": "void send_stop_signal();"
      },
      {
        "file": "src/Wallet/WalletRpcServer.h",
        "line": 52,
        "signature": "void send_stop_signal();"
      }
    ],
    "is_mining": [
      {
        "file": "src/CryptoNoteCore/Miner.h",
        "line": 48,
        "signature": "bool is_mining();"
      }
    ],
    "on_idle": [
      {
        "file": "src/CryptoNoteCore/Miner.h",
        "line": 49,
        "signature": "bool on_idle();"
      },
      {
        "file": "src/CryptoNoteCore/TransactionPool.h",
        "line": 119,
        "signature": "void on_idle();"
      },
      {
        "file": "src/CryptoNoteProtocol/CryptoNoteProtocolHandler.h",
        "line": 76,
        "signature": "bool on_idle();"
      }
    ],
    "on_synchronized": [
      {
        "file": "src/CryptoNoteCore/Miner.h",
        "line": 50,
        "signature": "void on_synchronized();"
      }
    ],
    "find_nonce_for_given_block": [
      {
        "file": "src/CryptoNoteCore/Miner.h",
        "line": 52,
        "signature": "static bool find_nonce_for_given_block(Crypto::cn_context &context, Block& bl, const difficulty_type& diffic);"
      }
    ],
    "pause": [
      {
        "file": "src/CryptoNoteCore/Miner.h",
        "line": 53,
        "signature": "void pause();"
      }
    ],
    "resume": [
      {
        "file": "src/CryptoNoteCore/Miner.h",
        "line": 54,
        "signature": "void resume();"
      }
    ],
    "do_print_hashrate": [
      {
        "file": "src/CryptoNoteCore/Miner.h",
        "line": 55,
        "signature": "void do_print_hashrate(bool do_hr);"
      }
    ],
    "worker_thread": [
      {
        "file": "src/CryptoNoteCore/Miner.h",
        "line": 58,
        "signature": "bool worker_thread(uint32_t th_local_index);"
      }
    ],
    "merge_hr": [
      {
        "file": "src/CryptoNoteCore/Miner.h",
        "line": 60,
        "signature": "void  merge_hr();"
      }
    ],
    "call": [
      {
        "file": "src/CryptoNoteCore/OnceInInterval.h",
        "line": 32,
        "signature": "bool call(F func) {"
      },
      {
        "file": "src/CryptoNoteCore/TransactionPool.h",
        "line": 61,
        "signature": "bool call(functor_t functr) {"
      }
    ],
    "derivePublicKey": [
      {
        "file": "src/CryptoNoteCore/Transaction.cpp",
        "line": 36,
        "signature": "void derivePublicKey(const AccountPublicAddress& to, const SecretKey& txKey, size_t outputIndex, PublicKey& ephemeralKey) {"
      }
    ],
    "invalidateHash": [
      {
        "file": "src/CryptoNoteCore/Transaction.cpp",
        "line": 122,
        "signature": "void invalidateHash();"
      }
    ],
    "pk": [
      {
        "file": "src/CryptoNoteCore/Transaction.cpp",
        "line": 207,
        "signature": "PublicKey pk(NULL_PUBLIC_KEY);"
      }
    ],
    "addInput": [
      {
        "file": "src/CryptoNoteCore/Transaction.cpp",
        "line": 275,
        "signature": "return addInput(input);"
      }
    ],
    "parse": [
      {
        "file": "src/CryptoNoteCore/TransactionApiExtra.h",
        "line": 32,
        "signature": "bool parse(const std::vector<uint8_t>& extra) {"
      },
      {
        "file": "src/Miner/MiningConfig.h",
        "line": 28,
        "signature": "void parse(int argc, char** argv);"
      },
      {
        "file": "src/Rpc/JsonRpc.h",
        "line": 135,
        "signature": "void parse(const std::string& responseBody) {"
      }
    ],
    "set": [
      {
        "file": "src/CryptoNoteCore/TransactionApiExtra.h",
        "line": 48,
        "signature": "void set(const T& value) {"
      },
      {
        "file": "src/System/Event.h",
        "line": 35,
        "signature": "void set();"
      }
    ],
    "append": [
      {
        "file": "src/CryptoNoteCore/TransactionApiExtra.h",
        "line": 58,
        "signature": "void append(const T& value) {"
      }
    ],
    "ar": [
      {
        "file": "src/CryptoNoteCore/TransactionExtra.cpp",
        "line": 45,
        "signature": "BinaryInputStreamSerializer ar(iss);"
      }
    ],
    "addTransactionPublicKeyToExtra": [
      {
        "file": "src/CryptoNoteCore/TransactionExtra.cpp",
        "line": 151,
        "signature": "return addTransactionPublicKeyToExtra(extra, t.publicKey);"
      },
      {
        "file": "src/CryptoNoteCore/TransactionExtra.h",
        "line": 97,
        "signature": "bool addTransactionPublicKeyToExtra(std::vector<uint8_t>& tx_extra, const Crypto::PublicKey& tx_pub_key);"
      }
    ],
    "addExtraNonceToTransactionExtra": [
      {
        "file": "src/CryptoNoteCore/TransactionExtra.cpp",
        "line": 156,
        "signature": "return addExtraNonceToTransactionExtra(extra, t.nonce);"
      },
      {
        "file": "src/CryptoNoteCore/TransactionExtra.h",
        "line": 98,
        "signature": "bool addExtraNonceToTransactionExtra(std::vector<uint8_t>& tx_extra, const BinaryArray& extra_nonce);"
      }
    ],
    "appendMergeMiningTagToExtra": [
      {
        "file": "src/CryptoNoteCore/TransactionExtra.cpp",
        "line": 161,
        "signature": "return appendMergeMiningTagToExtra(extra, t);"
      },
      {
        "file": "src/CryptoNoteCore/TransactionExtra.h",
        "line": 101,
        "signature": "bool appendMergeMiningTagToExtra(std::vector<uint8_t>& tx_extra, const TransactionExtraMergeMiningTag& mm_tag);"
      }
    ],
    "append_message_to_extra": [
      {
        "file": "src/CryptoNoteCore/TransactionExtra.cpp",
        "line": 166,
        "signature": "return append_message_to_extra(extra, t);"
      },
      {
        "file": "src/CryptoNoteCore/TransactionExtra.h",
        "line": 102,
        "signature": "bool append_message_to_extra(std::vector<uint8_t>& tx_extra, const tx_extra_message& message);"
      }
    ],
    "findTransactionExtraFieldByType": [
      {
        "file": "src/CryptoNoteCore/TransactionExtra.cpp",
        "line": 249,
        "signature": "return findTransactionExtraFieldByType(tx_extra_fields, mm_tag);"
      },
      {
        "file": "src/CryptoNoteCore/TransactionExtra.h",
        "line": 82,
        "signature": "bool findTransactionExtraFieldByType(const std::vector<TransactionExtraField>& tx_extra_fields, T& field) {"
      }
    ],
    "encrypt": [
      {
        "file": "src/CryptoNoteCore/TransactionExtra.h",
        "line": 63,
        "signature": "bool encrypt(std::size_t index, const std::string &message, const AccountPublicAddress* recipient, const KeyPair &txkey);"
      }
    ],
    "parseTransactionExtra": [
      {
        "file": "src/CryptoNoteCore/TransactionExtra.h",
        "line": 93,
        "signature": "bool parseTransactionExtra(const std::vector<uint8_t>& tx_extra, std::vector<TransactionExtraField>& tx_extra_fields);"
      }
    ],
    "writeTransactionExtra": [
      {
        "file": "src/CryptoNoteCore/TransactionExtra.h",
        "line": 94,
        "signature": "bool writeTransactionExtra(std::vector<uint8_t>& tx_extra, const std::vector<TransactionExtraField>& tx_extra_fields);"
      }
    ],
    "setPaymentIdToTransactionExtraNonce": [
      {
        "file": "src/CryptoNoteCore/TransactionExtra.h",
        "line": 99,
        "signature": "void setPaymentIdToTransactionExtraNonce(BinaryArray& extra_nonce, const Crypto::Hash& payment_id);"
      }
    ],
    "appendTTLToExtra": [
      {
        "file": "src/CryptoNoteCore/TransactionExtra.h",
        "line": 104,
        "signature": "void appendTTLToExtra(std::vector<uint8_t>& tx_extra, uint64_t ttl);"
      }
    ],
    "getMergeMiningTagFromExtra": [
      {
        "file": "src/CryptoNoteCore/TransactionExtra.h",
        "line": 105,
        "signature": "bool getMergeMiningTagFromExtra(const std::vector<uint8_t>& tx_extra, TransactionExtraMergeMiningTag& mm_tag);"
      }
    ],
    "createTxExtraWithPaymentId": [
      {
        "file": "src/CryptoNoteCore/TransactionExtra.h",
        "line": 107,
        "signature": "bool createTxExtraWithPaymentId(const std::string& paymentIdString, std::vector<uint8_t>& extra);"
      }
    ],
    "getPaymentIdFromTxExtra": [
      {
        "file": "src/CryptoNoteCore/TransactionExtra.h",
        "line": 109,
        "signature": "bool getPaymentIdFromTxExtra(const std::vector<uint8_t>& extra, Crypto::Hash& paymentId);"
      }
    ],
    "parsePaymentId": [
      {
        "file": "src/CryptoNoteCore/TransactionExtra.h",
        "line": 110,
        "signature": "bool parsePaymentId(const std::string& paymentIdString, Crypto::Hash& paymentId);"
      }
    ],
    "add_tx": [
      {
        "file": "src/CryptoNoteCore/TransactionPool.cpp",
        "line": 306,
        "signature": "return add_tx(tx, h, blobSize, tvc, keeped_by_block, height);"
      },
      {
        "file": "src/CryptoNoteCore/TransactionPool.h",
        "line": 101,
        "signature": "bool add_tx(const Transaction &tx, const Crypto::Hash &id, size_t blobSize, tx_verification_context& tvc, bool keeped_by_block, uint32_t height);"
      },
      {
        "file": "src/CryptoNoteCore/TransactionPool.h",
        "line": 102,
        "signature": "bool add_tx(const Transaction &tx, tx_verification_context& tvc, bool keeped_by_block, uint32_t height);"
      }
    ],
    "checkInfo": [
      {
        "file": "src/CryptoNoteCore/TransactionPool.cpp",
        "line": 365,
        "signature": "TransactionCheckInfo checkInfo(tx);"
      },
      {
        "file": "src/CryptoNoteCore/TransactionPool.cpp",
        "line": 518,
        "signature": "TransactionCheckInfo checkInfo(txd);"
      }
    ],
    "take_tx": [
      {
        "file": "src/CryptoNoteCore/TransactionPool.h",
        "line": 104,
        "signature": "bool take_tx(const Crypto::Hash &id, Transaction &tx, size_t& blobSize, uint64_t& fee);"
      }
    ],
    "on_blockchain_inc": [
      {
        "file": "src/CryptoNoteCore/TransactionPool.h",
        "line": 106,
        "signature": "bool on_blockchain_inc(uint64_t new_block_height, const Crypto::Hash& top_block_id);"
      }
    ],
    "on_blockchain_dec": [
      {
        "file": "src/CryptoNoteCore/TransactionPool.h",
        "line": 107,
        "signature": "bool on_blockchain_dec(uint64_t new_block_height, const Crypto::Hash& top_block_id);"
      }
    ],
    "fill_block_template": [
      {
        "file": "src/CryptoNoteCore/TransactionPool.h",
        "line": 113,
        "signature": "bool fill_block_template(Block &bl, size_t median_size, size_t maxCumulativeSize, uint64_t already_generated_coins, size_t &total_size, uint64_t &fee, uint32_t& height);"
      }
    ],
    "getTransactionIdsByTimestamp": [
      {
        "file": "src/CryptoNoteCore/TransactionPool.h",
        "line": 122,
        "signature": "bool getTransactionIdsByTimestamp(uint64_t timestampBegin, uint64_t timestampEnd, uint32_t transactionsNumberLimit, std::vector<Crypto::Hash>& hashes, uint64_t& transactionsNumberWithinTimestamps);"
      }
    ],
    "getTransaction": [
      {
        "file": "src/CryptoNoteCore/TransactionPool.h",
        "line": 123,
        "signature": "bool getTransaction(const Crypto::Hash &id, Transaction &tx);"
      }
    ],
    "addTransactionInputs": [
      {
        "file": "src/CryptoNoteCore/TransactionPool.h",
        "line": 191,
        "signature": "bool addTransactionInputs(const Crypto::Hash& id, const Transaction& tx, bool keptByBlock);"
      },
      {
        "file": "src/Transfers/TransfersContainer.h",
        "line": 357,
        "signature": "bool addTransactionInputs(const TransactionBlockInfo& block, const ITransactionReader& tx);"
      }
    ],
    "removeTransactionInputs": [
      {
        "file": "src/CryptoNoteCore/TransactionPool.h",
        "line": 193,
        "signature": "bool removeTransactionInputs(const Crypto::Hash& id, const Transaction& tx, bool keptByBlock);"
      }
    ],
    "removeExpiredTransactions": [
      {
        "file": "src/CryptoNoteCore/TransactionPool.h",
        "line": 196,
        "signature": "bool removeExpiredTransactions();"
      }
    ],
    "buildIndices": [
      {
        "file": "src/CryptoNoteCore/TransactionPool.h",
        "line": 198,
        "signature": "void buildIndices();"
      }
    ],
    "checkInputsKeyimagesDiff": [
      {
        "file": "src/CryptoNoteCore/TransactionUtils.cpp",
        "line": 31,
        "signature": "bool checkInputsKeyimagesDiff(const CryptoNote::TransactionPrefix& tx) {"
      },
      {
        "file": "src/CryptoNoteCore/TransactionUtils.h",
        "line": 23,
        "signature": "bool checkInputsKeyimagesDiff(const CryptoNote::TransactionPrefix& tx);"
      }
    ],
    "getRequiredSignaturesCount": [
      {
        "file": "src/CryptoNoteCore/TransactionUtils.cpp",
        "line": 44,
        "signature": "size_t getRequiredSignaturesCount(const TransactionInput& in) {"
      },
      {
        "file": "src/CryptoNoteCore/TransactionUtils.h",
        "line": 26,
        "signature": "size_t getRequiredSignaturesCount(const TransactionInput& in);"
      }
    ],
    "getTransactionInputAmount": [
      {
        "file": "src/CryptoNoteCore/TransactionUtils.cpp",
        "line": 54,
        "signature": "uint64_t getTransactionInputAmount(const TransactionInput& in) {"
      },
      {
        "file": "src/CryptoNoteCore/TransactionUtils.h",
        "line": 27,
        "signature": "uint64_t getTransactionInputAmount(const TransactionInput& in);"
      }
    ],
    "isOutToKey": [
      {
        "file": "src/CryptoNoteCore/TransactionUtils.cpp",
        "line": 120,
        "signature": "bool isOutToKey(const Crypto::PublicKey& spendPublicKey, const Crypto::PublicKey& outKey, const Crypto::KeyDerivation& derivation, size_t keyIndex) {"
      },
      {
        "file": "src/CryptoNoteCore/TransactionUtils.h",
        "line": 32,
        "signature": "bool isOutToKey(const Crypto::PublicKey& spendPublicKey, const Crypto::PublicKey& outKey, const Crypto::KeyDerivation& derivation, size_t keyIndex);"
      }
    ],
    "blockPushed": [
      {
        "file": "src/CryptoNoteCore/UpgradeDetector.h",
        "line": 119,
        "signature": "void blockPushed() {"
      }
    ],
    "blockPopped": [
      {
        "file": "src/CryptoNoteCore/UpgradeDetector.h",
        "line": 165,
        "signature": "void blockPopped() {"
      }
    ],
    "getNumberOfVotes": [
      {
        "file": "src/CryptoNoteCore/UpgradeDetector.h",
        "line": 178,
        "signature": "size_t getNumberOfVotes(uint32_t height) {"
      }
    ],
    "findVotingCompleteHeight": [
      {
        "file": "src/CryptoNoteCore/UpgradeDetector.h",
        "line": 193,
        "signature": "uint32_t findVotingCompleteHeight(uint32_t probableUpgradeHeight) {"
      }
    ],
    "isVotingComplete": [
      {
        "file": "src/CryptoNoteCore/UpgradeDetector.h",
        "line": 206,
        "signature": "bool isVotingComplete(uint32_t height) {"
      }
    ],
    "handler": [
      {
        "file": "src/CryptoNoteProtocol/CryptoNoteProtocolHandler.cpp",
        "line": 246,
        "signature": "return handler(command, req, ctx);"
      }
    ],
    "set_p2p_endpoint": [
      {
        "file": "src/CryptoNoteProtocol/CryptoNoteProtocolHandler.h",
        "line": 67,
        "signature": "void set_p2p_endpoint(IP2pEndpoint* p2p);"
      }
    ],
    "log_connections": [
      {
        "file": "src/CryptoNoteProtocol/CryptoNoteProtocolHandler.h",
        "line": 70,
        "signature": "void log_connections();"
      },
      {
        "file": "src/P2p/NetNode.h",
        "line": 135,
        "signature": "bool log_connections();"
      }
    ],
    "start_sync": [
      {
        "file": "src/CryptoNoteProtocol/CryptoNoteProtocolHandler.h",
        "line": 75,
        "signature": "bool start_sync(CryptoNoteConnectionContext& context);"
      }
    ],
    "onConnectionOpened": [
      {
        "file": "src/CryptoNoteProtocol/CryptoNoteProtocolHandler.h",
        "line": 77,
        "signature": "void onConnectionOpened(CryptoNoteConnectionContext& context);"
      }
    ],
    "onConnectionClosed": [
      {
        "file": "src/CryptoNoteProtocol/CryptoNoteProtocolHandler.h",
        "line": 78,
        "signature": "void onConnectionClosed(CryptoNoteConnectionContext& context);"
      }
    ],
    "get_stat_info": [
      {
        "file": "src/CryptoNoteProtocol/CryptoNoteProtocolHandler.h",
        "line": 79,
        "signature": "bool get_stat_info(core_stat_info& stat_inf);"
      }
    ],
    "get_payload_sync_data": [
      {
        "file": "src/CryptoNoteProtocol/CryptoNoteProtocolHandler.h",
        "line": 80,
        "signature": "bool get_payload_sync_data(CORE_SYNC_DATA& hshd);"
      }
    ],
    "process_payload_sync_data": [
      {
        "file": "src/CryptoNoteProtocol/CryptoNoteProtocolHandler.h",
        "line": 81,
        "signature": "bool process_payload_sync_data(const CORE_SYNC_DATA& hshd, CryptoNoteConnectionContext& context, bool is_inital);"
      }
    ],
    "requestMissingPoolTransactions": [
      {
        "file": "src/CryptoNoteProtocol/CryptoNoteProtocolHandler.h",
        "line": 85,
        "signature": "void requestMissingPoolTransactions(const CryptoNoteConnectionContext& context);"
      }
    ],
    "handle_notify_new_block": [
      {
        "file": "src/CryptoNoteProtocol/CryptoNoteProtocolHandler.h",
        "line": 89,
        "signature": "int handle_notify_new_block(int command, NOTIFY_NEW_BLOCK::request& arg, CryptoNoteConnectionContext& context);"
      }
    ],
    "handle_notify_new_transactions": [
      {
        "file": "src/CryptoNoteProtocol/CryptoNoteProtocolHandler.h",
        "line": 90,
        "signature": "int handle_notify_new_transactions(int command, NOTIFY_NEW_TRANSACTIONS::request& arg, CryptoNoteConnectionContext& context);"
      }
    ],
    "handle_request_get_objects": [
      {
        "file": "src/CryptoNoteProtocol/CryptoNoteProtocolHandler.h",
        "line": 91,
        "signature": "int handle_request_get_objects(int command, NOTIFY_REQUEST_GET_OBJECTS::request& arg, CryptoNoteConnectionContext& context);"
      }
    ],
    "handle_response_get_objects": [
      {
        "file": "src/CryptoNoteProtocol/CryptoNoteProtocolHandler.h",
        "line": 92,
        "signature": "int handle_response_get_objects(int command, NOTIFY_RESPONSE_GET_OBJECTS::request& arg, CryptoNoteConnectionContext& context);"
      }
    ],
    "handle_request_chain": [
      {
        "file": "src/CryptoNoteProtocol/CryptoNoteProtocolHandler.h",
        "line": 93,
        "signature": "int handle_request_chain(int command, NOTIFY_REQUEST_CHAIN::request& arg, CryptoNoteConnectionContext& context);"
      }
    ],
    "handle_response_chain_entry": [
      {
        "file": "src/CryptoNoteProtocol/CryptoNoteProtocolHandler.h",
        "line": 94,
        "signature": "int handle_response_chain_entry(int command, NOTIFY_RESPONSE_CHAIN_ENTRY::request& arg, CryptoNoteConnectionContext& context);"
      }
    ],
    "handle_request_tx_pool": [
      {
        "file": "src/CryptoNoteProtocol/CryptoNoteProtocolHandler.h",
        "line": 95,
        "signature": "int handle_request_tx_pool(int command, NOTIFY_REQUEST_TX_POOL::request &arg, CryptoNoteConnectionContext &context);"
      }
    ],
    "handle_notify_new_lite_block": [
      {
        "file": "src/CryptoNoteProtocol/CryptoNoteProtocolHandler.h",
        "line": 96,
        "signature": "int handle_notify_new_lite_block(int command, NOTIFY_NEW_LITE_BLOCK::request &arg, CryptoNoteConnectionContext &context);"
      }
    ],
    "handle_notify_missing_txs": [
      {
        "file": "src/CryptoNoteProtocol/CryptoNoteProtocolHandler.h",
        "line": 97,
        "signature": "int handle_notify_missing_txs(int command, NOTIFY_MISSING_TXS::request &arg, CryptoNoteConnectionContext &context);"
      }
    ],
    "request_missing_objects": [
      {
        "file": "src/CryptoNoteProtocol/CryptoNoteProtocolHandler.h",
        "line": 106,
        "signature": "bool request_missing_objects(CryptoNoteConnectionContext& context, bool check_having_blocks);"
      }
    ],
    "on_connection_synchronized": [
      {
        "file": "src/CryptoNoteProtocol/CryptoNoteProtocolHandler.h",
        "line": 107,
        "signature": "bool on_connection_synchronized();"
      }
    ],
    "updateObservedHeight": [
      {
        "file": "src/CryptoNoteProtocol/CryptoNoteProtocolHandler.h",
        "line": 108,
        "signature": "void updateObservedHeight(uint32_t peerHeight, const CryptoNoteConnectionContext& context);"
      }
    ],
    "recalculateMaxObservedHeight": [
      {
        "file": "src/CryptoNoteProtocol/CryptoNoteProtocolHandler.h",
        "line": 109,
        "signature": "void recalculateMaxObservedHeight(const CryptoNoteConnectionContext& context);"
      }
    ],
    "processObjects": [
      {
        "file": "src/CryptoNoteProtocol/CryptoNoteProtocolHandler.h",
        "line": 110,
        "signature": "int processObjects(CryptoNoteConnectionContext& context, const std::vector<parsed_block_entry>& blocks);"
      }
    ],
    "doPushLiteBlock": [
      {
        "file": "src/CryptoNoteProtocol/CryptoNoteProtocolHandler.h",
        "line": 114,
        "signature": "int doPushLiteBlock(NOTIFY_NEW_LITE_BLOCK::request block, CryptoNoteConnectionContext &context, std::vector<BinaryArray> missingTxs);"
      }
    ],
    "peerCountUpdated": [
      {
        "file": "src/CryptoNoteProtocol/ICryptoNoteProtocolObserver.h",
        "line": 28,
        "signature": "virtual void peerCountUpdated(size_t count) {}"
      }
    ],
    "lastKnownBlockHeightUpdated": [
      {
        "file": "src/CryptoNoteProtocol/ICryptoNoteProtocolObserver.h",
        "line": 29,
        "signature": "virtual void lastKnownBlockHeightUpdated(uint32_t height) {}"
      }
    ],
    "blockchainSynchronized": [
      {
        "file": "src/CryptoNoteProtocol/ICryptoNoteProtocolObserver.h",
        "line": 30,
        "signature": "virtual void blockchainSynchronized(uint32_t topHeight) {}"
      }
    ],
    "command_line_preprocessor": [
      {
        "file": "src/Daemon/Daemon.cpp",
        "line": 70,
        "signature": "bool command_line_preprocessor(const boost::program_options::variables_map& vm, LoggerRef& logger);"
      },
      {
        "file": "src/Daemon/Daemon.cpp",
        "line": 391,
        "signature": "bool command_line_preprocessor(const boost::program_options::variables_map &vm, LoggerRef &logger) {"
      }
    ],
    "print_genesis_tx_hex": [
      {
        "file": "src/Daemon/Daemon.cpp",
        "line": 72,
        "signature": "void print_genesis_tx_hex() {"
      }
    ],
    "buildLoggerConfiguration": [
      {
        "file": "src/Daemon/Daemon.cpp",
        "line": 83,
        "signature": "JsonValue buildLoggerConfiguration(Level level, const std::string& logfile) {"
      },
      {
        "file": "src/SimpleWallet/SimpleWallet.cpp",
        "line": 281,
        "signature": "JsonValue buildLoggerConfiguration(Level level, const std::string& logfile) {"
      }
    ],
    "loggerConfiguration": [
      {
        "file": "src/Daemon/Daemon.cpp",
        "line": 84,
        "signature": "JsonValue loggerConfiguration(JsonValue::OBJECT);"
      },
      {
        "file": "src/SimpleWallet/SimpleWallet.cpp",
        "line": 282,
        "signature": "JsonValue loggerConfiguration(JsonValue::OBJECT);"
      }
    ],
    "renameDataDir": [
      {
        "file": "src/Daemon/Daemon.cpp",
        "line": 102,
        "signature": "void renameDataDir() {"
      }
    ],
    "dch": [
      {
        "file": "src/Daemon/Daemon.cpp",
        "line": 301,
        "signature": "DaemonCommandsHandler dch(ccore, p2psrv, logManager, cprotocol);"
      }
    ],
    "start_handling": [
      {
        "file": "src/Daemon/DaemonCommandsHandler.h",
        "line": 38,
        "signature": "bool start_handling() {"
      }
    ],
    "stop_handling": [
      {
        "file": "src/Daemon/DaemonCommandsHandler.h",
        "line": 43,
        "signature": "void stop_handling() {"
      }
    ],
    "get_sync_percentage": [
      {
        "file": "src/Daemon/DaemonCommandsHandler.h",
        "line": 57,
        "signature": "float get_sync_percentage(uint64_t height, uint64_t target_height);"
      }
    ],
    "print_block_by_height": [
      {
        "file": "src/Daemon/DaemonCommandsHandler.h",
        "line": 58,
        "signature": "bool print_block_by_height(uint32_t height);"
      }
    ],
    "print_block_by_hash": [
      {
        "file": "src/Daemon/DaemonCommandsHandler.h",
        "line": 59,
        "signature": "bool print_block_by_hash(const std::string& arg);"
      }
    ],
    "calculatePercent": [
      {
        "file": "src/Daemon/DaemonCommandsHandler.h",
        "line": 60,
        "signature": "uint64_t calculatePercent(const CryptoNote::Currency& currency, uint64_t value, uint64_t total);"
      }
    ],
    "exit": [
      {
        "file": "src/Daemon/DaemonCommandsHandler.h",
        "line": 62,
        "signature": "bool exit(const std::vector<std::string>& args);"
      },
      {
        "file": "src/SimpleWallet/SimpleWallet.h",
        "line": 85,
        "signature": "bool exit(const std::vector<std::string> &args);"
      }
    ],
    "help": [
      {
        "file": "src/Daemon/DaemonCommandsHandler.h",
        "line": 63,
        "signature": "bool help(const std::vector<std::string>& args);"
      }
    ],
    "print_pl": [
      {
        "file": "src/Daemon/DaemonCommandsHandler.h",
        "line": 64,
        "signature": "bool print_pl(const std::vector<std::string>& args);"
      }
    ],
    "show_hr": [
      {
        "file": "src/Daemon/DaemonCommandsHandler.h",
        "line": 65,
        "signature": "bool show_hr(const std::vector<std::string>& args);"
      }
    ],
    "hide_hr": [
      {
        "file": "src/Daemon/DaemonCommandsHandler.h",
        "line": 66,
        "signature": "bool hide_hr(const std::vector<std::string>& args);"
      }
    ],
    "rollbackchainto": [
      {
        "file": "src/Daemon/DaemonCommandsHandler.h",
        "line": 67,
        "signature": "bool rollbackchainto(uint32_t height);"
      }
    ],
    "rollback_chain": [
      {
        "file": "src/Daemon/DaemonCommandsHandler.h",
        "line": 68,
        "signature": "bool rollback_chain(const std::vector<std::string>& args);"
      }
    ],
    "print_bc_outs": [
      {
        "file": "src/Daemon/DaemonCommandsHandler.h",
        "line": 69,
        "signature": "bool print_bc_outs(const std::vector<std::string>& args);"
      }
    ],
    "print_cn": [
      {
        "file": "src/Daemon/DaemonCommandsHandler.h",
        "line": 70,
        "signature": "bool print_cn(const std::vector<std::string>& args);"
      }
    ],
    "print_bc": [
      {
        "file": "src/Daemon/DaemonCommandsHandler.h",
        "line": 71,
        "signature": "bool print_bc(const std::vector<std::string>& args);"
      }
    ],
    "print_bci": [
      {
        "file": "src/Daemon/DaemonCommandsHandler.h",
        "line": 72,
        "signature": "bool print_bci(const std::vector<std::string>& args);"
      }
    ],
    "print_height": [
      {
        "file": "src/Daemon/DaemonCommandsHandler.h",
        "line": 73,
        "signature": "bool print_height(const std::vector<std::string>& args);"
      }
    ],
    "set_log": [
      {
        "file": "src/Daemon/DaemonCommandsHandler.h",
        "line": 74,
        "signature": "bool set_log(const std::vector<std::string>& args);"
      },
      {
        "file": "src/SimpleWallet/SimpleWallet.h",
        "line": 107,
        "signature": "bool set_log(const std::vector<std::string> &args);"
      }
    ],
    "print_block": [
      {
        "file": "src/Daemon/DaemonCommandsHandler.h",
        "line": 75,
        "signature": "bool print_block(const std::vector<std::string>& args);"
      }
    ],
    "print_tx": [
      {
        "file": "src/Daemon/DaemonCommandsHandler.h",
        "line": 76,
        "signature": "bool print_tx(const std::vector<std::string>& args);"
      }
    ],
    "print_pool": [
      {
        "file": "src/Daemon/DaemonCommandsHandler.h",
        "line": 77,
        "signature": "bool print_pool(const std::vector<std::string>& args);"
      }
    ],
    "print_pool_sh": [
      {
        "file": "src/Daemon/DaemonCommandsHandler.h",
        "line": 78,
        "signature": "bool print_pool_sh(const std::vector<std::string>& args);"
      }
    ],
    "status": [
      {
        "file": "src/Daemon/DaemonCommandsHandler.h",
        "line": 79,
        "signature": "bool status(const std::vector<std::string>& args);"
      }
    ],
    "start_mining": [
      {
        "file": "src/Daemon/DaemonCommandsHandler.h",
        "line": 82,
        "signature": "bool start_mining(const std::vector<std::string>& args);"
      },
      {
        "file": "src/SimpleWallet/SimpleWallet.h",
        "line": 86,
        "signature": "bool start_mining(const std::vector<std::string> &args);"
      }
    ],
    "stop_mining": [
      {
        "file": "src/Daemon/DaemonCommandsHandler.h",
        "line": 83,
        "signature": "bool stop_mining(const std::vector<std::string>& args);"
      },
      {
        "file": "src/SimpleWallet/SimpleWallet.h",
        "line": 88,
        "signature": "bool stop_mining(const std::vector<std::string> &args);"
      }
    ],
    "print_ban": [
      {
        "file": "src/Daemon/DaemonCommandsHandler.h",
        "line": 84,
        "signature": "bool print_ban(const std::vector<std::string>& args);"
      }
    ],
    "ban": [
      {
        "file": "src/Daemon/DaemonCommandsHandler.h",
        "line": 85,
        "signature": "bool ban(const std::vector<std::string>& args);"
      }
    ],
    "unban": [
      {
        "file": "src/Daemon/DaemonCommandsHandler.h",
        "line": 86,
        "signature": "bool unban(const std::vector<std::string>& args);"
      }
    ],
    "throwIfNotGood": [
      {
        "file": "src/HTTP/HttpParser.cpp",
        "line": 26,
        "signature": "void throwIfNotGood(std::istream& stream) {"
      }
    ],
    "receiveRequest": [
      {
        "file": "src/HTTP/HttpParser.h",
        "line": 34,
        "signature": "void receiveRequest(std::istream& stream, HttpRequest& request);"
      }
    ],
    "receiveResponse": [
      {
        "file": "src/HTTP/HttpParser.h",
        "line": 35,
        "signature": "void receiveResponse(std::istream& stream, HttpResponse& response);"
      }
    ],
    "readWord": [
      {
        "file": "src/HTTP/HttpParser.h",
        "line": 38,
        "signature": "void readWord(std::istream& stream, std::string& word);"
      }
    ],
    "readHeaders": [
      {
        "file": "src/HTTP/HttpParser.h",
        "line": 39,
        "signature": "void readHeaders(std::istream& stream, HttpRequest::Headers &headers);"
      }
    ],
    "readHeader": [
      {
        "file": "src/HTTP/HttpParser.h",
        "line": 40,
        "signature": "bool readHeader(std::istream& stream, std::string& name, std::string& value);"
      }
    ],
    "getBodyLen": [
      {
        "file": "src/HTTP/HttpParser.h",
        "line": 41,
        "signature": "size_t getBodyLen(const HttpRequest::Headers& headers);"
      }
    ],
    "readBody": [
      {
        "file": "src/HTTP/HttpParser.h",
        "line": 42,
        "signature": "void readBody(std::istream& stream, std::string& body, const size_t bodyLen);"
      }
    ],
    "addHeader": [
      {
        "file": "src/HTTP/HttpRequest.h",
        "line": 34,
        "signature": "void addHeader(const std::string& name, const std::string& value);"
      },
      {
        "file": "src/HTTP/HttpResponse.h",
        "line": 37,
        "signature": "void addHeader(const std::string& name, const std::string& value);"
      }
    ],
    "setBody": [
      {
        "file": "src/HTTP/HttpRequest.h",
        "line": 35,
        "signature": "void setBody(const std::string& b);"
      },
      {
        "file": "src/HTTP/HttpResponse.h",
        "line": 38,
        "signature": "void setBody(const std::string& b);"
      }
    ],
    "setUrl": [
      {
        "file": "src/HTTP/HttpRequest.h",
        "line": 36,
        "signature": "void setUrl(const std::string& uri);"
      }
    ],
    "setStatus": [
      {
        "file": "src/HTTP/HttpResponse.h",
        "line": 36,
        "signature": "void setStatus(HTTP_STATUS s);"
      }
    ],
    "doShutdown": [
      {
        "file": "src/InProcessNode/InProcessNode.cpp",
        "line": 86,
        "signature": "return doShutdown();"
      },
      {
        "file": "src/InProcessNode/InProcessNode.h",
        "line": 136,
        "signature": "bool doShutdown();"
      },
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 139,
        "signature": "void doShutdown();"
      }
    ],
    "make_error_code": [
      {
        "file": "src/InProcessNode/InProcessNode.cpp",
        "line": 143,
        "signature": "return make_error_code(CryptoNote::error::NOT_INITIALIZED);"
      },
      {
        "file": "src/InProcessNode/InProcessNode.cpp",
        "line": 150,
        "signature": "return make_error_code(CryptoNote::error::REQUEST_ERROR);"
      },
      {
        "file": "src/InProcessNode/InProcessNode.cpp",
        "line": 154,
        "signature": "return make_error_code(CryptoNote::error::REQUEST_ERROR);"
      },
      {
        "file": "src/InProcessNode/InProcessNode.cpp",
        "line": 178,
        "signature": "return make_error_code(CryptoNote::error::INTERNAL_NODE_ERROR);"
      },
      {
        "file": "src/InProcessNode/InProcessNode.cpp",
        "line": 216,
        "signature": "return make_error_code(CryptoNote::error::NOT_INITIALIZED);"
      },
      {
        "file": "src/InProcessNode/InProcessNode.cpp",
        "line": 223,
        "signature": "return make_error_code(CryptoNote::error::REQUEST_ERROR);"
      },
      {
        "file": "src/InProcessNode/InProcessNode.cpp",
        "line": 228,
        "signature": "return make_error_code(CryptoNote::error::INTERNAL_NODE_ERROR);"
      },
      {
        "file": "src/InProcessNode/InProcessNode.cpp",
        "line": 267,
        "signature": "return make_error_code(CryptoNote::error::NOT_INITIALIZED);"
      },
      {
        "file": "src/InProcessNode/InProcessNode.cpp",
        "line": 278,
        "signature": "return make_error_code(CryptoNote::error::REQUEST_ERROR);"
      },
      {
        "file": "src/InProcessNode/InProcessNode.cpp",
        "line": 285,
        "signature": "return make_error_code(CryptoNote::error::INTERNAL_NODE_ERROR);"
      },
      {
        "file": "src/InProcessNode/InProcessNode.cpp",
        "line": 320,
        "signature": "return make_error_code(CryptoNote::error::NOT_INITIALIZED);"
      },
      {
        "file": "src/InProcessNode/InProcessNode.cpp",
        "line": 329,
        "signature": "return make_error_code(CryptoNote::error::REQUEST_ERROR);"
      },
      {
        "file": "src/InProcessNode/InProcessNode.cpp",
        "line": 333,
        "signature": "return make_error_code(CryptoNote::error::REQUEST_ERROR);"
      },
      {
        "file": "src/InProcessNode/InProcessNode.cpp",
        "line": 337,
        "signature": "return make_error_code(CryptoNote::error::REQUEST_ERROR);"
      },
      {
        "file": "src/InProcessNode/InProcessNode.cpp",
        "line": 346,
        "signature": "return make_error_code(CryptoNote::error::INTERNAL_NODE_ERROR);"
      },
      {
        "file": "src/InProcessNode/InProcessNode.cpp",
        "line": 493,
        "signature": "return make_error_code(CryptoNote::error::INTERNAL_NODE_ERROR);"
      },
      {
        "file": "src/InProcessNode/InProcessNode.cpp",
        "line": 631,
        "signature": "return make_error_code(CryptoNote::error::REQUEST_ERROR);"
      },
      {
        "file": "src/InProcessNode/InProcessNode.cpp",
        "line": 636,
        "signature": "return make_error_code(CryptoNote::error::INTERNAL_NODE_ERROR);"
      },
      {
        "file": "src/InProcessNode/InProcessNode.cpp",
        "line": 640,
        "signature": "return make_error_code(CryptoNote::error::INTERNAL_NODE_ERROR);"
      },
      {
        "file": "src/InProcessNode/InProcessNode.cpp",
        "line": 651,
        "signature": "return make_error_code(CryptoNote::error::INTERNAL_NODE_ERROR);"
      },
      {
        "file": "src/InProcessNode/InProcessNode.cpp",
        "line": 660,
        "signature": "return make_error_code(CryptoNote::error::INTERNAL_NODE_ERROR);"
      },
      {
        "file": "src/InProcessNode/InProcessNode.cpp",
        "line": 713,
        "signature": "return make_error_code(CryptoNote::error::REQUEST_ERROR);"
      },
      {
        "file": "src/InProcessNode/InProcessNode.cpp",
        "line": 717,
        "signature": "return make_error_code(CryptoNote::error::INTERNAL_NODE_ERROR);"
      },
      {
        "file": "src/InProcessNode/InProcessNode.cpp",
        "line": 724,
        "signature": "return make_error_code(CryptoNote::error::INTERNAL_NODE_ERROR);"
      },
      {
        "file": "src/InProcessNode/InProcessNode.cpp",
        "line": 788,
        "signature": "return make_error_code(CryptoNote::error::REQUEST_ERROR);"
      },
      {
        "file": "src/InProcessNode/InProcessNode.cpp",
        "line": 793,
        "signature": "return make_error_code(CryptoNote::error::INTERNAL_NODE_ERROR);"
      },
      {
        "file": "src/InProcessNode/InProcessNode.cpp",
        "line": 800,
        "signature": "return make_error_code(CryptoNote::error::INTERNAL_NODE_ERROR);"
      },
      {
        "file": "src/InProcessNode/InProcessNode.cpp",
        "line": 853,
        "signature": "return make_error_code(CryptoNote::error::REQUEST_ERROR);"
      },
      {
        "file": "src/InProcessNode/InProcessNode.cpp",
        "line": 858,
        "signature": "return make_error_code(CryptoNote::error::INTERNAL_NODE_ERROR);"
      },
      {
        "file": "src/InProcessNode/InProcessNode.cpp",
        "line": 865,
        "signature": "return make_error_code(CryptoNote::error::INTERNAL_NODE_ERROR);"
      },
      {
        "file": "src/InProcessNode/InProcessNode.cpp",
        "line": 912,
        "signature": "return make_error_code(CryptoNote::error::REQUEST_ERROR);"
      },
      {
        "file": "src/InProcessNode/InProcessNode.cpp",
        "line": 917,
        "signature": "return make_error_code(CryptoNote::error::INTERNAL_NODE_ERROR);"
      },
      {
        "file": "src/InProcessNode/InProcessNode.cpp",
        "line": 924,
        "signature": "return make_error_code(CryptoNote::error::INTERNAL_NODE_ERROR);"
      },
      {
        "file": "src/InProcessNode/InProcessNode.cpp",
        "line": 996,
        "signature": "return make_error_code(CryptoNote::error::REQUEST_ERROR);"
      },
      {
        "file": "src/InProcessNode/InProcessNode.cpp",
        "line": 1006,
        "signature": "return make_error_code(CryptoNote::error::INTERNAL_NODE_ERROR);"
      },
      {
        "file": "src/InProcessNode/InProcessNode.cpp",
        "line": 1028,
        "signature": "return make_error_code(CryptoNote::error::REQUEST_ERROR);"
      },
      {
        "file": "src/InProcessNode/InProcessNode.cpp",
        "line": 1033,
        "signature": "return make_error_code(CryptoNote::error::INTERNAL_NODE_ERROR);"
      },
      {
        "file": "src/InProcessNode/InProcessNode.cpp",
        "line": 1040,
        "signature": "return make_error_code(CryptoNote::error::INTERNAL_NODE_ERROR);"
      },
      {
        "file": "src/NodeRpcProxy/NodeRpcProxy.cpp",
        "line": 56,
        "signature": "return make_error_code(error::NODE_BUSY);"
      },
      {
        "file": "src/NodeRpcProxy/NodeRpcProxy.cpp",
        "line": 58,
        "signature": "return make_error_code(error::INTERNAL_NODE_ERROR);"
      },
      {
        "file": "src/NodeRpcProxy/NodeRpcProxy.cpp",
        "line": 612,
        "signature": "return make_error_code(CryptoNote::error::REQUEST_ERROR);"
      },
      {
        "file": "src/NodeRpcProxy/NodeRpcProxy.cpp",
        "line": 618,
        "signature": "return make_error_code(error::INTERNAL_NODE_ERROR);"
      },
      {
        "file": "src/NodeRpcProxy/NodeRpcProxy.cpp",
        "line": 625,
        "signature": "return make_error_code(error::INTERNAL_NODE_ERROR);"
      },
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 652,
        "signature": "return make_error_code(CryptoNote::error::NOT_INITIALIZED);"
      },
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 665,
        "signature": "return make_error_code(CryptoNote::error::INTERNAL_WALLET_ERROR);"
      },
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 699,
        "signature": "return make_error_code(CryptoNote::error::NOT_INITIALIZED);"
      },
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 713,
        "signature": "return make_error_code(CryptoNote::error::INTERNAL_WALLET_ERROR);"
      },
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 730,
        "signature": "return make_error_code(CryptoNote::error::NOT_INITIALIZED);"
      },
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 749,
        "signature": "return make_error_code(CryptoNote::error::INTERNAL_WALLET_ERROR);"
      },
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 767,
        "signature": "return make_error_code(CryptoNote::error::NOT_INITIALIZED);"
      },
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 786,
        "signature": "return make_error_code(CryptoNote::error::INTERNAL_WALLET_ERROR);"
      },
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 803,
        "signature": "return make_error_code(CryptoNote::error::NOT_INITIALIZED);"
      },
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 817,
        "signature": "return make_error_code(CryptoNote::error::INTERNAL_WALLET_ERROR);"
      },
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 837,
        "signature": "return make_error_code(CryptoNote::error::WalletServiceErrorCode::WRONG_KEY_FORMAT);"
      },
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 890,
        "signature": "return make_error_code(CryptoNote::error::WalletServiceErrorCode::DUPLICATE_KEY);"
      },
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 897,
        "signature": "return make_error_code(CryptoNote::error::WalletServiceErrorCode::WRONG_KEY_FORMAT);"
      },
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 925,
        "signature": "return make_error_code(CryptoNote::error::WalletServiceErrorCode::WRONG_KEY_FORMAT);"
      },
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 1091,
        "signature": "return make_error_code(CryptoNote::error::INTERNAL_WALLET_ERROR);"
      },
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 1121,
        "signature": "return make_error_code(CryptoNote::error::INTERNAL_WALLET_ERROR);"
      },
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 1162,
        "signature": "return make_error_code(CryptoNote::error::INTERNAL_WALLET_ERROR);"
      },
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 1199,
        "signature": "return make_error_code(CryptoNote::error::INTERNAL_WALLET_ERROR);"
      },
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 1230,
        "signature": "return make_error_code(CryptoNote::error::INTERNAL_WALLET_ERROR);"
      },
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 1250,
        "signature": "return make_error_code(CryptoNote::error::OBJECT_NOT_FOUND);"
      },
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 1308,
        "signature": "return make_error_code(CryptoNote::error::INTERNAL_WALLET_ERROR);"
      },
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 1330,
        "signature": "return make_error_code(CryptoNote::error::INTERNAL_WALLET_ERROR);"
      },
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 1349,
        "signature": "return make_error_code(CryptoNote::error::DAEMON_NOT_SYNCED);"
      },
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 1392,
        "signature": "return make_error_code(CryptoNote::error::INTERNAL_WALLET_ERROR);"
      },
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 1443,
        "signature": "return make_error_code(CryptoNote::error::INTERNAL_WALLET_ERROR);"
      },
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 1483,
        "signature": "return make_error_code(CryptoNote::error::BAD_INTEGRATED_ADDRESS);"
      },
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 1497,
        "signature": "return make_error_code(CryptoNote::error::BAD_PREFIX);"
      },
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 1508,
        "signature": "return make_error_code(CryptoNote::error::BAD_ADDRESS);"
      },
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 1539,
        "signature": "return make_error_code(CryptoNote::error::INTERNAL_WALLET_ERROR);"
      },
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 1556,
        "signature": "return make_error_code(CryptoNote::error::WalletServiceErrorCode::OBJECT_NOT_FOUND);"
      },
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 1572,
        "signature": "return make_error_code(CryptoNote::error::INTERNAL_WALLET_ERROR);"
      },
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 1589,
        "signature": "return make_error_code(CryptoNote::error::WalletServiceErrorCode::OBJECT_NOT_FOUND);"
      },
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 1605,
        "signature": "return make_error_code(CryptoNote::error::INTERNAL_WALLET_ERROR);"
      },
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 1639,
        "signature": "return make_error_code(CryptoNote::error::INTERNAL_WALLET_ERROR);"
      },
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 1676,
        "signature": "return make_error_code(CryptoNote::error::INTERNAL_WALLET_ERROR);"
      },
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 1699,
        "signature": "return make_error_code(CryptoNote::error::DAEMON_NOT_SYNCED);"
      },
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 1715,
        "signature": "return make_error_code(CryptoNote::error::DEPOSIT_WRONG_TERM);"
      },
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 1721,
        "signature": "return make_error_code(CryptoNote::error::DEPOSIT_TERM_TOO_BIG);"
      },
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 1727,
        "signature": "return make_error_code(CryptoNote::error::DEPOSIT_TERM_TOO_BIG);"
      },
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 1733,
        "signature": "return make_error_code(CryptoNote::error::DEPOSIT_AMOUNT_TOO_SMALL);"
      },
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 1748,
        "signature": "return make_error_code(CryptoNote::error::INTERNAL_WALLET_ERROR);"
      },
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 1794,
        "signature": "return make_error_code(CryptoNote::error::DEPOSIT_TERM_TOO_SMALL);"
      },
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 1799,
        "signature": "return make_error_code(CryptoNote::error::DEPOSIT_TERM_TOO_BIG);"
      },
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 1804,
        "signature": "return make_error_code(CryptoNote::error::DEPOSIT_AMOUNT_TOO_SMALL);"
      },
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 1819,
        "signature": "return make_error_code(CryptoNote::error::INTERNAL_WALLET_ERROR);"
      },
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 1843,
        "signature": "return make_error_code(CryptoNote::error::INTERNAL_WALLET_ERROR);"
      },
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 1884,
        "signature": "return make_error_code(CryptoNote::error::DAEMON_NOT_SYNCED);"
      },
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 1905,
        "signature": "return make_error_code(CryptoNote::error::INTERNAL_WALLET_ERROR);"
      },
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 1924,
        "signature": "return make_error_code(CryptoNote::error::DAEMON_NOT_SYNCED);"
      },
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 1946,
        "signature": "return make_error_code(CryptoNote::error::INTERNAL_WALLET_ERROR);"
      },
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 2006,
        "signature": "return make_error_code(CryptoNote::error::WalletServiceErrorCode::WRONG_KEY_FORMAT);"
      },
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 2013,
        "signature": "return make_error_code(CryptoNote::error::WalletServiceErrorCode::WRONG_KEY_FORMAT);"
      },
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 2027,
        "signature": "return make_error_code(CryptoNote::error::INTERNAL_WALLET_ERROR);"
      },
      {
        "file": "src/WalletLegacy/WalletHelper.cpp",
        "line": 46,
        "signature": "return make_error_code(std::errc::invalid_argument);"
      },
      {
        "file": "src/WalletLegacy/WalletLegacy.cpp",
        "line": 435,
        "signature": "return make_error_code(CryptoNote::error::WRONG_PASSWORD);"
      },
      {
        "file": "src/WalletLegacy/WalletLegacy.cpp",
        "line": 916,
        "signature": "return make_error_code(CryptoNote::error::TX_CANCEL_IMPOSSIBLE);"
      }
    ],
    "getNewBlocksAsync": [
      {
        "file": "src/InProcessNode/InProcessNode.h",
        "line": 89,
        "signature": "void getNewBlocksAsync(std::vector<Crypto::Hash>& knownBlockIds, std::vector<CryptoNote::block_complete_entry>& newBlocks, uint32_t& startHeight, const Callback& callback);"
      }
    ],
    "getTransactionOutsGlobalIndicesAsync": [
      {
        "file": "src/InProcessNode/InProcessNode.h",
        "line": 92,
        "signature": "void getTransactionOutsGlobalIndicesAsync(const Crypto::Hash& transactionHash, std::vector<uint32_t>& outsGlobalIndices, const Callback& callback);"
      }
    ],
    "relayTransactionAsync": [
      {
        "file": "src/InProcessNode/InProcessNode.h",
        "line": 100,
        "signature": "void relayTransactionAsync(const CryptoNote::Transaction& transaction, const Callback& callback);"
      }
    ],
    "getOutByMSigGIndexAsync": [
      {
        "file": "src/InProcessNode/InProcessNode.h",
        "line": 110,
        "signature": "void getOutByMSigGIndexAsync(uint64_t amount, uint32_t gindex, MultisignatureOutput& out, const Callback& callback);"
      }
    ],
    "getBlocksAsync": [
      {
        "file": "src/InProcessNode/InProcessNode.h",
        "line": 112,
        "signature": "void getBlocksAsync(const std::vector<uint32_t>& blockHeights, std::vector<std::vector<BlockDetails>>& blocks, const Callback& callback);"
      },
      {
        "file": "src/InProcessNode/InProcessNode.h",
        "line": 115,
        "signature": "void getBlocksAsync(const std::vector<Crypto::Hash>& blockHashes, std::vector<BlockDetails>& blocks, const Callback& callback);"
      },
      {
        "file": "src/InProcessNode/InProcessNode.h",
        "line": 118,
        "signature": "void getBlocksAsync(uint64_t timestampBegin, uint64_t timestampEnd, uint32_t blocksNumberLimit, std::vector<BlockDetails>& blocks, uint32_t& blocksNumberWithinTimestamps, const Callback& callback);"
      }
    ],
    "getTransactionsAsync": [
      {
        "file": "src/InProcessNode/InProcessNode.h",
        "line": 121,
        "signature": "void getTransactionsAsync(const std::vector<Crypto::Hash>& transactionHashes, std::vector<TransactionDetails>& transactions, const Callback& callback);"
      }
    ],
    "getPoolTransactionsAsync": [
      {
        "file": "src/InProcessNode/InProcessNode.h",
        "line": 124,
        "signature": "void getPoolTransactionsAsync(uint64_t timestampBegin, uint64_t timestampEnd, uint32_t transactionsNumberLimit, std::vector<TransactionDetails>& transactions, uint64_t& transactionsNumberWithinTimestamps, const Callback& callback);"
      }
    ],
    "getTransactionsByPaymentIdAsync": [
      {
        "file": "src/InProcessNode/InProcessNode.h",
        "line": 127,
        "signature": "void getTransactionsByPaymentIdAsync(const Crypto::Hash& paymentId, std::vector<TransactionDetails>& transactions, const Callback& callback);"
      }
    ],
    "isSynchronizedAsync": [
      {
        "file": "src/InProcessNode/InProcessNode.h",
        "line": 130,
        "signature": "void isSynchronizedAsync(bool& syncStatus, const Callback& callback);"
      }
    ],
    "getTransactionAsync": [
      {
        "file": "src/InProcessNode/InProcessNode.h",
        "line": 133,
        "signature": "void getTransactionAsync(const Crypto::Hash &transactionHash, CryptoNote::Transaction &transaction, const Callback &callback);"
      }
    ],
    "workerFunc": [
      {
        "file": "src/InProcessNode/InProcessNode.h",
        "line": 135,
        "signature": "void workerFunc();"
      },
      {
        "file": "src/Miner/Miner.h",
        "line": 63,
        "signature": "void workerFunc(const Block& blockTemplate, difficulty_type difficulty, uint32_t nonceStep);"
      }
    ],
    "error": [
      {
        "file": "src/JsonRpcServer/JsonRpcServer.cpp",
        "line": 105,
        "signature": "JsonValue error(JsonValue::OBJECT);"
      },
      {
        "file": "src/JsonRpcServer/JsonRpcServer.cpp",
        "line": 128,
        "signature": "JsonValue error(JsonValue::OBJECT);"
      },
      {
        "file": "src/JsonRpcServer/JsonRpcServer.cpp",
        "line": 153,
        "signature": "JsonValue error(JsonValue::OBJECT);"
      },
      {
        "file": "src/JsonRpcServer/JsonRpcServer.cpp",
        "line": 178,
        "signature": "JsonValue error(JsonValue::OBJECT);"
      }
    ],
    "data": [
      {
        "file": "src/JsonRpcServer/JsonRpcServer.cpp",
        "line": 113,
        "signature": "JsonValue data(JsonValue::OBJECT);"
      }
    ],
    "makeErrorResponse": [
      {
        "file": "src/JsonRpcServer/JsonRpcServer.h",
        "line": 52,
        "signature": "static void makeErrorResponse(const std::error_code& ec, Common::JsonValue& resp);"
      }
    ],
    "makeMethodNotFoundResponse": [
      {
        "file": "src/JsonRpcServer/JsonRpcServer.h",
        "line": 53,
        "signature": "static void makeMethodNotFoundResponse(Common::JsonValue& resp);"
      }
    ],
    "makeGenericErrorReponse": [
      {
        "file": "src/JsonRpcServer/JsonRpcServer.h",
        "line": 54,
        "signature": "static void makeGenericErrorReponse(Common::JsonValue& resp, const char* what, int errorCode = -32001);"
      }
    ],
    "fillJsonResponse": [
      {
        "file": "src/JsonRpcServer/JsonRpcServer.h",
        "line": 55,
        "signature": "static void fillJsonResponse(const Common::JsonValue& v, Common::JsonValue& resp);"
      }
    ],
    "prepareJsonResponse": [
      {
        "file": "src/JsonRpcServer/JsonRpcServer.h",
        "line": 56,
        "signature": "static void prepareJsonResponse(const Common::JsonValue& req, Common::JsonValue& resp);"
      }
    ],
    "makeJsonParsingErrorResponse": [
      {
        "file": "src/JsonRpcServer/JsonRpcServer.h",
        "line": 57,
        "signature": "static void makeJsonParsingErrorResponse(Common::JsonValue& resp);"
      }
    ],
    "enableCategory": [
      {
        "file": "src/Logging/CommonLogger.h",
        "line": 29,
        "signature": "virtual void enableCategory(const std::string& category);"
      }
    ],
    "disableCategory": [
      {
        "file": "src/Logging/CommonLogger.h",
        "line": 30,
        "signature": "virtual void disableCategory(const std::string& category);"
      }
    ],
    "setMaxLevel": [
      {
        "file": "src/Logging/CommonLogger.h",
        "line": 31,
        "signature": "virtual void setMaxLevel(Level level);"
      }
    ],
    "setPattern": [
      {
        "file": "src/Logging/CommonLogger.h",
        "line": 33,
        "signature": "void setPattern(const std::string& pattern);"
      }
    ],
    "doLogString": [
      {
        "file": "src/Logging/CommonLogger.h",
        "line": 41,
        "signature": "virtual void doLogString(const std::string& message);"
      }
    ],
    "addLogger": [
      {
        "file": "src/Logging/LoggerGroup.h",
        "line": 29,
        "signature": "void addLogger(ILogger& logger);"
      }
    ],
    "removeLogger": [
      {
        "file": "src/Logging/LoggerGroup.h",
        "line": 30,
        "signature": "void removeLogger(ILogger& logger);"
      }
    ],
    "configure": [
      {
        "file": "src/Logging/LoggerManager.h",
        "line": 31,
        "signature": "void configure(const Common::JsonValue& val);"
      }
    ],
    "LoggerMessage": [
      {
        "file": "src/Logging/LoggerRef.cpp",
        "line": 26,
        "signature": "return LoggerMessage(*logger, category, level, color);"
      }
    ],
    "attachToStream": [
      {
        "file": "src/Logging/StreamLogger.h",
        "line": 29,
        "signature": "void attachToStream(std::ostream& stream);"
      }
    ],
    "waitBlockchainUpdate": [
      {
        "file": "src/Miner/BlockchainMonitor.h",
        "line": 32,
        "signature": "void waitBlockchainUpdate();"
      }
    ],
    "mine": [
      {
        "file": "src/Miner/Miner.h",
        "line": 44,
        "signature": "Block mine(const BlockMiningParameters& blockMiningParameters, size_t threadCount);"
      }
    ],
    "runWorkers": [
      {
        "file": "src/Miner/Miner.h",
        "line": 62,
        "signature": "void runWorkers(BlockMiningParameters blockMiningParameters, size_t threadCount);"
      }
    ],
    "setStateBlockFound": [
      {
        "file": "src/Miner/Miner.h",
        "line": 64,
        "signature": "bool setStateBlockFound();"
      }
    ],
    "BlockMinedEvent": [
      {
        "file": "src/Miner/MinerManager.cpp",
        "line": 39,
        "signature": "MinerEvent BlockMinedEvent() {"
      }
    ],
    "BlockchainUpdatedEvent": [
      {
        "file": "src/Miner/MinerManager.cpp",
        "line": 45,
        "signature": "MinerEvent BlockchainUpdatedEvent() {"
      }
    ],
    "adjustMergeMiningTag": [
      {
        "file": "src/Miner/MinerManager.cpp",
        "line": 51,
        "signature": "void adjustMergeMiningTag(Block& blockTemplate) {"
      }
    ],
    "client": [
      {
        "file": "src/Miner/MinerManager.cpp",
        "line": 210,
        "signature": "HttpClient client(m_dispatcher, daemonHost, daemonPort);"
      },
      {
        "file": "src/Miner/MinerManager.cpp",
        "line": 230,
        "signature": "HttpClient client(dispatcher, daemonHost, daemonPort);"
      }
    ],
    "eventLoop": [
      {
        "file": "src/Miner/MinerManager.h",
        "line": 60,
        "signature": "void eventLoop();"
      }
    ],
    "waitEvent": [
      {
        "file": "src/Miner/MinerManager.h",
        "line": 61,
        "signature": "MinerEvent waitEvent();"
      }
    ],
    "pushEvent": [
      {
        "file": "src/Miner/MinerManager.h",
        "line": 62,
        "signature": "void pushEvent(MinerEvent&& event);"
      },
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 254,
        "signature": "void pushEvent(const WalletEvent &event);"
      }
    ],
    "startMining": [
      {
        "file": "src/Miner/MinerManager.h",
        "line": 64,
        "signature": "void startMining(const CryptoNote::BlockMiningParameters& params);"
      }
    ],
    "stopMining": [
      {
        "file": "src/Miner/MinerManager.h",
        "line": 65,
        "signature": "void stopMining();"
      }
    ],
    "startBlockchainMonitoring": [
      {
        "file": "src/Miner/MinerManager.h",
        "line": 67,
        "signature": "void startBlockchainMonitoring();"
      }
    ],
    "stopBlockchainMonitoring": [
      {
        "file": "src/Miner/MinerManager.h",
        "line": 68,
        "signature": "void stopBlockchainMonitoring();"
      }
    ],
    "submitBlock": [
      {
        "file": "src/Miner/MinerManager.h",
        "line": 70,
        "signature": "bool submitBlock(const CryptoNote::Block& minedBlock, const std::string& daemonHost, uint16_t daemonPort);"
      }
    ],
    "parseDaemonAddress": [
      {
        "file": "src/Miner/MiningConfig.cpp",
        "line": 43,
        "signature": "void parseDaemonAddress(const std::string& daemonAddress, std::string& daemonHost, uint16_t& daemonPort) {"
      }
    ],
    "printHelp": [
      {
        "file": "src/Miner/MiningConfig.h",
        "line": 29,
        "signature": "void printHelp();"
      }
    ],
    "checksum_test": [
      {
        "file": "src/Mnemonics/electrum-words.cpp",
        "line": 74,
        "signature": "bool checksum_test(std::vector<std::string> seed, uint32_t unique_prefix_length);"
      }
    ],
    "get_language_list": [
      {
        "file": "src/Mnemonics/electrum-words.h",
        "line": 110,
        "signature": "void get_language_list(std::vector<std::string> &languages);"
      }
    ],
    "get_is_old_style_seed": [
      {
        "file": "src/Mnemonics/electrum-words.h",
        "line": 117,
        "signature": "bool get_is_old_style_seed(std::string seed);"
      }
    ],
    "contextGroup": [
      {
        "file": "src/NodeRpcProxy/NodeRpcProxy.cpp",
        "line": 136,
        "signature": "ContextGroup contextGroup(dispatcher);"
      }
    ],
    "httpClient": [
      {
        "file": "src/NodeRpcProxy/NodeRpcProxy.cpp",
        "line": 138,
        "signature": "HttpClient httpClient(dispatcher, m_nodeHost, m_nodePort);"
      },
      {
        "file": "src/SimpleWallet/SimpleWallet.cpp",
        "line": 1173,
        "signature": "HttpClient httpClient(m_dispatcher, m_daemon_host, m_daemon_port);"
      },
      {
        "file": "src/SimpleWallet/SimpleWallet.cpp",
        "line": 1198,
        "signature": "HttpClient httpClient(m_dispatcher, m_daemon_host, m_daemon_port);"
      },
      {
        "file": "src/SimpleWallet/SimpleWallet.cpp",
        "line": 1792,
        "signature": "HttpClient httpClient(m_dispatcher, m_daemon_host, m_daemon_port);"
      }
    ],
    "httpEvent": [
      {
        "file": "src/NodeRpcProxy/NodeRpcProxy.cpp",
        "line": 140,
        "signature": "Event httpEvent(dispatcher);"
      }
    ],
    "pullTimer": [
      {
        "file": "src/NodeRpcProxy/NodeRpcProxy.cpp",
        "line": 154,
        "signature": "Timer pullTimer(*m_dispatcher);"
      }
    ],
    "jsonCommand": [
      {
        "file": "src/NodeRpcProxy/NodeRpcProxy.cpp",
        "line": 480,
        "signature": "return jsonCommand(\"/sendrawtransaction\", req, rsp);"
      }
    ],
    "eventLock": [
      {
        "file": "src/NodeRpcProxy/NodeRpcProxy.cpp",
        "line": 687,
        "signature": "EventLock eventLock(*m_httpEvent);"
      },
      {
        "file": "src/NodeRpcProxy/NodeRpcProxy.cpp",
        "line": 704,
        "signature": "EventLock eventLock(*m_httpEvent);"
      },
      {
        "file": "src/NodeRpcProxy/NodeRpcProxy.cpp",
        "line": 721,
        "signature": "EventLock eventLock(*m_httpEvent);"
      }
    ],
    "connectionStatusUpdated": [
      {
        "file": "src/NodeRpcProxy/NodeRpcProxy.h",
        "line": 43,
        "signature": "virtual void connectionStatusUpdated(bool connected) {}"
      }
    ],
    "rpcTimeout": [
      {
        "file": "src/NodeRpcProxy/NodeRpcProxy.h",
        "line": 84,
        "signature": "void rpcTimeout(unsigned int val) { m_rpcTimeout = val; }"
      }
    ],
    "resetInternalState": [
      {
        "file": "src/NodeRpcProxy/NodeRpcProxy.h",
        "line": 87,
        "signature": "void resetInternalState();"
      }
    ],
    "workerThread": [
      {
        "file": "src/NodeRpcProxy/NodeRpcProxy.h",
        "line": 88,
        "signature": "void workerThread(const Callback& initialized_callback);"
      }
    ],
    "pullNodeStatusAndScheduleTheNext": [
      {
        "file": "src/NodeRpcProxy/NodeRpcProxy.h",
        "line": 91,
        "signature": "void pullNodeStatusAndScheduleTheNext();"
      }
    ],
    "updateNodeStatus": [
      {
        "file": "src/NodeRpcProxy/NodeRpcProxy.h",
        "line": 92,
        "signature": "void updateNodeStatus();"
      }
    ],
    "updateBlockchainStatus": [
      {
        "file": "src/NodeRpcProxy/NodeRpcProxy.h",
        "line": 93,
        "signature": "void updateBlockchainStatus();"
      }
    ],
    "updatePoolStatus": [
      {
        "file": "src/NodeRpcProxy/NodeRpcProxy.h",
        "line": 94,
        "signature": "bool updatePoolStatus();"
      }
    ],
    "updatePeerCount": [
      {
        "file": "src/NodeRpcProxy/NodeRpcProxy.h",
        "line": 95,
        "signature": "void updatePeerCount(size_t peerCount);"
      }
    ],
    "updatePoolState": [
      {
        "file": "src/NodeRpcProxy/NodeRpcProxy.h",
        "line": 96,
        "signature": "void updatePoolState(const std::vector<std::unique_ptr<ITransactionReader>>& addedTxs, const std::vector<Crypto::Hash>& deletedTxsIds);"
      }
    ],
    "validAddress": [
      {
        "file": "src/Optimizer/Optimizer.cpp",
        "line": 62,
        "signature": "bool validAddress(po::variables_map& vm, const std::string& address) {"
      }
    ],
    "isWalletEligible": [
      {
        "file": "src/Optimizer/Optimizer.cpp",
        "line": 114,
        "signature": "bool isWalletEligible(po::variables_map& vm, std::string address) {"
      }
    ],
    "optimizeWallet": [
      {
        "file": "src/Optimizer/Optimizer.cpp",
        "line": 150,
        "signature": "bool optimizeWallet(po::variables_map& vm, std::string address) {"
      }
    ],
    "processWallets": [
      {
        "file": "src/Optimizer/Optimizer.cpp",
        "line": 188,
        "signature": "void processWallets(po::variables_map& vm, std::vector<std::string>& containerAddresses, int& optimized, int& notOptimized, const std::chrono::time_point<std::chrono::steady_clock>& start) {"
      }
    ],
    "canConnect": [
      {
        "file": "src/Optimizer/Optimizer.cpp",
        "line": 246,
        "signature": "bool canConnect(po::variables_map& vm) {"
      }
    ],
    "run_optimizer": [
      {
        "file": "src/Optimizer/Optimizer.cpp",
        "line": 268,
        "signature": "bool run_optimizer(po::variables_map& vm) {"
      }
    ],
    "invoke": [
      {
        "file": "src/P2p/LevinProtocol.h",
        "line": 51,
        "signature": "bool invoke(uint32_t command, const Request& request, Response& response) {"
      }
    ],
    "readCommand": [
      {
        "file": "src/P2p/LevinProtocol.h",
        "line": 78,
        "signature": "bool readCommand(Command& cmd);"
      },
      {
        "file": "src/P2p/P2pContext.h",
        "line": 66,
        "signature": "bool readCommand(LevinProtocol::Command& cmd);"
      }
    ],
    "sendReply": [
      {
        "file": "src/P2p/LevinProtocol.h",
        "line": 81,
        "signature": "void sendReply(uint32_t command, const BinaryArray& out, int32_t returnCode);"
      }
    ],
    "readStrict": [
      {
        "file": "src/P2p/LevinProtocol.h",
        "line": 108,
        "signature": "bool readStrict(uint8_t* ptr, size_t size);"
      }
    ],
    "writeStrict": [
      {
        "file": "src/P2p/LevinProtocol.h",
        "line": 109,
        "signature": "void writeStrict(const uint8_t* ptr, size_t size);"
      }
    ],
    "get_random_index_with_fixed_probability": [
      {
        "file": "src/P2p/NetNode.cpp",
        "line": 54,
        "signature": "size_t get_random_index_with_fixed_probability(size_t max_index) {"
      }
    ],
    "addPortMapping": [
      {
        "file": "src/P2p/NetNode.cpp",
        "line": 64,
        "signature": "void addPortMapping(Logging::LoggerRef& logger, uint32_t port) {"
      }
    ],
    "parse_peer_from_string": [
      {
        "file": "src/P2p/NetNode.cpp",
        "line": 98,
        "signature": "bool parse_peer_from_string(NetworkAddress& pe, const std::string& node_addr) {"
      }
    ],
    "invokeAdaptor": [
      {
        "file": "src/P2p/NetNode.cpp",
        "line": 192,
        "signature": "int invokeAdaptor(const BinaryArray& reqBuf, BinaryArray& resBuf, P2pConnectionContext& ctx, Handler handler) {"
      }
    ],
    "inputStream": [
      {
        "file": "src/P2p/NetNode.cpp",
        "line": 310,
        "signature": "StdInputStream inputStream(p2p_data);"
      },
      {
        "file": "src/Transfers/TransfersSynchronizer.cpp",
        "line": 228,
        "signature": "StdInputStream inputStream(is);"
      }
    ],
    "a": [
      {
        "file": "src/P2p/NetNode.cpp",
        "line": 311,
        "signature": "BinaryInputStreamSerializer a(inputStream);"
      },
      {
        "file": "src/P2p/NetNode.cpp",
        "line": 683,
        "signature": "BinaryOutputStreamSerializer a(stream);"
      },
      {
        "file": "src/P2p/P2pNode.cpp",
        "line": 190,
        "signature": "BinaryOutputStreamSerializer a(stream);"
      },
      {
        "file": "src/P2p/P2pNode.cpp",
        "line": 196,
        "signature": "BinaryInputStreamSerializer a(stream);"
      }
    ],
    "unblock_host": [
      {
        "file": "src/P2p/NetNode.cpp",
        "line": 453,
        "signature": "return unblock_host(address_ip);"
      },
      {
        "file": "src/P2p/NetNode.cpp",
        "line": 467,
        "signature": "return unblock_host(address_ip);"
      },
      {
        "file": "src/P2p/NetNode.h",
        "line": 189,
        "signature": "bool unblock_host(const uint32_t address_ip);"
      }
    ],
    "block_host": [
      {
        "file": "src/P2p/NetNode.cpp",
        "line": 461,
        "signature": "return block_host(address_ip, seconds);"
      },
      {
        "file": "src/P2p/NetNode.h",
        "line": 188,
        "signature": "bool block_host(const uint32_t address_ip, time_t seconds = P2P_IP_BLOCKTIME);"
      }
    ],
    "store_config": [
      {
        "file": "src/P2p/NetNode.cpp",
        "line": 661,
        "signature": "return store_config();"
      },
      {
        "file": "src/P2p/NetNode.h",
        "line": 167,
        "signature": "bool store_config();"
      }
    ],
    "handshake": [
      {
        "file": "src/P2p/NetNode.cpp",
        "line": 883,
        "signature": "return handshake(proto, ctx, just_take_peerlist);"
      },
      {
        "file": "src/P2p/NetNode.h",
        "line": 171,
        "signature": "bool handshake(CryptoNote::LevinProtocol& proto, P2pConnectionContext& context, bool just_take_peerlist = false);"
      }
    ],
    "proto": [
      {
        "file": "src/P2p/NetNode.cpp",
        "line": 1624,
        "signature": "LevinProtocol proto(ctx.connection);"
      },
      {
        "file": "src/P2p/NetNode.cpp",
        "line": 1685,
        "signature": "LevinProtocol proto(ctx.connection);"
      },
      {
        "file": "src/P2p/P2pContext.cpp",
        "line": 117,
        "signature": "LevinProtocol proto(connection);"
      },
      {
        "file": "src/P2p/P2pNode.cpp",
        "line": 524,
        "signature": "LevinProtocol proto(connection);"
      }
    ],
    "pushMessage": [
      {
        "file": "src/P2p/NetNode.h",
        "line": 101,
        "signature": "bool pushMessage(P2pMessage&& msg);"
      }
    ],
    "interrupt": [
      {
        "file": "src/P2p/NetNode.h",
        "line": 103,
        "signature": "void interrupt();"
      },
      {
        "file": "src/Platform/Linux/System/Dispatcher.h",
        "line": 73,
        "signature": "void interrupt();"
      },
      {
        "file": "src/Platform/Linux/System/Dispatcher.h",
        "line": 74,
        "signature": "void interrupt(NativeContext* context);"
      },
      {
        "file": "src/Platform/OSX/System/Dispatcher.h",
        "line": 64,
        "signature": "void interrupt();"
      },
      {
        "file": "src/Platform/OSX/System/Dispatcher.h",
        "line": 65,
        "signature": "void interrupt(NativeContext* context);"
      },
      {
        "file": "src/Platform/Windows/System/Dispatcher.h",
        "line": 57,
        "signature": "void interrupt();"
      },
      {
        "file": "src/Platform/Windows/System/Dispatcher.h",
        "line": 58,
        "signature": "void interrupt(NativeContext* context);"
      },
      {
        "file": "src/System/Context.h",
        "line": 66,
        "signature": "void interrupt() {"
      },
      {
        "file": "src/System/Context.h",
        "line": 128,
        "signature": "void interrupt() {"
      },
      {
        "file": "src/System/ContextGroup.h",
        "line": 32,
        "signature": "void interrupt();"
      }
    ],
    "run": [
      {
        "file": "src/P2p/NetNode.h",
        "line": 124,
        "signature": "bool run();"
      },
      {
        "file": "src/PaymentGateService/PaymentGateService.h",
        "line": 42,
        "signature": "void run();"
      },
      {
        "file": "src/SimpleWallet/SimpleWallet.h",
        "line": 54,
        "signature": "bool run();"
      },
      {
        "file": "src/Wallet/PoolRpcServer.h",
        "line": 51,
        "signature": "bool run();"
      },
      {
        "file": "src/Wallet/WalletRpcServer.h",
        "line": 51,
        "signature": "bool run();"
      }
    ],
    "sendStopSignal": [
      {
        "file": "src/P2p/NetNode.h",
        "line": 127,
        "signature": "bool sendStopSignal();"
      }
    ],
    "get_this_peer_port": [
      {
        "file": "src/P2p/NetNode.h",
        "line": 128,
        "signature": "uint32_t get_this_peer_port(){return m_listeningPort;}"
      }
    ],
    "log_peerlist": [
      {
        "file": "src/P2p/NetNode.h",
        "line": 134,
        "signature": "bool log_peerlist();"
      }
    ],
    "log_banlist": [
      {
        "file": "src/P2p/NetNode.h",
        "line": 136,
        "signature": "bool log_banlist();"
      }
    ],
    "get_outgoing_connections_count": [
      {
        "file": "src/P2p/NetNode.h",
        "line": 138,
        "signature": "size_t get_outgoing_connections_count();"
      }
    ],
    "handle_handshake": [
      {
        "file": "src/P2p/NetNode.h",
        "line": 155,
        "signature": "int handle_handshake(int command, COMMAND_HANDSHAKE::request& arg, COMMAND_HANDSHAKE::response& rsp, P2pConnectionContext& context);"
      }
    ],
    "handle_timed_sync": [
      {
        "file": "src/P2p/NetNode.h",
        "line": 156,
        "signature": "int handle_timed_sync(int command, COMMAND_TIMED_SYNC::request& arg, COMMAND_TIMED_SYNC::response& rsp, P2pConnectionContext& context);"
      }
    ],
    "handle_ping": [
      {
        "file": "src/P2p/NetNode.h",
        "line": 157,
        "signature": "int handle_ping(int command, COMMAND_PING::request& arg, COMMAND_PING::response& rsp, P2pConnectionContext& context);"
      }
    ],
    "handle_get_stat_info": [
      {
        "file": "src/P2p/NetNode.h",
        "line": 160,
        "signature": "int handle_get_stat_info(int command, COMMAND_REQUEST_STAT_INFO::request& arg, COMMAND_REQUEST_STAT_INFO::response& rsp, P2pConnectionContext& context);"
      }
    ],
    "handle_get_network_state": [
      {
        "file": "src/P2p/NetNode.h",
        "line": 161,
        "signature": "int handle_get_network_state(int command, COMMAND_REQUEST_NETWORK_STATE::request& arg, COMMAND_REQUEST_NETWORK_STATE::response& rsp, P2pConnectionContext& context);"
      }
    ],
    "handle_get_peer_id": [
      {
        "file": "src/P2p/NetNode.h",
        "line": 162,
        "signature": "int handle_get_peer_id(int command, COMMAND_REQUEST_PEER_ID::request& arg, COMMAND_REQUEST_PEER_ID::response& rsp, P2pConnectionContext& context);"
      }
    ],
    "init_config": [
      {
        "file": "src/P2p/NetNode.h",
        "line": 165,
        "signature": "bool init_config();"
      }
    ],
    "make_default_config": [
      {
        "file": "src/P2p/NetNode.h",
        "line": 166,
        "signature": "bool make_default_config();"
      }
    ],
    "check_trust": [
      {
        "file": "src/P2p/NetNode.h",
        "line": 168,
        "signature": "bool check_trust(const proof_of_trust& tr);"
      }
    ],
    "initUpnp": [
      {
        "file": "src/P2p/NetNode.h",
        "line": 169,
        "signature": "void initUpnp();"
      }
    ],
    "timedSync": [
      {
        "file": "src/P2p/NetNode.h",
        "line": 172,
        "signature": "bool timedSync();"
      }
    ],
    "handleTimedSyncResponse": [
      {
        "file": "src/P2p/NetNode.h",
        "line": 173,
        "signature": "bool handleTimedSyncResponse(const BinaryArray& in, P2pConnectionContext& context);"
      }
    ],
    "on_connection_new": [
      {
        "file": "src/P2p/NetNode.h",
        "line": 176,
        "signature": "void on_connection_new(P2pConnectionContext& context);"
      }
    ],
    "on_connection_close": [
      {
        "file": "src/P2p/NetNode.h",
        "line": 177,
        "signature": "void on_connection_close(P2pConnectionContext& context);"
      }
    ],
    "add_host_fail": [
      {
        "file": "src/P2p/NetNode.h",
        "line": 187,
        "signature": "bool add_host_fail(const uint32_t address_ip);"
      }
    ],
    "is_addr_recently_failed": [
      {
        "file": "src/P2p/NetNode.h",
        "line": 191,
        "signature": "bool is_addr_recently_failed(const uint32_t address_ip);"
      }
    ],
    "is_remote_host_allowed": [
      {
        "file": "src/P2p/NetNode.h",
        "line": 192,
        "signature": "bool is_remote_host_allowed(const uint32_t address_ip);"
      }
    ],
    "handleConfig": [
      {
        "file": "src/P2p/NetNode.h",
        "line": 193,
        "signature": "bool handleConfig(const NetNodeConfig& config);"
      }
    ],
    "append_net_address": [
      {
        "file": "src/P2p/NetNode.h",
        "line": 194,
        "signature": "bool append_net_address(std::vector<NetworkAddress>& nodes, const std::string& addr);"
      }
    ],
    "idle_worker": [
      {
        "file": "src/P2p/NetNode.h",
        "line": 195,
        "signature": "bool idle_worker();"
      }
    ],
    "handle_remote_peerlist": [
      {
        "file": "src/P2p/NetNode.h",
        "line": 196,
        "signature": "bool handle_remote_peerlist(const std::list<PeerlistEntry>& peerlist, time_t local_time, const CryptoNoteConnectionContext& context);"
      }
    ],
    "get_local_node_data": [
      {
        "file": "src/P2p/NetNode.h",
        "line": 197,
        "signature": "bool get_local_node_data(basic_node_data& node_data);"
      }
    ],
    "merge_peerlist_with_local": [
      {
        "file": "src/P2p/NetNode.h",
        "line": 198,
        "signature": "bool merge_peerlist_with_local(const std::list<PeerlistEntry>& bs);"
      }
    ],
    "fix_time_delta": [
      {
        "file": "src/P2p/NetNode.h",
        "line": 199,
        "signature": "bool fix_time_delta(std::list<PeerlistEntry>& local_peerlist, time_t local_time, int64_t& delta);"
      }
    ],
    "connections_maker": [
      {
        "file": "src/P2p/NetNode.h",
        "line": 201,
        "signature": "bool connections_maker();"
      }
    ],
    "make_new_connection_from_peerlist": [
      {
        "file": "src/P2p/NetNode.h",
        "line": 202,
        "signature": "bool make_new_connection_from_peerlist(bool use_white_list);"
      }
    ],
    "make_new_connection_from_anchor_peerlist": [
      {
        "file": "src/P2p/NetNode.h",
        "line": 203,
        "signature": "bool make_new_connection_from_anchor_peerlist(const std::vector<AnchorPeerlistEntry> &anchor_peerlist);"
      }
    ],
    "try_to_connect_and_handshake_with_new_peer": [
      {
        "file": "src/P2p/NetNode.h",
        "line": 204,
        "signature": "bool try_to_connect_and_handshake_with_new_peer(const NetworkAddress &na, bool just_take_peerlist = false, uint64_t last_seen_stamp = 0, PeerType peer_type = white, uint64_t first_seen_stamp = 0);"
      }
    ],
    "is_peer_used": [
      {
        "file": "src/P2p/NetNode.h",
        "line": 205,
        "signature": "bool is_peer_used(const PeerlistEntry &peer);"
      },
      {
        "file": "src/P2p/NetNode.h",
        "line": 206,
        "signature": "bool is_peer_used(const AnchorPeerlistEntry &peer);"
      }
    ],
    "is_addr_connected": [
      {
        "file": "src/P2p/NetNode.h",
        "line": 207,
        "signature": "bool is_addr_connected(const NetworkAddress& peer);"
      }
    ],
    "try_ping": [
      {
        "file": "src/P2p/NetNode.h",
        "line": 208,
        "signature": "bool try_ping(basic_node_data& node_data, P2pConnectionContext& context);"
      }
    ],
    "make_expected_connections_count": [
      {
        "file": "src/P2p/NetNode.h",
        "line": 209,
        "signature": "bool make_expected_connections_count(PeerType peer_type, size_t expected_connections);"
      }
    ],
    "is_priority_node": [
      {
        "file": "src/P2p/NetNode.h",
        "line": 210,
        "signature": "bool is_priority_node(const NetworkAddress& na);"
      }
    ],
    "connect_to_peerlist": [
      {
        "file": "src/P2p/NetNode.h",
        "line": 212,
        "signature": "bool connect_to_peerlist(const std::vector<NetworkAddress>& peers);"
      }
    ],
    "acceptLoop": [
      {
        "file": "src/P2p/NetNode.h",
        "line": 224,
        "signature": "void acceptLoop();"
      },
      {
        "file": "src/P2p/P2pNode.h",
        "line": 102,
        "signature": "void acceptLoop();"
      },
      {
        "file": "src/Rpc/HttpServer.h",
        "line": 53,
        "signature": "void acceptLoop();"
      }
    ],
    "connectionHandler": [
      {
        "file": "src/P2p/NetNode.h",
        "line": 225,
        "signature": "void connectionHandler(const boost::uuids::uuid& connectionId, P2pConnectionContext& connection);"
      },
      {
        "file": "src/Rpc/HttpServer.h",
        "line": 54,
        "signature": "void connectionHandler(System::TcpConnection&& conn);"
      }
    ],
    "writeHandler": [
      {
        "file": "src/P2p/NetNode.h",
        "line": 226,
        "signature": "void writeHandler(P2pConnectionContext& ctx);"
      }
    ],
    "onIdle": [
      {
        "file": "src/P2p/NetNode.h",
        "line": 227,
        "signature": "void onIdle();"
      }
    ],
    "timedSyncLoop": [
      {
        "file": "src/P2p/NetNode.h",
        "line": 228,
        "signature": "void timedSyncLoop();"
      },
      {
        "file": "src/P2p/P2pContext.h",
        "line": 96,
        "signature": "void timedSyncLoop();"
      }
    ],
    "timeoutLoop": [
      {
        "file": "src/P2p/NetNode.h",
        "line": 229,
        "signature": "void timeoutLoop();"
      }
    ],
    "safeInterrupt": [
      {
        "file": "src/P2p/NetNode.h",
        "line": 232,
        "signature": "void safeInterrupt(T& obj);"
      }
    ],
    "parsePeerFromString": [
      {
        "file": "src/P2p/NetNodeConfig.cpp",
        "line": 42,
        "signature": "bool parsePeerFromString(NetworkAddress& pe, const std::string& node_addr) {"
      }
    ],
    "setP2pStateFilename": [
      {
        "file": "src/P2p/NetNodeConfig.h",
        "line": 48,
        "signature": "void setP2pStateFilename(const std::string& filename);"
      }
    ],
    "setTestnet": [
      {
        "file": "src/P2p/NetNodeConfig.h",
        "line": 49,
        "signature": "void setTestnet(bool isTestnet);"
      }
    ],
    "setBindIp": [
      {
        "file": "src/P2p/NetNodeConfig.h",
        "line": 50,
        "signature": "void setBindIp(const std::string& ip);"
      }
    ],
    "setBindPort": [
      {
        "file": "src/P2p/NetNodeConfig.h",
        "line": 51,
        "signature": "void setBindPort(uint16_t port);"
      }
    ],
    "setExternalPort": [
      {
        "file": "src/P2p/NetNodeConfig.h",
        "line": 52,
        "signature": "void setExternalPort(uint16_t port);"
      }
    ],
    "setAllowLocalIp": [
      {
        "file": "src/P2p/NetNodeConfig.h",
        "line": 53,
        "signature": "void setAllowLocalIp(bool allow);"
      }
    ],
    "setPeers": [
      {
        "file": "src/P2p/NetNodeConfig.h",
        "line": 54,
        "signature": "void setPeers(const std::vector<PeerlistEntry>& peerList);"
      }
    ],
    "setPriorityNodes": [
      {
        "file": "src/P2p/NetNodeConfig.h",
        "line": 55,
        "signature": "void setPriorityNodes(const std::vector<NetworkAddress>& addresses);"
      }
    ],
    "setExclusiveNodes": [
      {
        "file": "src/P2p/NetNodeConfig.h",
        "line": 56,
        "signature": "void setExclusiveNodes(const std::vector<NetworkAddress>& addresses);"
      }
    ],
    "setSeedNodes": [
      {
        "file": "src/P2p/NetNodeConfig.h",
        "line": 57,
        "signature": "void setSeedNodes(const std::vector<NetworkAddress>& addresses);"
      }
    ],
    "setHideMyPort": [
      {
        "file": "src/P2p/NetNodeConfig.h",
        "line": 58,
        "signature": "void setHideMyPort(bool hide);"
      }
    ],
    "setConfigFolder": [
      {
        "file": "src/P2p/NetNodeConfig.h",
        "line": 59,
        "signature": "void setConfigFolder(const std::string& folder);"
      }
    ],
    "InterruptedException": [
      {
        "file": "src/P2p/P2pConnectionProxy.cpp",
        "line": 67,
        "signature": "throw InterruptedException();"
      },
      {
        "file": "src/P2p/P2pContext.cpp",
        "line": 102,
        "signature": "throw InterruptedException();"
      },
      {
        "file": "src/P2p/P2pContext.cpp",
        "line": 113,
        "signature": "throw InterruptedException();"
      },
      {
        "file": "src/P2p/P2pNode.cpp",
        "line": 148,
        "signature": "throw InterruptedException();"
      },
      {
        "file": "src/Platform/Linux/System/Ipv4Resolver.cpp",
        "line": 48,
        "signature": "throw InterruptedException();"
      },
      {
        "file": "src/Platform/Linux/System/TcpConnection.cpp",
        "line": 78,
        "signature": "throw InterruptedException();"
      },
      {
        "file": "src/Platform/Linux/System/TcpConnection.cpp",
        "line": 126,
        "signature": "throw InterruptedException();"
      },
      {
        "file": "src/Platform/Linux/System/TcpConnection.cpp",
        "line": 166,
        "signature": "throw InterruptedException();"
      },
      {
        "file": "src/Platform/Linux/System/TcpConnection.cpp",
        "line": 222,
        "signature": "throw InterruptedException();"
      },
      {
        "file": "src/Platform/Linux/System/TcpConnector.cpp",
        "line": 64,
        "signature": "throw InterruptedException();"
      },
      {
        "file": "src/Platform/Linux/System/TcpConnector.cpp",
        "line": 128,
        "signature": "throw InterruptedException();"
      },
      {
        "file": "src/Platform/Linux/System/TcpListener.cpp",
        "line": 112,
        "signature": "throw InterruptedException();"
      },
      {
        "file": "src/Platform/Linux/System/TcpListener.cpp",
        "line": 158,
        "signature": "throw InterruptedException();"
      },
      {
        "file": "src/Platform/Linux/System/Timer.cpp",
        "line": 69,
        "signature": "throw InterruptedException();"
      },
      {
        "file": "src/Platform/Linux/System/Timer.cpp",
        "line": 137,
        "signature": "throw InterruptedException();"
      },
      {
        "file": "src/Platform/OSX/System/Ipv4Resolver.cpp",
        "line": 48,
        "signature": "throw InterruptedException();"
      },
      {
        "file": "src/Platform/OSX/System/TcpConnection.cpp",
        "line": 72,
        "signature": "throw InterruptedException();"
      },
      {
        "file": "src/Platform/OSX/System/TcpConnection.cpp",
        "line": 115,
        "signature": "throw InterruptedException();"
      },
      {
        "file": "src/Platform/OSX/System/TcpConnection.cpp",
        "line": 139,
        "signature": "throw InterruptedException();"
      },
      {
        "file": "src/Platform/OSX/System/TcpConnection.cpp",
        "line": 190,
        "signature": "throw InterruptedException();"
      },
      {
        "file": "src/Platform/OSX/System/TcpConnector.cpp",
        "line": 67,
        "signature": "throw InterruptedException();"
      },
      {
        "file": "src/Platform/OSX/System/TcpConnector.cpp",
        "line": 126,
        "signature": "throw InterruptedException();"
      },
      {
        "file": "src/Platform/OSX/System/TcpListener.cpp",
        "line": 114,
        "signature": "throw InterruptedException();"
      },
      {
        "file": "src/Platform/OSX/System/TcpListener.cpp",
        "line": 153,
        "signature": "throw InterruptedException();"
      },
      {
        "file": "src/Platform/OSX/System/Timer.cpp",
        "line": 60,
        "signature": "throw InterruptedException();"
      },
      {
        "file": "src/Platform/OSX/System/Timer.cpp",
        "line": 102,
        "signature": "throw InterruptedException();"
      },
      {
        "file": "src/Platform/Windows/System/Ipv4Resolver.cpp",
        "line": 49,
        "signature": "throw InterruptedException();"
      },
      {
        "file": "src/Platform/Windows/System/TcpConnection.cpp",
        "line": 80,
        "signature": "throw InterruptedException();"
      },
      {
        "file": "src/Platform/Windows/System/TcpConnection.cpp",
        "line": 130,
        "signature": "throw InterruptedException();"
      },
      {
        "file": "src/Platform/Windows/System/TcpConnection.cpp",
        "line": 142,
        "signature": "throw InterruptedException();"
      },
      {
        "file": "src/Platform/Windows/System/TcpConnection.cpp",
        "line": 199,
        "signature": "throw InterruptedException();"
      },
      {
        "file": "src/Platform/Windows/System/TcpConnector.cpp",
        "line": 69,
        "signature": "throw InterruptedException();"
      },
      {
        "file": "src/Platform/Windows/System/TcpConnector.cpp",
        "line": 146,
        "signature": "throw InterruptedException();"
      },
      {
        "file": "src/Platform/Windows/System/TcpListener.cpp",
        "line": 114,
        "signature": "throw InterruptedException();"
      },
      {
        "file": "src/Platform/Windows/System/TcpListener.cpp",
        "line": 171,
        "signature": "throw InterruptedException();"
      },
      {
        "file": "src/Platform/Windows/System/Timer.cpp",
        "line": 63,
        "signature": "throw InterruptedException();"
      },
      {
        "file": "src/Platform/Windows/System/Timer.cpp",
        "line": 92,
        "signature": "throw InterruptedException();"
      },
      {
        "file": "src/System/Event.cpp",
        "line": 101,
        "signature": "throw InterruptedException();"
      },
      {
        "file": "src/System/Event.cpp",
        "line": 141,
        "signature": "throw InterruptedException();"
      }
    ],
    "processIncomingHandshake": [
      {
        "file": "src/P2p/P2pConnectionProxy.h",
        "line": 38,
        "signature": "bool processIncomingHandshake();"
      }
    ],
    "writeHandshake": [
      {
        "file": "src/P2p/P2pConnectionProxy.h",
        "line": 48,
        "signature": "void writeHandshake(const P2pMessage &message);"
      }
    ],
    "handleHandshakeRequest": [
      {
        "file": "src/P2p/P2pConnectionProxy.h",
        "line": 49,
        "signature": "void handleHandshakeRequest(const LevinProtocol::Command& cmd);"
      }
    ],
    "handleHandshakeResponse": [
      {
        "file": "src/P2p/P2pConnectionProxy.h",
        "line": 50,
        "signature": "void handleHandshakeResponse(const LevinProtocol::Command& cmd, P2pMessage& message);"
      }
    ],
    "handleTimedSync": [
      {
        "file": "src/P2p/P2pConnectionProxy.h",
        "line": 51,
        "signature": "void handleTimedSync(const LevinProtocol::Command& cmd);"
      }
    ],
    "lk": [
      {
        "file": "src/P2p/P2pContext.cpp",
        "line": 105,
        "signature": "EventLock lk(readEvent);"
      },
      {
        "file": "src/P2p/P2pContext.cpp",
        "line": 116,
        "signature": "EventLock lk(writeEvent);"
      }
    ],
    "setPeerInfo": [
      {
        "file": "src/P2p/P2pContext.h",
        "line": 65,
        "signature": "void setPeerInfo(uint8_t protocolVersion, PeerIdType id, uint16_t port);"
      }
    ],
    "writeMessage": [
      {
        "file": "src/P2p/P2pContext.h",
        "line": 67,
        "signature": "void writeMessage(const Message& msg);"
      }
    ],
    "getRandomIndex": [
      {
        "file": "src/P2p/P2pNode.cpp",
        "line": 73,
        "signature": "size_t getRandomIndex() {"
      }
    ],
    "getRemoteAddress": [
      {
        "file": "src/P2p/P2pNode.cpp",
        "line": 88,
        "signature": "NetworkAddress getRemoteAddress(const TcpConnection& connection) {"
      }
    ],
    "connector": [
      {
        "file": "src/P2p/P2pNode.cpp",
        "line": 365,
        "signature": "TcpConnector connector(m_dispatcher);"
      },
      {
        "file": "src/P2p/P2pNode.cpp",
        "line": 516,
        "signature": "TcpConnector connector(m_dispatcher);"
      }
    ],
    "ContextPtr": [
      {
        "file": "src/P2p/P2pNode.cpp",
        "line": 381,
        "signature": "return ContextPtr();"
      }
    ],
    "handleRemotePeerList": [
      {
        "file": "src/P2p/P2pNode.cpp",
        "line": 419,
        "signature": "return handleRemotePeerList(response.local_peerlist, response.node_data.local_time);"
      }
    ],
    "connectorLoop": [
      {
        "file": "src/P2p/P2pNode.h",
        "line": 103,
        "signature": "void connectorLoop();"
      }
    ],
    "connectPeers": [
      {
        "file": "src/P2p/P2pNode.h",
        "line": 106,
        "signature": "void connectPeers();"
      }
    ],
    "connectPeerList": [
      {
        "file": "src/P2p/P2pNode.h",
        "line": 107,
        "signature": "void connectPeerList(const std::vector<NetworkAddress>& peers);"
      }
    ],
    "isPeerConnected": [
      {
        "file": "src/P2p/P2pNode.h",
        "line": 108,
        "signature": "bool isPeerConnected(const NetworkAddress& address);"
      }
    ],
    "isPeerUsed": [
      {
        "file": "src/P2p/P2pNode.h",
        "line": 109,
        "signature": "bool isPeerUsed(const PeerlistEntry& peer);"
      }
    ],
    "tryToConnectPeer": [
      {
        "file": "src/P2p/P2pNode.h",
        "line": 110,
        "signature": "ContextPtr tryToConnectPeer(const NetworkAddress& address);"
      }
    ],
    "fetchPeerList": [
      {
        "file": "src/P2p/P2pNode.h",
        "line": 111,
        "signature": "bool fetchPeerList(ContextPtr connection);"
      }
    ],
    "makeExpectedConnectionsCount": [
      {
        "file": "src/P2p/P2pNode.h",
        "line": 115,
        "signature": "void makeExpectedConnectionsCount(const PeerlistManager::Peerlist& peerlist, size_t connectionsCount);"
      }
    ],
    "makeNewConnectionFromPeerlist": [
      {
        "file": "src/P2p/P2pNode.h",
        "line": 116,
        "signature": "bool makeNewConnectionFromPeerlist(const PeerlistManager::Peerlist& peerlist);"
      }
    ],
    "preprocessIncomingConnection": [
      {
        "file": "src/P2p/P2pNode.h",
        "line": 117,
        "signature": "void preprocessIncomingConnection(ContextPtr ctx);"
      }
    ],
    "enqueueConnection": [
      {
        "file": "src/P2p/P2pNode.h",
        "line": 118,
        "signature": "void enqueueConnection(std::unique_ptr<P2pConnectionProxy> proxy);"
      }
    ],
    "setTimedSyncInterval": [
      {
        "file": "src/P2p/P2pNodeConfig.h",
        "line": 41,
        "signature": "void setTimedSyncInterval(std::chrono::nanoseconds interval);"
      }
    ],
    "setHandshakeTimeout": [
      {
        "file": "src/P2p/P2pNodeConfig.h",
        "line": 42,
        "signature": "void setHandshakeTimeout(std::chrono::nanoseconds timeout);"
      }
    ],
    "setConnectInterval": [
      {
        "file": "src/P2p/P2pNodeConfig.h",
        "line": 43,
        "signature": "void setConnectInterval(std::chrono::nanoseconds interval);"
      }
    ],
    "setConnectTimeout": [
      {
        "file": "src/P2p/P2pNodeConfig.h",
        "line": 44,
        "signature": "void setConnectTimeout(std::chrono::nanoseconds timeout);"
      }
    ],
    "setExpectedOutgoingConnectionsCount": [
      {
        "file": "src/P2p/P2pNodeConfig.h",
        "line": 45,
        "signature": "void setExpectedOutgoingConnectionsCount(size_t count);"
      }
    ],
    "setWhiteListConnectionsPercent": [
      {
        "file": "src/P2p/P2pNodeConfig.h",
        "line": 46,
        "signature": "void setWhiteListConnectionsPercent(size_t percent);"
      }
    ],
    "setNetworkId": [
      {
        "file": "src/P2p/P2pNodeConfig.h",
        "line": 47,
        "signature": "void setNetworkId(const boost::uuids::uuid& id);"
      }
    ],
    "setPeerListConnectRange": [
      {
        "file": "src/P2p/P2pNodeConfig.h",
        "line": 48,
        "signature": "void setPeerListConnectRange(size_t range);"
      }
    ],
    "setPeerListGetTryCount": [
      {
        "file": "src/P2p/P2pNodeConfig.h",
        "line": 49,
        "signature": "void setPeerListGetTryCount(size_t count);"
      }
    ],
    "hostToNetwork": [
      {
        "file": "src/P2p/P2pProtocolTypes.h",
        "line": 74,
        "signature": "inline uint32_t hostToNetwork(uint32_t n) {"
      },
      {
        "file": "src/P2p/P2pProtocolTypes.h",
        "line": 79,
        "signature": "return hostToNetwork(n); // the same"
      }
    ],
    "networkToHost": [
      {
        "file": "src/P2p/P2pProtocolTypes.h",
        "line": 78,
        "signature": "inline uint32_t networkToHost(uint32_t n) {"
      }
    ],
    "set_peer_just_seen": [
      {
        "file": "src/P2p/PeerListManager.cpp",
        "line": 198,
        "signature": "return set_peer_just_seen(peer, addr);"
      },
      {
        "file": "src/P2p/PeerListManager.h",
        "line": 88,
        "signature": "bool set_peer_just_seen(PeerIdType peer, uint32_t ip, uint32_t port);"
      },
      {
        "file": "src/P2p/PeerListManager.h",
        "line": 89,
        "signature": "bool set_peer_just_seen(PeerIdType peer, const NetworkAddress& addr);"
      }
    ],
    "append_with_peer_white": [
      {
        "file": "src/P2p/PeerListManager.cpp",
        "line": 211,
        "signature": "return append_with_peer_white(ple);"
      },
      {
        "file": "src/P2p/PeerListManager.h",
        "line": 86,
        "signature": "bool append_with_peer_white(const PeerlistEntry& pr);"
      }
    ],
    "trim": [
      {
        "file": "src/P2p/PeerListManager.h",
        "line": 67,
        "signature": "void trim();"
      }
    ],
    "merge_peerlist": [
      {
        "file": "src/P2p/PeerListManager.h",
        "line": 79,
        "signature": "bool merge_peerlist(const std::list<PeerlistEntry>& outer_bs);"
      }
    ],
    "append_with_peer_anchor": [
      {
        "file": "src/P2p/PeerListManager.h",
        "line": 84,
        "signature": "bool append_with_peer_anchor(const AnchorPeerlistEntry &pr);"
      }
    ],
    "append_with_peer_gray": [
      {
        "file": "src/P2p/PeerListManager.h",
        "line": 87,
        "signature": "bool append_with_peer_gray(const PeerlistEntry& pr);"
      }
    ],
    "set_peer_unreachable": [
      {
        "file": "src/P2p/PeerListManager.h",
        "line": 90,
        "signature": "bool set_peer_unreachable(const PeerlistEntry& pr);"
      }
    ],
    "trim_white_peerlist": [
      {
        "file": "src/P2p/PeerListManager.h",
        "line": 92,
        "signature": "void trim_white_peerlist();"
      }
    ],
    "trim_gray_peerlist": [
      {
        "file": "src/P2p/PeerListManager.h",
        "line": 93,
        "signature": "void trim_gray_peerlist();"
      }
    ],
    "get_and_empty_anchor_peerlist": [
      {
        "file": "src/P2p/PeerListManager.h",
        "line": 99,
        "signature": "bool get_and_empty_anchor_peerlist(std::vector<AnchorPeerlistEntry> &apl);"
      }
    ],
    "remove_from_peer_anchor": [
      {
        "file": "src/P2p/PeerListManager.h",
        "line": 100,
        "signature": "bool remove_from_peer_anchor(const NetworkAddress &addr);"
      }
    ],
    "initCompleted": [
      {
        "file": "src/PaymentGate/NodeFactory.cpp",
        "line": 97,
        "signature": "void initCompleted(std::error_code result) {"
      }
    ],
    "waitForInitEnd": [
      {
        "file": "src/PaymentGate/NodeFactory.cpp",
        "line": 101,
        "signature": "void waitForInitEnd() {"
      }
    ],
    "NodeRpcStub": [
      {
        "file": "src/PaymentGate/NodeFactory.cpp",
        "line": 131,
        "signature": "return new NodeRpcStub();"
      }
    ],
    "RequestSerializationError": [
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.cpp",
        "line": 153,
        "signature": "throw RequestSerializationError();"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.cpp",
        "line": 166,
        "signature": "throw RequestSerializationError();"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.cpp",
        "line": 179,
        "signature": "throw RequestSerializationError();"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.cpp",
        "line": 191,
        "signature": "throw RequestSerializationError();"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.cpp",
        "line": 221,
        "signature": "throw RequestSerializationError();"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.cpp",
        "line": 242,
        "signature": "throw RequestSerializationError();"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.cpp",
        "line": 247,
        "signature": "throw RequestSerializationError();"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.cpp",
        "line": 310,
        "signature": "throw RequestSerializationError();"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.cpp",
        "line": 331,
        "signature": "throw RequestSerializationError();"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.cpp",
        "line": 336,
        "signature": "throw RequestSerializationError();"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.cpp",
        "line": 365,
        "signature": "throw RequestSerializationError();"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.cpp",
        "line": 376,
        "signature": "throw RequestSerializationError();"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.cpp",
        "line": 386,
        "signature": "throw RequestSerializationError();"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.cpp",
        "line": 393,
        "signature": "throw RequestSerializationError();"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.cpp",
        "line": 398,
        "signature": "throw RequestSerializationError();"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.cpp",
        "line": 406,
        "signature": "throw RequestSerializationError();"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.cpp",
        "line": 424,
        "signature": "throw RequestSerializationError();"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.cpp",
        "line": 431,
        "signature": "throw RequestSerializationError();"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.cpp",
        "line": 436,
        "signature": "throw RequestSerializationError();"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.cpp",
        "line": 444,
        "signature": "throw RequestSerializationError();"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.cpp",
        "line": 468,
        "signature": "throw RequestSerializationError();"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.cpp",
        "line": 480,
        "signature": "throw RequestSerializationError();"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.cpp",
        "line": 492,
        "signature": "throw RequestSerializationError();"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.cpp",
        "line": 505,
        "signature": "throw RequestSerializationError();"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.cpp",
        "line": 521,
        "signature": "throw RequestSerializationError();"
      },
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.cpp",
        "line": 526,
        "signature": "throw RequestSerializationError();"
      }
    ],
    "jsonHandler": [
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcServer.h",
        "line": 47,
        "signature": "HandlerFunction jsonHandler(RequestHandler handler) {"
      }
    ],
    "transactionFilter": [
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 1078,
        "signature": "TransactionsInBlockInfoFilter transactionFilter(addresses, paymentId);"
      },
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 1110,
        "signature": "TransactionsInBlockInfoFilter transactionFilter(addresses, paymentId);"
      },
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 1185,
        "signature": "TransactionsInBlockInfoFilter transactionFilter(addresses, paymentId);"
      },
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 1218,
        "signature": "TransactionsInBlockInfoFilter transactionFilter(addresses, paymentId);"
      },
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 1621,
        "signature": "TransactionsInBlockInfoFilter transactionFilter(addresses, \"\");"
      }
    ],
    "convertTransactionsInBlockInfoToTransactionHashesInBlockRpcInfo": [
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 2081,
        "signature": "return convertTransactionsInBlockInfoToTransactionHashesInBlockRpcInfo(filteredTransactions);"
      },
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 2088,
        "signature": "return convertTransactionsInBlockInfoToTransactionHashesInBlockRpcInfo(filteredTransactions);"
      }
    ],
    "convertTransactionsInBlockInfoToTransactionsInBlockRpcInfo": [
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 2096,
        "signature": "return convertTransactionsInBlockInfoToTransactionsInBlockRpcInfo(filteredTransactions, knownBlockCount);"
      },
      {
        "file": "src/PaymentGate/WalletService.cpp",
        "line": 2104,
        "signature": "return convertTransactionsInBlockInfoToTransactionsInBlockRpcInfo(filteredTransactions, knownBlockCount);"
      }
    ],
    "generateNewWallet": [
      {
        "file": "src/PaymentGate/WalletService.h",
        "line": 52,
        "signature": "void generateNewWallet(const CryptoNote::Currency &currency, const WalletConfiguration &conf, Logging::ILogger &logger, System::Dispatcher &dispatcher);"
      }
    ],
    "saveWallet": [
      {
        "file": "src/PaymentGate/WalletService.h",
        "line": 63,
        "signature": "void saveWallet();"
      }
    ],
    "refresh": [
      {
        "file": "src/PaymentGate/WalletService.h",
        "line": 111,
        "signature": "void refresh();"
      }
    ],
    "loadWallet": [
      {
        "file": "src/PaymentGate/WalletService.h",
        "line": 114,
        "signature": "void loadWallet();"
      },
      {
        "file": "src/Wallet/WalletSerializationV1.h",
        "line": 63,
        "signature": "void loadWallet(Common::IInputStream &source, const Crypto::chacha8_key &key, uint32_t version);"
      }
    ],
    "loadTransactionIdIndex": [
      {
        "file": "src/PaymentGate/WalletService.h",
        "line": 115,
        "signature": "void loadTransactionIdIndex();"
      }
    ],
    "replaceWithNewWallet": [
      {
        "file": "src/PaymentGate/WalletService.h",
        "line": 117,
        "signature": "void replaceWithNewWallet(const Crypto::SecretKey &viewSecretKey);"
      }
    ],
    "ConfigurationError": [
      {
        "file": "src/PaymentGateService/ConfigurationManager.cpp",
        "line": 81,
        "signature": "throw ConfigurationError(\"Cannot open configuration file\");"
      },
      {
        "file": "src/PaymentGateService/PaymentServiceConfiguration.cpp",
        "line": 77,
        "signature": "throw ConfigurationError(\"It's impossible to use both \\\"register-service\\\" and \\\"unregister-service\\\" at the same time\");"
      },
      {
        "file": "src/PaymentGateService/PaymentServiceConfiguration.cpp",
        "line": 142,
        "signature": "throw ConfigurationError(\"Both container-file and container-password parameters are required\");"
      }
    ],
    "changeDirectory": [
      {
        "file": "src/PaymentGateService/PaymentGateService.cpp",
        "line": 47,
        "signature": "void changeDirectory(const std::string& path) {"
      }
    ],
    "stopSignalHandler": [
      {
        "file": "src/PaymentGateService/PaymentGateService.cpp",
        "line": 53,
        "signature": "void stopSignalHandler(PaymentGateService* pg) {"
      }
    ],
    "runInProcess": [
      {
        "file": "src/PaymentGateService/PaymentGateService.h",
        "line": 49,
        "signature": "void runInProcess(Logging::LoggerRef& log);"
      }
    ],
    "runRpcProxy": [
      {
        "file": "src/PaymentGateService/PaymentGateService.h",
        "line": 50,
        "signature": "void runRpcProxy(Logging::LoggerRef& log);"
      }
    ],
    "runWalletService": [
      {
        "file": "src/PaymentGateService/PaymentGateService.h",
        "line": 52,
        "signature": "void runWalletService(const CryptoNote::Currency& currency, CryptoNote::INode& node);"
      }
    ],
    "serviceHandler": [
      {
        "file": "src/PaymentGateService/main.cpp",
        "line": 59,
        "signature": "void __stdcall serviceHandler(DWORD fdwControl) {"
      }
    ],
    "serviceMain": [
      {
        "file": "src/PaymentGateService/main.cpp",
        "line": 71,
        "signature": "void __stdcall serviceMain(DWORD dwArgc, char **lpszArgv) {"
      }
    ],
    "daemonize": [
      {
        "file": "src/PaymentGateService/main.cpp",
        "line": 102,
        "signature": "int daemonize() {"
      }
    ],
    "runDaemon": [
      {
        "file": "src/PaymentGateService/main.cpp",
        "line": 133,
        "signature": "int runDaemon() {"
      }
    ],
    "registerService": [
      {
        "file": "src/PaymentGateService/main.cpp",
        "line": 169,
        "signature": "int registerService() {"
      },
      {
        "file": "src/PaymentGateService/main.cpp",
        "line": 315,
        "signature": "return registerService();"
      }
    ],
    "unregisterService": [
      {
        "file": "src/PaymentGateService/main.cpp",
        "line": 226,
        "signature": "int unregisterService() {"
      },
      {
        "file": "src/PaymentGateService/main.cpp",
        "line": 319,
        "signature": "return unregisterService();"
      }
    ],
    "dispatch": [
      {
        "file": "src/Platform/Linux/System/Dispatcher.h",
        "line": 71,
        "signature": "void dispatch();"
      },
      {
        "file": "src/Platform/OSX/System/Dispatcher.h",
        "line": 62,
        "signature": "void dispatch();"
      },
      {
        "file": "src/Platform/Windows/System/Dispatcher.h",
        "line": 55,
        "signature": "void dispatch();"
      }
    ],
    "interrupted": [
      {
        "file": "src/Platform/Linux/System/Dispatcher.h",
        "line": 75,
        "signature": "bool interrupted();"
      },
      {
        "file": "src/Platform/OSX/System/Dispatcher.h",
        "line": 66,
        "signature": "bool interrupted();"
      },
      {
        "file": "src/Platform/Windows/System/Dispatcher.h",
        "line": 59,
        "signature": "bool interrupted();"
      }
    ],
    "pushContext": [
      {
        "file": "src/Platform/Linux/System/Dispatcher.h",
        "line": 76,
        "signature": "void pushContext(NativeContext* context);"
      },
      {
        "file": "src/Platform/OSX/System/Dispatcher.h",
        "line": 67,
        "signature": "void pushContext(NativeContext* context);"
      },
      {
        "file": "src/Platform/Windows/System/Dispatcher.h",
        "line": 60,
        "signature": "void pushContext(NativeContext* context);"
      }
    ],
    "yield": [
      {
        "file": "src/Platform/Linux/System/Dispatcher.h",
        "line": 78,
        "signature": "void yield();"
      },
      {
        "file": "src/Platform/OSX/System/Dispatcher.h",
        "line": 69,
        "signature": "void yield();"
      },
      {
        "file": "src/Platform/Windows/System/Dispatcher.h",
        "line": 62,
        "signature": "void yield();"
      }
    ],
    "pushReusableContext": [
      {
        "file": "src/Platform/Linux/System/Dispatcher.h",
        "line": 83,
        "signature": "void pushReusableContext(NativeContext&);"
      },
      {
        "file": "src/Platform/OSX/System/Dispatcher.h",
        "line": 73,
        "signature": "void pushReusableContext(NativeContext&);"
      },
      {
        "file": "src/Platform/Windows/System/Dispatcher.h",
        "line": 68,
        "signature": "void pushReusableContext(NativeContext&);"
      }
    ],
    "getTimer": [
      {
        "file": "src/Platform/Linux/System/Dispatcher.h",
        "line": 84,
        "signature": "int getTimer();"
      },
      {
        "file": "src/Platform/OSX/System/Dispatcher.h",
        "line": 74,
        "signature": "int getTimer();"
      }
    ],
    "pushTimer": [
      {
        "file": "src/Platform/Linux/System/Dispatcher.h",
        "line": 85,
        "signature": "void pushTimer(int timer);"
      },
      {
        "file": "src/Platform/OSX/System/Dispatcher.h",
        "line": 75,
        "signature": "void pushTimer(int timer);"
      }
    ],
    "contextProcedure": [
      {
        "file": "src/Platform/Linux/System/Dispatcher.h",
        "line": 118,
        "signature": "void contextProcedure(void* ucontext);"
      },
      {
        "file": "src/Platform/OSX/System/Dispatcher.h",
        "line": 101,
        "signature": "void contextProcedure(void* uctx);"
      },
      {
        "file": "src/Platform/Windows/System/Dispatcher.h",
        "line": 89,
        "signature": "void contextProcedure();"
      }
    ],
    "contextProcedureStatic": [
      {
        "file": "src/Platform/Linux/System/Dispatcher.h",
        "line": 119,
        "signature": "static void contextProcedureStatic(void* context);"
      },
      {
        "file": "src/Platform/OSX/System/Dispatcher.h",
        "line": 102,
        "signature": "static void contextProcedureStatic(intptr_t context);"
      },
      {
        "file": "src/Platform/Windows/System/Dispatcher.h",
        "line": 90,
        "signature": "static void __stdcall contextProcedureStatic(void* context);"
      }
    ],
    "errorMessage": [
      {
        "file": "src/Platform/Linux/System/ErrorMessage.cpp",
        "line": 14,
        "signature": "return errorMessage(errno);"
      },
      {
        "file": "src/Platform/OSX/System/ErrorMessage.cpp",
        "line": 14,
        "signature": "return errorMessage(errno);"
      }
    ],
    "Ipv4Resolver": [
      {
        "file": "src/Platform/Linux/System/Ipv4Resolver.h",
        "line": 19,
        "signature": "explicit Ipv4Resolver(Dispatcher& dispatcher);"
      },
      {
        "file": "src/Platform/OSX/System/Ipv4Resolver.h",
        "line": 19,
        "signature": "explicit Ipv4Resolver(Dispatcher& dispatcher);"
      },
      {
        "file": "src/Platform/Windows/System/Ipv4Resolver.h",
        "line": 19,
        "signature": "explicit Ipv4Resolver(Dispatcher& dispatcher);"
      }
    ],
    "resolve": [
      {
        "file": "src/Platform/Linux/System/Ipv4Resolver.h",
        "line": 25,
        "signature": "Ipv4Address resolve(const std::string& host);"
      },
      {
        "file": "src/Platform/OSX/System/Ipv4Resolver.h",
        "line": 25,
        "signature": "Ipv4Address resolve(const std::string& host);"
      },
      {
        "file": "src/Platform/Windows/System/Ipv4Resolver.h",
        "line": 25,
        "signature": "Ipv4Address resolve(const std::string& host);"
      }
    ],
    "TcpConnection": [
      {
        "file": "src/Platform/Linux/System/TcpConnector.cpp",
        "line": 150,
        "signature": "return TcpConnection(*dispatcher, connection);"
      },
      {
        "file": "src/Platform/Linux/System/TcpConnector.cpp",
        "line": 157,
        "signature": "return TcpConnection(*dispatcher, connection);"
      },
      {
        "file": "src/Platform/Linux/System/TcpListener.cpp",
        "line": 175,
        "signature": "return TcpConnection(*dispatcher, connection);"
      },
      {
        "file": "src/Platform/OSX/System/TcpConnector.cpp",
        "line": 144,
        "signature": "return TcpConnection(*dispatcher, connection);"
      },
      {
        "file": "src/Platform/OSX/System/TcpConnector.cpp",
        "line": 151,
        "signature": "return TcpConnection(*dispatcher, connection);"
      },
      {
        "file": "src/Platform/OSX/System/TcpListener.cpp",
        "line": 166,
        "signature": "return TcpConnection(*dispatcher, connection);"
      },
      {
        "file": "src/Platform/Windows/System/TcpConnector.cpp",
        "line": 156,
        "signature": "return TcpConnection(*dispatcher, connection);"
      },
      {
        "file": "src/Platform/Windows/System/TcpListener.cpp",
        "line": 183,
        "signature": "return TcpConnection(*dispatcher, connection);"
      }
    ],
    "connect": [
      {
        "file": "src/Platform/Linux/System/TcpConnector.h",
        "line": 27,
        "signature": "TcpConnection connect(const Ipv4Address& address, uint16_t port);"
      },
      {
        "file": "src/Platform/OSX/System/TcpConnector.h",
        "line": 27,
        "signature": "TcpConnection connect(const Ipv4Address& address, uint16_t port);"
      },
      {
        "file": "src/Platform/Windows/System/TcpConnector.h",
        "line": 27,
        "signature": "TcpConnection connect(const Ipv4Address& address, uint16_t port);"
      },
      {
        "file": "src/Rpc/HttpClient.h",
        "line": 48,
        "signature": "void connect();"
      }
    ],
    "accept": [
      {
        "file": "src/Platform/Linux/System/TcpListener.h",
        "line": 27,
        "signature": "TcpConnection accept();"
      },
      {
        "file": "src/Platform/OSX/System/TcpListener.h",
        "line": 27,
        "signature": "TcpConnection accept();"
      },
      {
        "file": "src/Platform/Windows/System/TcpListener.h",
        "line": 27,
        "signature": "TcpConnection accept();"
      }
    ],
    "Timer": [
      {
        "file": "src/Platform/Linux/System/Timer.h",
        "line": 18,
        "signature": "explicit Timer(Dispatcher& dispatcher);"
      },
      {
        "file": "src/Platform/OSX/System/Timer.h",
        "line": 18,
        "signature": "explicit Timer(Dispatcher& dispatcher);"
      },
      {
        "file": "src/Platform/Windows/System/Timer.h",
        "line": 18,
        "signature": "explicit Timer(Dispatcher& dispatcher);"
      }
    ],
    "sleep": [
      {
        "file": "src/Platform/Linux/System/Timer.h",
        "line": 24,
        "signature": "void sleep(std::chrono::nanoseconds duration);"
      },
      {
        "file": "src/Platform/OSX/System/Timer.h",
        "line": 24,
        "signature": "void sleep(std::chrono::nanoseconds duration);"
      },
      {
        "file": "src/Platform/Windows/System/Timer.h",
        "line": 24,
        "signature": "void sleep(std::chrono::nanoseconds duration);"
      }
    ],
    "swapcontext": [
      {
        "file": "src/Platform/OSX/System/Context.h",
        "line": 31,
        "signature": "extern\tint\t\tswapcontext(uctx*, const uctx*);"
      }
    ],
    "getmcontext": [
      {
        "file": "src/Platform/OSX/System/Context.h",
        "line": 33,
        "signature": "extern\tint\t\tgetmcontext(mctx*);"
      }
    ],
    "setmcontext": [
      {
        "file": "src/Platform/OSX/System/Context.h",
        "line": 34,
        "signature": "extern\tvoid\t\tsetmcontext(const mctx*);"
      }
    ],
    "asyncOp": [
      {
        "file": "src/Platform/OSX/System/Future.h",
        "line": 71,
        "signature": "void asyncOp() {"
      },
      {
        "file": "src/Platform/OSX/System/Future.h",
        "line": 132,
        "signature": "void asyncOp() {"
      }
    ],
    "addTimer": [
      {
        "file": "src/Platform/Windows/System/Dispatcher.h",
        "line": 65,
        "signature": "void addTimer(uint64_t time, NativeContext* context);"
      }
    ],
    "interruptTimer": [
      {
        "file": "src/Platform/Windows/System/Dispatcher.h",
        "line": 69,
        "signature": "void interruptTimer(uint64_t time, NativeContext* context);"
      }
    ],
    "TcpConnector": [
      {
        "file": "src/Platform/Windows/System/TcpConnector.h",
        "line": 21,
        "signature": "explicit TcpConnector(Dispatcher& dispatcher);"
      }
    ],
    "request": [
      {
        "file": "src/Rpc/CoreRpcServerCommandsDefinitions.h",
        "line": 268,
        "signature": "explicit request(const Transaction &);"
      },
      {
        "file": "src/Rpc/HttpClient.h",
        "line": 43,
        "signature": "void request(const HttpRequest& req, HttpResponse& res);"
      }
    ],
    "disconnect": [
      {
        "file": "src/Rpc/HttpClient.h",
        "line": 49,
        "signature": "void disconnect();"
      }
    ],
    "invokeJsonCommand": [
      {
        "file": "src/Rpc/HttpClient.h",
        "line": 61,
        "signature": "void invokeJsonCommand(HttpClient& client, const std::string& url, const Request& req, Response& res, const std::string& user = \"\", const std::string& password = \"\") {"
      }
    ],
    "invokeJsonRpcCommand": [
      {
        "file": "src/Rpc/HttpClient.h",
        "line": 83,
        "signature": "void invokeJsonRpcCommand(HttpClient& client, const std::string& method, const Request& req, Response& res, const std::string& user = \"\", const std::string& password = \"\") {"
      },
      {
        "file": "src/Rpc/JsonRpc.cpp",
        "line": 42,
        "signature": "void invokeJsonRpcCommand(HttpClient& httpClient, JsonRpcRequest& jsReq, JsonRpcResponse& jsRes, const std::string& user, const std::string& password) {"
      },
      {
        "file": "src/Rpc/JsonRpc.h",
        "line": 188,
        "signature": "void invokeJsonRpcCommand(HttpClient& httpClient, JsonRpcRequest& req, JsonRpcResponse& res, const std::string& user = \"\", const std::string& password = \"\");"
      },
      {
        "file": "src/Rpc/JsonRpc.h",
        "line": 191,
        "signature": "void invokeJsonRpcCommand(HttpClient& httpClient, const std::string& method, const Request& req, Response& res, const std::string& user = \"\", const std::string& password = \"\") {"
      }
    ],
    "invokeBinaryCommand": [
      {
        "file": "src/Rpc/HttpClient.h",
        "line": 120,
        "signature": "void invokeBinaryCommand(HttpClient& client, const std::string& url, const Request& req, Response& res, const std::string& user = \"\", const std::string& password = \"\") {"
      }
    ],
    "fillUnauthorizedResponse": [
      {
        "file": "src/Rpc/HttpServer.cpp",
        "line": 30,
        "signature": "void fillUnauthorizedResponse(CryptoNote::HttpResponse& response) {"
      }
    ],
    "parseRequest": [
      {
        "file": "src/Rpc/JsonRpc.h",
        "line": 71,
        "signature": "bool parseRequest(const std::string& requestBody) {"
      }
    ],
    "JsonRpcError": [
      {
        "file": "src/Rpc/JsonRpc.h",
        "line": 75,
        "signature": "throw JsonRpcError(errParseError);"
      },
      {
        "file": "src/Rpc/JsonRpc.h",
        "line": 79,
        "signature": "throw JsonRpcError(errInvalidRequest);"
      },
      {
        "file": "src/Rpc/JsonRpc.h",
        "line": 139,
        "signature": "throw JsonRpcError(errParseError);"
      },
      {
        "file": "src/Rpc/JsonRpc.h",
        "line": 209,
        "signature": "throw JsonRpcError(JsonRpc::errInvalidParams);"
      },
      {
        "file": "src/Rpc/JsonRpc.h",
        "line": 216,
        "signature": "throw JsonRpcError(JsonRpc::errInternalError);"
      },
      {
        "file": "src/Rpc/RpcServer.cpp",
        "line": 178,
        "signature": "throw JsonRpcError(JsonRpc::errMethodNotFound);"
      },
      {
        "file": "src/Rpc/RpcServer.cpp",
        "line": 182,
        "signature": "throw JsonRpcError(CORE_RPC_ERROR_CODE_CORE_BUSY, \"Core is busy\");"
      },
      {
        "file": "src/Wallet/PoolRpcServer.cpp",
        "line": 134,
        "signature": "throw JsonRpcError(errMethodNotFound);"
      },
      {
        "file": "src/Wallet/WalletRpcServer.cpp",
        "line": 147,
        "signature": "throw JsonRpcError(errMethodNotFound);"
      }
    ],
    "setParams": [
      {
        "file": "src/Rpc/JsonRpc.h",
        "line": 99,
        "signature": "bool setParams(const T& v) {"
      }
    ],
    "setMethod": [
      {
        "file": "src/Rpc/JsonRpc.h",
        "line": 108,
        "signature": "void setMethod(const std::string& m) {"
      }
    ],
    "setId": [
      {
        "file": "src/Rpc/JsonRpc.h",
        "line": 143,
        "signature": "void setId(const OptionalId& id) {"
      }
    ],
    "setError": [
      {
        "file": "src/Rpc/JsonRpc.h",
        "line": 149,
        "signature": "void setError(const JsonRpcError& err) {"
      }
    ],
    "setResult": [
      {
        "file": "src/Rpc/JsonRpc.h",
        "line": 168,
        "signature": "bool setResult(const T& v) {"
      }
    ],
    "invokeMethod": [
      {
        "file": "src/Rpc/JsonRpc.h",
        "line": 204,
        "signature": "bool invokeMethod(const JsonRpcRequest& jsReq, JsonRpcResponse& jsRes, Handler handler) {"
      }
    ],
    "received": [
      {
        "file": "src/Rpc/RpcServer.cpp",
        "line": 331,
        "signature": "uint64_t received(0);"
      }
    ],
    "keyIndex": [
      {
        "file": "src/Rpc/RpcServer.cpp",
        "line": 332,
        "signature": "size_t keyIndex(0);"
      }
    ],
    "get_block_reward": [
      {
        "file": "src/Rpc/RpcServer.cpp",
        "line": 1283,
        "signature": "uint64_t get_block_reward(const Block& blk) {"
      }
    ],
    "setFeeAddress": [
      {
        "file": "src/Rpc/RpcServer.h",
        "line": 37,
        "signature": "bool setFeeAddress(const std::string& fee_address, const AccountPublicAddress& fee_acc);"
      }
    ],
    "setViewKey": [
      {
        "file": "src/Rpc/RpcServer.h",
        "line": 38,
        "signature": "bool setViewKey(const std::string& view_key);"
      }
    ],
    "restrictRPC": [
      {
        "file": "src/Rpc/RpcServer.h",
        "line": 39,
        "signature": "bool restrictRPC(const bool is_resctricted);"
      }
    ],
    "k_on_check_tx_proof": [
      {
        "file": "src/Rpc/RpcServer.h",
        "line": 40,
        "signature": "bool k_on_check_tx_proof(const K_COMMAND_RPC_CHECK_TX_PROOF::request& req, K_COMMAND_RPC_CHECK_TX_PROOF::response& res);"
      }
    ],
    "k_on_check_reserve_proof": [
      {
        "file": "src/Rpc/RpcServer.h",
        "line": 41,
        "signature": "bool k_on_check_reserve_proof(const K_COMMAND_RPC_CHECK_RESERVE_PROOF::request& req, K_COMMAND_RPC_CHECK_RESERVE_PROOF::response& res);"
      }
    ],
    "enableCors": [
      {
        "file": "src/Rpc/RpcServer.h",
        "line": 42,
        "signature": "bool enableCors(const std::string domain);"
      }
    ],
    "remotenode_check_incoming_tx": [
      {
        "file": "src/Rpc/RpcServer.h",
        "line": 43,
        "signature": "bool remotenode_check_incoming_tx(const BinaryArray& tx_blob);"
      }
    ],
    "processJsonRpcRequest": [
      {
        "file": "src/Rpc/RpcServer.h",
        "line": 57,
        "signature": "bool processJsonRpcRequest(const HttpRequest& request, HttpResponse& response);"
      }
    ],
    "isCoreReady": [
      {
        "file": "src/Rpc/RpcServer.h",
        "line": 58,
        "signature": "bool isCoreReady();"
      }
    ],
    "on_get_blocks": [
      {
        "file": "src/Rpc/RpcServer.h",
        "line": 61,
        "signature": "bool on_get_blocks(const COMMAND_RPC_GET_BLOCKS_FAST::request& req, COMMAND_RPC_GET_BLOCKS_FAST::response& res);"
      }
    ],
    "on_query_blocks": [
      {
        "file": "src/Rpc/RpcServer.h",
        "line": 62,
        "signature": "bool on_query_blocks(const COMMAND_RPC_QUERY_BLOCKS::request& req, COMMAND_RPC_QUERY_BLOCKS::response& res);"
      }
    ],
    "on_query_blocks_lite": [
      {
        "file": "src/Rpc/RpcServer.h",
        "line": 63,
        "signature": "bool on_query_blocks_lite(const COMMAND_RPC_QUERY_BLOCKS_LITE::request& req, COMMAND_RPC_QUERY_BLOCKS_LITE::response& res);"
      }
    ],
    "on_get_indexes": [
      {
        "file": "src/Rpc/RpcServer.h",
        "line": 64,
        "signature": "bool on_get_indexes(const COMMAND_RPC_GET_TX_GLOBAL_OUTPUTS_INDEXES::request& req, COMMAND_RPC_GET_TX_GLOBAL_OUTPUTS_INDEXES::response& res);"
      }
    ],
    "on_get_random_outs": [
      {
        "file": "src/Rpc/RpcServer.h",
        "line": 65,
        "signature": "bool on_get_random_outs(const COMMAND_RPC_GET_RANDOM_OUTPUTS_FOR_AMOUNTS::request& req, COMMAND_RPC_GET_RANDOM_OUTPUTS_FOR_AMOUNTS::response& res);"
      }
    ],
    "onGetPoolChanges": [
      {
        "file": "src/Rpc/RpcServer.h",
        "line": 66,
        "signature": "bool onGetPoolChanges(const COMMAND_RPC_GET_POOL_CHANGES::request& req, COMMAND_RPC_GET_POOL_CHANGES::response& rsp);"
      }
    ],
    "onGetPoolChangesLite": [
      {
        "file": "src/Rpc/RpcServer.h",
        "line": 67,
        "signature": "bool onGetPoolChangesLite(const COMMAND_RPC_GET_POOL_CHANGES_LITE::request& req, COMMAND_RPC_GET_POOL_CHANGES_LITE::response& rsp);"
      }
    ],
    "on_get_info": [
      {
        "file": "src/Rpc/RpcServer.h",
        "line": 70,
        "signature": "bool on_get_info(const COMMAND_RPC_GET_INFO::request& req, COMMAND_RPC_GET_INFO::response& res);"
      }
    ],
    "on_get_height": [
      {
        "file": "src/Rpc/RpcServer.h",
        "line": 71,
        "signature": "bool on_get_height(const COMMAND_RPC_GET_HEIGHT::request& req, COMMAND_RPC_GET_HEIGHT::response& res);"
      },
      {
        "file": "src/Wallet/PoolRpcServer.h",
        "line": 71,
        "signature": "bool on_get_height(const wallet_rpc::COMMAND_RPC_GET_HEIGHT::request& req, wallet_rpc::COMMAND_RPC_GET_HEIGHT::response& res);"
      },
      {
        "file": "src/Wallet/WalletRpcServer.h",
        "line": 73,
        "signature": "bool on_get_height(const wallet_rpc::COMMAND_RPC_GET_HEIGHT::request& req, wallet_rpc::COMMAND_RPC_GET_HEIGHT::response& res);"
      }
    ],
    "on_get_peer_list": [
      {
        "file": "src/Rpc/RpcServer.h",
        "line": 72,
        "signature": "bool on_get_peer_list(const COMMAND_RPC_GET_PEER_LIST::request& req, COMMAND_RPC_GET_PEER_LIST::response& res);"
      }
    ],
    "on_get_transactions": [
      {
        "file": "src/Rpc/RpcServer.h",
        "line": 73,
        "signature": "bool on_get_transactions(const COMMAND_RPC_GET_TRANSACTIONS::request& req, COMMAND_RPC_GET_TRANSACTIONS::response& res);"
      }
    ],
    "on_send_raw_tx": [
      {
        "file": "src/Rpc/RpcServer.h",
        "line": 74,
        "signature": "bool on_send_raw_tx(const COMMAND_RPC_SEND_RAW_TX::request& req, COMMAND_RPC_SEND_RAW_TX::response& res);"
      }
    ],
    "on_start_mining": [
      {
        "file": "src/Rpc/RpcServer.h",
        "line": 75,
        "signature": "bool on_start_mining(const COMMAND_RPC_START_MINING::request& req, COMMAND_RPC_START_MINING::response& res);"
      }
    ],
    "on_stop_mining": [
      {
        "file": "src/Rpc/RpcServer.h",
        "line": 76,
        "signature": "bool on_stop_mining(const COMMAND_RPC_STOP_MINING::request& req, COMMAND_RPC_STOP_MINING::response& res);"
      }
    ],
    "on_stop_daemon": [
      {
        "file": "src/Rpc/RpcServer.h",
        "line": 77,
        "signature": "bool on_stop_daemon(const COMMAND_RPC_STOP_DAEMON::request& req, COMMAND_RPC_STOP_DAEMON::response& res);"
      }
    ],
    "on_get_fee_address": [
      {
        "file": "src/Rpc/RpcServer.h",
        "line": 78,
        "signature": "bool on_get_fee_address(const COMMAND_RPC_GET_FEE_ADDRESS::request& req, COMMAND_RPC_GET_FEE_ADDRESS::response& res);"
      }
    ],
    "on_alt_blocks_list_json": [
      {
        "file": "src/Rpc/RpcServer.h",
        "line": 79,
        "signature": "bool on_alt_blocks_list_json(const COMMAND_RPC_GET_ALT_BLOCKS_LIST::request &req, COMMAND_RPC_GET_ALT_BLOCKS_LIST::response &res);"
      }
    ],
    "on_get_payment_id": [
      {
        "file": "src/Rpc/RpcServer.h",
        "line": 80,
        "signature": "bool on_get_payment_id(const COMMAND_RPC_GEN_PAYMENT_ID::request& req, COMMAND_RPC_GEN_PAYMENT_ID::response& res);"
      }
    ],
    "on_getblockcount": [
      {
        "file": "src/Rpc/RpcServer.h",
        "line": 83,
        "signature": "bool on_getblockcount(const COMMAND_RPC_GETBLOCKCOUNT::request& req, COMMAND_RPC_GETBLOCKCOUNT::response& res);"
      }
    ],
    "on_getblockhash": [
      {
        "file": "src/Rpc/RpcServer.h",
        "line": 84,
        "signature": "bool on_getblockhash(const COMMAND_RPC_GETBLOCKHASH::request& req, COMMAND_RPC_GETBLOCKHASH::response& res);"
      }
    ],
    "on_getblocktemplate": [
      {
        "file": "src/Rpc/RpcServer.h",
        "line": 85,
        "signature": "bool on_getblocktemplate(const COMMAND_RPC_GETBLOCKTEMPLATE::request& req, COMMAND_RPC_GETBLOCKTEMPLATE::response& res);"
      }
    ],
    "on_get_currency_id": [
      {
        "file": "src/Rpc/RpcServer.h",
        "line": 86,
        "signature": "bool on_get_currency_id(const COMMAND_RPC_GET_CURRENCY_ID::request& req, COMMAND_RPC_GET_CURRENCY_ID::response& res);"
      }
    ],
    "on_submitblock": [
      {
        "file": "src/Rpc/RpcServer.h",
        "line": 87,
        "signature": "bool on_submitblock(const COMMAND_RPC_SUBMITBLOCK::request& req, COMMAND_RPC_SUBMITBLOCK::response& res);"
      }
    ],
    "on_get_last_block_header": [
      {
        "file": "src/Rpc/RpcServer.h",
        "line": 88,
        "signature": "bool on_get_last_block_header(const COMMAND_RPC_GET_LAST_BLOCK_HEADER::request& req, COMMAND_RPC_GET_LAST_BLOCK_HEADER::response& res);"
      }
    ],
    "on_get_block_header_by_hash": [
      {
        "file": "src/Rpc/RpcServer.h",
        "line": 89,
        "signature": "bool on_get_block_header_by_hash(const COMMAND_RPC_GET_BLOCK_HEADER_BY_HASH::request& req, COMMAND_RPC_GET_BLOCK_HEADER_BY_HASH::response& res);"
      }
    ],
    "on_get_block_header_by_height": [
      {
        "file": "src/Rpc/RpcServer.h",
        "line": 90,
        "signature": "bool on_get_block_header_by_height(const COMMAND_RPC_GET_BLOCK_HEADER_BY_HEIGHT::request& req, COMMAND_RPC_GET_BLOCK_HEADER_BY_HEIGHT::response& res);"
      }
    ],
    "fill_block_header_response": [
      {
        "file": "src/Rpc/RpcServer.h",
        "line": 92,
        "signature": "void fill_block_header_response(const Block& blk, bool orphan_status, uint64_t height, const Crypto::Hash& hash, block_header_response& responce);"
      }
    ],
    "f_on_blocks_list_json": [
      {
        "file": "src/Rpc/RpcServer.h",
        "line": 94,
        "signature": "bool f_on_blocks_list_json(const F_COMMAND_RPC_GET_BLOCKS_LIST::request& req, F_COMMAND_RPC_GET_BLOCKS_LIST::response& res);"
      }
    ],
    "f_on_block_json": [
      {
        "file": "src/Rpc/RpcServer.h",
        "line": 95,
        "signature": "bool f_on_block_json(const F_COMMAND_RPC_GET_BLOCK_DETAILS::request& req, F_COMMAND_RPC_GET_BLOCK_DETAILS::response& res);"
      }
    ],
    "f_on_transaction_json": [
      {
        "file": "src/Rpc/RpcServer.h",
        "line": 96,
        "signature": "bool f_on_transaction_json(const F_COMMAND_RPC_GET_TRANSACTION_DETAILS::request& req, F_COMMAND_RPC_GET_TRANSACTION_DETAILS::response& res);"
      }
    ],
    "f_on_transactions_pool_json": [
      {
        "file": "src/Rpc/RpcServer.h",
        "line": 97,
        "signature": "bool f_on_transactions_pool_json(const F_COMMAND_RPC_GET_POOL::request& req, F_COMMAND_RPC_GET_POOL::response& res);"
      }
    ],
    "f_getMixin": [
      {
        "file": "src/Rpc/RpcServer.h",
        "line": 98,
        "signature": "bool f_getMixin(const Transaction& transaction, uint64_t& mixin);"
      }
    ],
    "readVarintAs": [
      {
        "file": "src/Serialization/BinaryInputStreamSerializer.cpp",
        "line": 33,
        "signature": "void readVarintAs(IInputStream& s, T &i) {"
      }
    ],
    "checkedRead": [
      {
        "file": "src/Serialization/BinaryInputStreamSerializer.h",
        "line": 59,
        "signature": "void checkedRead(char* buf, size_t size);"
      }
    ],
    "checkedWrite": [
      {
        "file": "src/Serialization/BinaryOutputStreamSerializer.h",
        "line": 58,
        "signature": "void checkedWrite(const char* buf, size_t size);"
      }
    ],
    "storeToBinary": [
      {
        "file": "src/Serialization/BinarySerializationTools.h",
        "line": 31,
        "signature": "BinaryArray storeToBinary(const T& obj) {"
      }
    ],
    "ba": [
      {
        "file": "src/Serialization/BinarySerializationTools.h",
        "line": 34,
        "signature": "BinaryOutputStreamSerializer ba(stream);"
      },
      {
        "file": "src/Serialization/BinarySerializationTools.h",
        "line": 42,
        "signature": "BinaryInputStreamSerializer ba(stream);"
      }
    ],
    "loadFromBinary": [
      {
        "file": "src/Serialization/BinarySerializationTools.h",
        "line": 40,
        "signature": "void loadFromBinary(T& obj, const BinaryArray& blob) {"
      }
    ],
    "storeToBinaryFile": [
      {
        "file": "src/Serialization/BinarySerializationTools.h",
        "line": 47,
        "signature": "bool storeToBinaryFile(const T& obj, const std::string& filename) {"
      }
    ],
    "out": [
      {
        "file": "src/Serialization/BinarySerializationTools.h",
        "line": 56,
        "signature": "BinaryOutputStreamSerializer out(stream);"
      }
    ],
    "loadFromBinaryFile": [
      {
        "file": "src/Serialization/BinarySerializationTools.h",
        "line": 72,
        "signature": "bool loadFromBinaryFile(T& obj, const std::string& filename) {"
      }
    ],
    "in": [
      {
        "file": "src/Serialization/BinarySerializationTools.h",
        "line": 81,
        "signature": "BinaryInputStreamSerializer in(stream);"
      }
    ],
    "getNumber": [
      {
        "file": "src/Serialization/JsonInputValueSerializer.cpp",
        "line": 99,
        "signature": "return getNumber(name, value);"
      },
      {
        "file": "src/Serialization/JsonInputValueSerializer.cpp",
        "line": 103,
        "signature": "return getNumber(name, value);"
      },
      {
        "file": "src/Serialization/JsonInputValueSerializer.cpp",
        "line": 107,
        "signature": "return getNumber(name, value);"
      },
      {
        "file": "src/Serialization/JsonInputValueSerializer.cpp",
        "line": 111,
        "signature": "return getNumber(name, value);"
      },
      {
        "file": "src/Serialization/JsonInputValueSerializer.cpp",
        "line": 115,
        "signature": "return getNumber(name, value);"
      },
      {
        "file": "src/Serialization/JsonInputValueSerializer.cpp",
        "line": 119,
        "signature": "return getNumber(name, value);"
      },
      {
        "file": "src/Serialization/JsonInputValueSerializer.cpp",
        "line": 123,
        "signature": "return getNumber(name, value);"
      },
      {
        "file": "src/Serialization/JsonInputValueSerializer.cpp",
        "line": 127,
        "signature": "return getNumber(name, value);"
      },
      {
        "file": "src/Serialization/JsonInputValueSerializer.h",
        "line": 66,
        "signature": "bool getNumber(Common::StringView name, T& v) {"
      }
    ],
    "insertOrPush": [
      {
        "file": "src/Serialization/JsonOutputStreamSerializer.cpp",
        "line": 36,
        "signature": "void insertOrPush(JsonValue& js, Common::StringView name, const T& value) {"
      }
    ],
    "obj": [
      {
        "file": "src/Serialization/JsonOutputStreamSerializer.cpp",
        "line": 59,
        "signature": "JsonValue obj(JsonValue::OBJECT);"
      }
    ],
    "val": [
      {
        "file": "src/Serialization/JsonOutputStreamSerializer.cpp",
        "line": 76,
        "signature": "JsonValue val(JsonValue::ARRAY);"
      }
    ],
    "readPod": [
      {
        "file": "src/Serialization/KVBinaryInputStreamSerializer.cpp",
        "line": 33,
        "signature": "T readPod(Common::IInputStream& s) {"
      }
    ],
    "readPodJson": [
      {
        "file": "src/Serialization/KVBinaryInputStreamSerializer.cpp",
        "line": 40,
        "signature": "JsonValue readPodJson(Common::IInputStream& s) {"
      }
    ],
    "readIntegerJson": [
      {
        "file": "src/Serialization/KVBinaryInputStreamSerializer.cpp",
        "line": 47,
        "signature": "JsonValue readIntegerJson(Common::IInputStream& s) {"
      }
    ],
    "readStringJson": [
      {
        "file": "src/Serialization/KVBinaryInputStreamSerializer.cpp",
        "line": 96,
        "signature": "JsonValue readStringJson(Common::IInputStream& s) {"
      }
    ],
    "readName": [
      {
        "file": "src/Serialization/KVBinaryInputStreamSerializer.cpp",
        "line": 100,
        "signature": "void readName(Common::IInputStream& s, std::string& name) {"
      }
    ],
    "loadValue": [
      {
        "file": "src/Serialization/KVBinaryInputStreamSerializer.cpp",
        "line": 108,
        "signature": "JsonValue loadValue(Common::IInputStream& stream, uint8_t type);"
      },
      {
        "file": "src/Serialization/KVBinaryInputStreamSerializer.cpp",
        "line": 127,
        "signature": "JsonValue loadValue(Common::IInputStream& stream, uint8_t type) {"
      },
      {
        "file": "src/Serialization/KVBinaryInputStreamSerializer.cpp",
        "line": 156,
        "signature": "return loadValue(stream, type);"
      }
    ],
    "loadSection": [
      {
        "file": "src/Serialization/KVBinaryInputStreamSerializer.cpp",
        "line": 109,
        "signature": "JsonValue loadSection(Common::IInputStream& stream);"
      },
      {
        "file": "src/Serialization/KVBinaryInputStreamSerializer.cpp",
        "line": 114,
        "signature": "JsonValue loadSection(Common::IInputStream& stream) {"
      },
      {
        "file": "src/Serialization/KVBinaryInputStreamSerializer.cpp",
        "line": 184,
        "signature": "return loadSection(stream);"
      }
    ],
    "loadEntry": [
      {
        "file": "src/Serialization/KVBinaryInputStreamSerializer.cpp",
        "line": 110,
        "signature": "JsonValue loadEntry(Common::IInputStream& stream);"
      },
      {
        "file": "src/Serialization/KVBinaryInputStreamSerializer.cpp",
        "line": 148,
        "signature": "JsonValue loadEntry(Common::IInputStream& stream) {"
      }
    ],
    "loadArray": [
      {
        "file": "src/Serialization/KVBinaryInputStreamSerializer.cpp",
        "line": 111,
        "signature": "JsonValue loadArray(Common::IInputStream& stream, uint8_t itemType);"
      },
      {
        "file": "src/Serialization/KVBinaryInputStreamSerializer.cpp",
        "line": 153,
        "signature": "return loadArray(stream, type);"
      },
      {
        "file": "src/Serialization/KVBinaryInputStreamSerializer.cpp",
        "line": 159,
        "signature": "JsonValue loadArray(Common::IInputStream& stream, uint8_t itemType) {"
      }
    ],
    "sec": [
      {
        "file": "src/Serialization/KVBinaryInputStreamSerializer.cpp",
        "line": 115,
        "signature": "JsonValue sec(JsonValue::OBJECT);"
      }
    ],
    "arr": [
      {
        "file": "src/Serialization/KVBinaryInputStreamSerializer.cpp",
        "line": 160,
        "signature": "JsonValue arr(JsonValue::ARRAY);"
      }
    ],
    "parseBinary": [
      {
        "file": "src/Serialization/KVBinaryInputStreamSerializer.cpp",
        "line": 171,
        "signature": "JsonValue parseBinary(Common::IInputStream& stream) {"
      }
    ],
    "writePod": [
      {
        "file": "src/Serialization/KVBinaryOutputStreamSerializer.cpp",
        "line": 31,
        "signature": "void writePod(IOutputStream& s, const T& value) {"
      }
    ],
    "packVarint": [
      {
        "file": "src/Serialization/KVBinaryOutputStreamSerializer.cpp",
        "line": 36,
        "signature": "size_t packVarint(IOutputStream& s, uint8_t type_or, size_t pv) {"
      }
    ],
    "sizeof": [
      {
        "file": "src/Serialization/KVBinaryOutputStreamSerializer.cpp",
        "line": 40,
        "signature": "return sizeof(T);"
      }
    ],
    "writeElementName": [
      {
        "file": "src/Serialization/KVBinaryOutputStreamSerializer.cpp",
        "line": 43,
        "signature": "void writeElementName(IOutputStream& s, Common::StringView name) {"
      }
    ],
    "writeArraySize": [
      {
        "file": "src/Serialization/KVBinaryOutputStreamSerializer.cpp",
        "line": 53,
        "signature": "size_t writeArraySize(IOutputStream& s, size_t val) {"
      }
    ],
    "dump": [
      {
        "file": "src/Serialization/KVBinaryOutputStreamSerializer.h",
        "line": 33,
        "signature": "void dump(Common::IOutputStream& target);"
      }
    ],
    "writeElementPrefix": [
      {
        "file": "src/Serialization/KVBinaryOutputStreamSerializer.h",
        "line": 63,
        "signature": "void writeElementPrefix(uint8_t type, Common::StringView name);"
      }
    ],
    "checkArrayPreamble": [
      {
        "file": "src/Serialization/KVBinaryOutputStreamSerializer.h",
        "line": 64,
        "signature": "void checkArrayPreamble(uint8_t type);"
      }
    ],
    "updateState": [
      {
        "file": "src/Serialization/KVBinaryOutputStreamSerializer.h",
        "line": 65,
        "signature": "void updateState(uint8_t type);"
      }
    ],
    "serializeBlockHeight": [
      {
        "file": "src/Serialization/SerializationOverloads.cpp",
        "line": 25,
        "signature": "void serializeBlockHeight(ISerializer& s, uint32_t& blockHeight, Common::StringView name) {"
      },
      {
        "file": "src/Serialization/SerializationOverloads.h",
        "line": 332,
        "signature": "void serializeBlockHeight(ISerializer & s, uint32_t & blockHeight, Common::StringView name);"
      }
    ],
    "serializeGlobalOutputIndex": [
      {
        "file": "src/Serialization/SerializationOverloads.cpp",
        "line": 42,
        "signature": "void serializeGlobalOutputIndex(ISerializer& s, uint32_t& globalOutputIndex, Common::StringView name) {"
      },
      {
        "file": "src/Serialization/SerializationOverloads.h",
        "line": 335,
        "signature": "void serializeGlobalOutputIndex(ISerializer & s, uint32_t & globalOutputIndex, Common::StringView name);"
      }
    ],
    "serializeContainer": [
      {
        "file": "src/Serialization/SerializationOverloads.h",
        "line": 158,
        "signature": "return serializeContainer(value, name, serializer);"
      },
      {
        "file": "src/Serialization/SerializationOverloads.h",
        "line": 164,
        "signature": "return serializeContainer(value, name, serializer);"
      }
    ],
    "serializeSet": [
      {
        "file": "src/Serialization/SerializationOverloads.h",
        "line": 245,
        "signature": "return serializeSet(value, name, serializer);"
      },
      {
        "file": "src/Serialization/SerializationOverloads.h",
        "line": 251,
        "signature": "return serializeSet(value, name, serializer);"
      }
    ],
    "getValueAs": [
      {
        "file": "src/Serialization/SerializationTools.h",
        "line": 32,
        "signature": "T getValueAs(const JsonValue& js) {"
      }
    ],
    "loadFromJsonValue": [
      {
        "file": "src/Serialization/SerializationTools.h",
        "line": 73,
        "signature": "void loadFromJsonValue(T& v, const Common::JsonValue& js) {"
      },
      {
        "file": "src/Serialization/SerializationTools.h",
        "line": 79,
        "signature": "void loadFromJsonValue(std::vector<T>& v, const Common::JsonValue& js) {"
      },
      {
        "file": "src/Serialization/SerializationTools.h",
        "line": 86,
        "signature": "void loadFromJsonValue(std::list<T>& v, const Common::JsonValue& js) {"
      }
    ],
    "loadFromJson": [
      {
        "file": "src/Serialization/SerializationTools.h",
        "line": 98,
        "signature": "bool loadFromJson(T& v, const std::string& buf) {"
      }
    ],
    "loadFromBinaryKeyValue": [
      {
        "file": "src/Serialization/SerializationTools.h",
        "line": 123,
        "signature": "bool loadFromBinaryKeyValue(T& v, const std::string& buf) {"
      }
    ],
    "is_cin_tty": [
      {
        "file": "src/SimpleWallet/PasswordContainer.cpp",
        "line": 36,
        "signature": "bool is_cin_tty();"
      }
    ],
    "password": [
      {
        "file": "src/SimpleWallet/PasswordContainer.h",
        "line": 37,
        "signature": "void password(std::string&& val) { m_password = std::move(val); m_empty = false; }"
      }
    ],
    "read_password": [
      {
        "file": "src/SimpleWallet/PasswordContainer.h",
        "line": 38,
        "signature": "bool read_password();"
      }
    ],
    "read_from_file": [
      {
        "file": "src/SimpleWallet/PasswordContainer.h",
        "line": 41,
        "signature": "bool read_from_file();"
      }
    ],
    "read_from_tty": [
      {
        "file": "src/SimpleWallet/PasswordContainer.h",
        "line": 42,
        "signature": "bool read_from_tty();"
      }
    ],
    "parseUrlAddress": [
      {
        "file": "src/SimpleWallet/SimpleWallet.cpp",
        "line": 85,
        "signature": "bool parseUrlAddress(const std::string& url, std::string& address, uint16_t& port) {"
      }
    ],
    "next": [
      {
        "file": "src/SimpleWallet/SimpleWallet.cpp",
        "line": 135,
        "signature": "ValueT next() {"
      }
    ],
    "parseArguments": [
      {
        "file": "src/SimpleWallet/SimpleWallet.cpp",
        "line": 165,
        "signature": "bool parseArguments(LoggerRef& logger, const std::vector<std::string> &args) {"
      }
    ],
    "printListTransfersHeader": [
      {
        "file": "src/SimpleWallet/SimpleWallet.cpp",
        "line": 417,
        "signature": "void printListTransfersHeader(LoggerRef& logger) {"
      }
    ],
    "printListTransfersItem": [
      {
        "file": "src/SimpleWallet/SimpleWallet.cpp",
        "line": 429,
        "signature": "void printListTransfersItem(LoggerRef& logger, const WalletLegacyTransaction& txInfo, IWalletLegacy& wallet, const Currency& currency) {"
      }
    ],
    "writeAddressFile": [
      {
        "file": "src/SimpleWallet/SimpleWallet.cpp",
        "line": 472,
        "signature": "bool writeAddressFile(const std::string& addressFilename, const std::string& address) {"
      }
    ],
    "processServerAliasResponse": [
      {
        "file": "src/SimpleWallet/SimpleWallet.cpp",
        "line": 483,
        "signature": "bool processServerAliasResponse(const std::string& s, std::string& address) {"
      }
    ],
    "splitUrlToHostAndUri": [
      {
        "file": "src/SimpleWallet/SimpleWallet.cpp",
        "line": 518,
        "signature": "bool splitUrlToHostAndUri(const std::string& aliasUrl, std::string& host, std::string& uri) {"
      }
    ],
    "askAliasesTransfersConfirmation": [
      {
        "file": "src/SimpleWallet/SimpleWallet.cpp",
        "line": 538,
        "signature": "bool askAliasesTransfersConfirmation(const std::map<std::string, std::vector<WalletLegacyTransfer>>& aliases, const Currency& currency) {"
      }
    ],
    "processServerFeeAddressResponse": [
      {
        "file": "src/SimpleWallet/SimpleWallet.cpp",
        "line": 558,
        "signature": "bool processServerFeeAddressResponse(const std::string& response, std::string& fee_address) {"
      }
    ],
    "close_wallet": [
      {
        "file": "src/SimpleWallet/SimpleWallet.cpp",
        "line": 980,
        "signature": "return close_wallet();"
      },
      {
        "file": "src/SimpleWallet/SimpleWallet.h",
        "line": 82,
        "signature": "bool close_wallet();"
      }
    ],
    "cmd": [
      {
        "file": "src/SimpleWallet/SimpleWallet.cpp",
        "line": 1820,
        "signature": "TransferCommand cmd(m_currency);"
      }
    ],
    "process_command": [
      {
        "file": "src/SimpleWallet/SimpleWallet.h",
        "line": 57,
        "signature": "bool process_command(const std::vector<std::string> &args);"
      }
    ],
    "run_console_handler": [
      {
        "file": "src/SimpleWallet/SimpleWallet.h",
        "line": 77,
        "signature": "bool run_console_handler();"
      }
    ],
    "new_wallet": [
      {
        "file": "src/SimpleWallet/SimpleWallet.h",
        "line": 79,
        "signature": "bool new_wallet(const std::string &wallet_file, const std::string& password);"
      },
      {
        "file": "src/SimpleWallet/SimpleWallet.h",
        "line": 80,
        "signature": "bool new_wallet(Crypto::SecretKey &secret_key, Crypto::SecretKey &view_key, const std::string &wallet_file, const std::string& password);"
      }
    ],
    "open_wallet": [
      {
        "file": "src/SimpleWallet/SimpleWallet.h",
        "line": 81,
        "signature": "bool open_wallet(const std::string &wallet_file, const std::string& password);"
      }
    ],
    "show_dust": [
      {
        "file": "src/SimpleWallet/SimpleWallet.h",
        "line": 87,
        "signature": "bool show_dust(const std::vector<std::string> &args);"
      }
    ],
    "sign_message": [
      {
        "file": "src/SimpleWallet/SimpleWallet.h",
        "line": 90,
        "signature": "bool sign_message(const std::vector<std::string> &args);"
      }
    ],
    "verify_signature": [
      {
        "file": "src/SimpleWallet/SimpleWallet.h",
        "line": 91,
        "signature": "bool verify_signature(const std::vector<std::string> &args);"
      }
    ],
    "show_incoming_transfers": [
      {
        "file": "src/SimpleWallet/SimpleWallet.h",
        "line": 94,
        "signature": "bool show_incoming_transfers(const std::vector<std::string> &args);"
      }
    ],
    "show_payments": [
      {
        "file": "src/SimpleWallet/SimpleWallet.h",
        "line": 95,
        "signature": "bool show_payments(const std::vector<std::string> &args);"
      }
    ],
    "show_blockchain_height": [
      {
        "file": "src/SimpleWallet/SimpleWallet.h",
        "line": 96,
        "signature": "bool show_blockchain_height(const std::vector<std::string> &args);"
      }
    ],
    "show_num_unlocked_outputs": [
      {
        "file": "src/SimpleWallet/SimpleWallet.h",
        "line": 97,
        "signature": "bool show_num_unlocked_outputs(const std::vector<std::string> &args);"
      }
    ],
    "optimize_outputs": [
      {
        "file": "src/SimpleWallet/SimpleWallet.h",
        "line": 98,
        "signature": "bool optimize_outputs(const std::vector<std::string> &args);"
      }
    ],
    "get_reserve_proof": [
      {
        "file": "src/SimpleWallet/SimpleWallet.h",
        "line": 99,
        "signature": "bool get_reserve_proof(const std::vector<std::string> &args);"
      }
    ],
    "get_tx_proof": [
      {
        "file": "src/SimpleWallet/SimpleWallet.h",
        "line": 100,
        "signature": "bool get_tx_proof(const std::vector<std::string> &args);"
      }
    ],
    "optimize_all_outputs": [
      {
        "file": "src/SimpleWallet/SimpleWallet.h",
        "line": 101,
        "signature": "bool optimize_all_outputs(const std::vector<std::string> &args);"
      }
    ],
    "listTransfers": [
      {
        "file": "src/SimpleWallet/SimpleWallet.h",
        "line": 102,
        "signature": "bool listTransfers(const std::vector<std::string> &args);"
      }
    ],
    "transfer": [
      {
        "file": "src/SimpleWallet/SimpleWallet.h",
        "line": 103,
        "signature": "bool transfer(const std::vector<std::string> &args);"
      }
    ],
    "payment_id": [
      {
        "file": "src/SimpleWallet/SimpleWallet.h",
        "line": 108,
        "signature": "bool payment_id(const std::vector<std::string> &args);"
      }
    ],
    "ask_wallet_create_if_needed": [
      {
        "file": "src/SimpleWallet/SimpleWallet.h",
        "line": 110,
        "signature": "bool ask_wallet_create_if_needed();"
      }
    ],
    "log_incorrect_words": [
      {
        "file": "src/SimpleWallet/SimpleWallet.h",
        "line": 115,
        "signature": "void log_incorrect_words(std::vector<std::string>);"
      }
    ],
    "is_valid_mnemonic": [
      {
        "file": "src/SimpleWallet/SimpleWallet.h",
        "line": 116,
        "signature": "bool is_valid_mnemonic(std::string &, Crypto::SecretKey &);"
      }
    ],
    "get": [
      {
        "file": "src/System/Context.h",
        "line": 121,
        "signature": "void get() {"
      }
    ],
    "ContextGroup": [
      {
        "file": "src/System/ContextGroup.h",
        "line": 26,
        "signature": "explicit ContextGroup(Dispatcher& dispatcher);"
      }
    ],
    "Event": [
      {
        "file": "src/System/Event.h",
        "line": 27,
        "signature": "explicit Event(Dispatcher& dispatcher);"
      }
    ],
    "EventLock": [
      {
        "file": "src/System/EventLock.h",
        "line": 26,
        "signature": "explicit EventLock(Event& event);"
      }
    ],
    "readUint8": [
      {
        "file": "src/System/Ipv4Address.cpp",
        "line": 25,
        "signature": "uint8_t readUint8(const std::string& source, size_t& offset) {"
      }
    ],
    "Ipv4Address": [
      {
        "file": "src/System/Ipv4Address.h",
        "line": 27,
        "signature": "explicit Ipv4Address(uint32_t value);"
      },
      {
        "file": "src/System/Ipv4Address.h",
        "line": 28,
        "signature": "explicit Ipv4Address(const std::string& dottedDecimal);"
      }
    ],
    "asyncProcedure": [
      {
        "file": "src/System/RemoteContext.h",
        "line": 89,
        "signature": "T asyncProcedure() {"
      }
    ],
    "guard": [
      {
        "file": "src/System/RemoteContext.h",
        "line": 90,
        "signature": "NotifyOnDestruction guard(dispatcher, event);"
      }
    ],
    "procedure": [
      {
        "file": "src/System/RemoteContext.h",
        "line": 92,
        "signature": "return procedure();"
      }
    ],
    "TcpStreambuf": [
      {
        "file": "src/System/TcpStream.h",
        "line": 30,
        "signature": "explicit TcpStreambuf(TcpConnection& connection);"
      }
    ],
    "dumpBuffer": [
      {
        "file": "src/System/TcpStream.h",
        "line": 43,
        "signature": "bool dumpBuffer(bool finalize);"
      }
    ],
    "getConsumerSynchronizationState": [
      {
        "file": "src/Transfers/BlockchainSynchronizer.cpp",
        "line": 78,
        "signature": "return getConsumerSynchronizationState(consumer);"
      }
    ],
    "setFutureStateIf": [
      {
        "file": "src/Transfers/BlockchainSynchronizer.cpp",
        "line": 167,
        "signature": "return setFutureStateIf(s, [this, s] { return s > m_futureState; });"
      }
    ],
    "startPoolSync": [
      {
        "file": "src/Transfers/BlockchainSynchronizer.h",
        "line": 103,
        "signature": "void startPoolSync();"
      }
    ],
    "startBlockchainSync": [
      {
        "file": "src/Transfers/BlockchainSynchronizer.h",
        "line": 104,
        "signature": "void startBlockchainSync();"
      }
    ],
    "processBlocks": [
      {
        "file": "src/Transfers/BlockchainSynchronizer.h",
        "line": 106,
        "signature": "void processBlocks(GetBlocksResponse& response);"
      }
    ],
    "updateConsumers": [
      {
        "file": "src/Transfers/BlockchainSynchronizer.h",
        "line": 107,
        "signature": "UpdateConsumersResult updateConsumers(const BlockchainInterval& interval, const std::vector<CompleteBlock>& blocks);"
      }
    ],
    "doRemoveUnconfirmedTransaction": [
      {
        "file": "src/Transfers/BlockchainSynchronizer.h",
        "line": 111,
        "signature": "void doRemoveUnconfirmedTransaction(const Crypto::Hash& transactionHash);"
      }
    ],
    "setFutureState": [
      {
        "file": "src/Transfers/BlockchainSynchronizer.h",
        "line": 114,
        "signature": "bool setFutureState(State s);"
      }
    ],
    "actualizeFutureState": [
      {
        "file": "src/Transfers/BlockchainSynchronizer.h",
        "line": 117,
        "signature": "void actualizeFutureState();"
      }
    ],
    "workingProcedure": [
      {
        "file": "src/Transfers/BlockchainSynchronizer.h",
        "line": 121,
        "signature": "void workingProcedure();"
      }
    ],
    "getCommonHistory": [
      {
        "file": "src/Transfers/BlockchainSynchronizer.h",
        "line": 123,
        "signature": "GetBlocksRequest getCommonHistory();"
      }
    ],
    "synchronizationProgressUpdated": [
      {
        "file": "src/Transfers/IBlockchainSynchronizer.h",
        "line": 38,
        "signature": "virtual void synchronizationProgressUpdated(uint32_t processedBlockCount, uint32_t totalBlockCount) {}"
      }
    ],
    "synchronizationCompleted": [
      {
        "file": "src/Transfers/IBlockchainSynchronizer.h",
        "line": 39,
        "signature": "virtual void synchronizationCompleted(std::error_code result) {}"
      }
    ],
    "onBlocksAdded": [
      {
        "file": "src/Transfers/IBlockchainSynchronizer.h",
        "line": 59,
        "signature": "virtual void onBlocksAdded(IBlockchainConsumer* consumer, const std::vector<Crypto::Hash>& blockHashes) {}"
      }
    ],
    "onBlockchainDetach": [
      {
        "file": "src/Transfers/IBlockchainSynchronizer.h",
        "line": 60,
        "signature": "virtual void onBlockchainDetach(IBlockchainConsumer* consumer, uint32_t blockIndex) {}"
      },
      {
        "file": "src/Transfers/TransfersSubscription.h",
        "line": 31,
        "signature": "void onBlockchainDetach(uint32_t height);"
      }
    ],
    "onTransactionDeleteBegin": [
      {
        "file": "src/Transfers/IBlockchainSynchronizer.h",
        "line": 61,
        "signature": "virtual void onTransactionDeleteBegin(IBlockchainConsumer* consumer, Crypto::Hash transactionHash) {}"
      }
    ],
    "onTransactionDeleteEnd": [
      {
        "file": "src/Transfers/IBlockchainSynchronizer.h",
        "line": 62,
        "signature": "virtual void onTransactionDeleteEnd(IBlockchainConsumer* consumer, Crypto::Hash transactionHash) {}"
      }
    ],
    "onTransactionUpdated": [
      {
        "file": "src/Transfers/IBlockchainSynchronizer.h",
        "line": 63,
        "signature": "virtual void onTransactionUpdated(IBlockchainConsumer* consumer, const Crypto::Hash& transactionHash, const std::vector<ITransfersContainer*>& containers) {}"
      }
    ],
    "SynchronizationState": [
      {
        "file": "src/Transfers/SynchronizationState.h",
        "line": 40,
        "signature": "explicit SynchronizationState(const Crypto::Hash& genesisBlockHash) {"
      }
    ],
    "detach": [
      {
        "file": "src/Transfers/SynchronizationState.h",
        "line": 47,
        "signature": "void detach(uint32_t height);"
      },
      {
        "file": "src/Transfers/TransfersContainer.h",
        "line": 207,
        "signature": "void detach(uint32_t height, std::vector<Crypto::Hash>& deletedTransactions, std::vector<TransactionOutputInformation>& lockedTransfers);"
      }
    ],
    "addBlocks": [
      {
        "file": "src/Transfers/SynchronizationState.h",
        "line": 48,
        "signature": "void addBlocks(const Crypto::Hash* blockHashes, uint32_t height, uint32_t count);"
      }
    ],
    "processTransaction": [
      {
        "file": "src/Transfers/TransfersConsumer.cpp",
        "line": 364,
        "signature": "return processTransaction(unconfirmedBlockInfo, transaction);"
      },
      {
        "file": "src/Transfers/TransfersConsumer.h",
        "line": 76,
        "signature": "void processTransaction(const TransactionBlockInfo& blockInfo, const ITransactionReader& tx, const PreprocessInfo& info);"
      }
    ],
    "removeSubscription": [
      {
        "file": "src/Transfers/TransfersConsumer.h",
        "line": 43,
        "signature": "bool removeSubscription(const AccountPublicAddress& address);"
      }
    ],
    "getSubscriptions": [
      {
        "file": "src/Transfers/TransfersConsumer.h",
        "line": 45,
        "signature": "void getSubscriptions(std::vector<AccountPublicAddress>& subscriptions);"
      }
    ],
    "initTransactionPool": [
      {
        "file": "src/Transfers/TransfersConsumer.h",
        "line": 47,
        "signature": "void initTransactionPool(const std::unordered_set<Crypto::Hash>& uncommitedTransactions);"
      },
      {
        "file": "src/Transfers/TransfersSynchronizer.h",
        "line": 45,
        "signature": "void initTransactionPool(const std::unordered_set<Crypto::Hash>& uncommitedTransactions);"
      },
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 335,
        "signature": "void initTransactionPool();"
      },
      {
        "file": "src/Wallet/WalletSerializationV1.h",
        "line": 104,
        "signature": "void initTransactionPool();"
      }
    ],
    "addPublicKeysSeen": [
      {
        "file": "src/Transfers/TransfersConsumer.h",
        "line": 48,
        "signature": "void addPublicKeysSeen(const Crypto::Hash& transactionHash, const Crypto::PublicKey& outputKey);"
      },
      {
        "file": "src/Transfers/TransfersSynchronizer.h",
        "line": 56,
        "signature": "void addPublicKeysSeen(const AccountPublicAddress& acc, const Crypto::Hash& transactionHash, const Crypto::PublicKey& outputKey);"
      }
    ],
    "forEachSubscription": [
      {
        "file": "src/Transfers/TransfersConsumer.h",
        "line": 63,
        "signature": "void forEachSubscription(F action) {"
      }
    ],
    "updateSyncStart": [
      {
        "file": "src/Transfers/TransfersConsumer.h",
        "line": 82,
        "signature": "void updateSyncStart();"
      }
    ],
    "sort": [
      {
        "file": "src/Transfers/TransfersContainer.cpp",
        "line": 68,
        "signature": "void sort() {"
      }
    ],
    "lessTIterator": [
      {
        "file": "src/Transfers/TransfersContainer.cpp",
        "line": 85,
        "signature": "static bool lessTIterator(const TIterator& it1, const TIterator& it2) {"
      }
    ],
    "makeTransferUnlockJob": [
      {
        "file": "src/Transfers/TransfersContainer.cpp",
        "line": 101,
        "signature": "TransferUnlockJob makeTransferUnlockJob(const TransactionOutputInformationEx& output, uint32_t transactionSpendableAge) {"
      }
    ],
    "descriptor": [
      {
        "file": "src/Transfers/TransfersContainer.cpp",
        "line": 291,
        "signature": "SpentOutputDescriptor descriptor(transfer);"
      },
      {
        "file": "src/Transfers/TransfersContainer.cpp",
        "line": 328,
        "signature": "SpentOutputDescriptor descriptor(&input.keyImage);"
      },
      {
        "file": "src/Transfers/TransfersContainer.cpp",
        "line": 440,
        "signature": "SpentOutputDescriptor descriptor(transfer);"
      },
      {
        "file": "src/Transfers/TransfersContainer.cpp",
        "line": 601,
        "signature": "SpentOutputDescriptor descriptor(&keyImage);"
      }
    ],
    "updateVisibility": [
      {
        "file": "src/Transfers/TransfersContainer.cpp",
        "line": 584,
        "signature": "void updateVisibility(C& collection, const T& range, bool visible) {"
      }
    ],
    "doAdvanceHeight": [
      {
        "file": "src/Transfers/TransfersContainer.cpp",
        "line": 633,
        "signature": "return doAdvanceHeight(height);"
      }
    ],
    "getUnlockingTransfers": [
      {
        "file": "src/Transfers/TransfersContainer.cpp",
        "line": 647,
        "signature": "return getUnlockingTransfers(prevHeight, m_currentHeight);"
      }
    ],
    "isIncluded": [
      {
        "file": "src/Transfers/TransfersContainer.cpp",
        "line": 962,
        "signature": "return isIncluded(info, state, flags);"
      },
      {
        "file": "src/Transfers/TransfersContainer.h",
        "line": 361,
        "signature": "static bool isIncluded(const TransactionOutputInformationEx& output, uint32_t state, uint32_t flags);"
      }
    ],
    "assign": [
      {
        "file": "src/Transfers/TransfersContainer.h",
        "line": 80,
        "signature": "void assign(const Crypto::KeyImage* keyImage);"
      },
      {
        "file": "src/Transfers/TransfersContainer.h",
        "line": 81,
        "signature": "void assign(uint64_t amount, uint32_t globalOutputIndex);"
      }
    ],
    "deleteUnconfirmedTransaction": [
      {
        "file": "src/Transfers/TransfersContainer.h",
        "line": 204,
        "signature": "bool deleteUnconfirmedTransaction(const Crypto::Hash& transactionHash);"
      },
      {
        "file": "src/Transfers/TransfersSubscription.h",
        "line": 38,
        "signature": "void deleteUnconfirmedTransaction(const Crypto::Hash& transactionHash);"
      }
    ],
    "markTransactionConfirmed": [
      {
        "file": "src/Transfers/TransfersContainer.h",
        "line": 205,
        "signature": "bool markTransactionConfirmed(const TransactionBlockInfo& block, const Crypto::Hash& transactionHash, const std::vector<uint32_t>& globalIndices);"
      },
      {
        "file": "src/Transfers/TransfersSubscription.h",
        "line": 39,
        "signature": "void markTransactionConfirmed(const TransactionBlockInfo& block, const Crypto::Hash& transactionHash, const std::vector<uint32_t>& globalIndices);"
      }
    ],
    "addTransaction": [
      {
        "file": "src/Transfers/TransfersContainer.h",
        "line": 354,
        "signature": "void addTransaction(const TransactionBlockInfo& block, const ITransactionReader& tx, std::vector<std::string>&& messages);"
      }
    ],
    "deleteTransactionTransfers": [
      {
        "file": "src/Transfers/TransfersContainer.h",
        "line": 358,
        "signature": "void deleteTransactionTransfers(const Crypto::Hash& transactionHash);"
      }
    ],
    "updateTransfersVisibility": [
      {
        "file": "src/Transfers/TransfersContainer.h",
        "line": 362,
        "signature": "void updateTransfersVisibility(const Crypto::KeyImage& keyImage);"
      }
    ],
    "addUnlockJob": [
      {
        "file": "src/Transfers/TransfersContainer.h",
        "line": 363,
        "signature": "void addUnlockJob(const TransactionOutputInformationEx& output);"
      }
    ],
    "deleteUnlockJob": [
      {
        "file": "src/Transfers/TransfersContainer.h",
        "line": 364,
        "signature": "void deleteUnlockJob(const TransactionOutputInformationEx& output);"
      }
    ],
    "copyToSpent": [
      {
        "file": "src/Transfers/TransfersContainer.h",
        "line": 370,
        "signature": "void copyToSpent(const TransactionBlockInfo& block, const ITransactionReader& tx, size_t inputIndex, const TransactionOutputInformationEx& output);"
      }
    ],
    "getSyncStart": [
      {
        "file": "src/Transfers/TransfersSubscription.h",
        "line": 30,
        "signature": "SynchronizationStart getSyncStart();"
      }
    ],
    "onError": [
      {
        "file": "src/Transfers/TransfersSubscription.h",
        "line": 32,
        "signature": "void onError(const std::error_code& ec, uint32_t height);"
      }
    ],
    "advanceHeight": [
      {
        "file": "src/Transfers/TransfersSubscription.h",
        "line": 33,
        "signature": "bool advanceHeight(uint32_t height);"
      }
    ],
    "setObjectState": [
      {
        "file": "src/Transfers/TransfersSynchronizer.cpp",
        "line": 218,
        "signature": "void setObjectState(IStreamSerializable& obj, const std::string& state) {"
      }
    ],
    "subscribeConsumerNotifications": [
      {
        "file": "src/Transfers/TransfersSynchronizer.h",
        "line": 54,
        "signature": "void subscribeConsumerNotifications(const Crypto::PublicKey& viewPublicKey, ITransfersSynchronizerObserver* observer);"
      }
    ],
    "unsubscribeConsumerNotifications": [
      {
        "file": "src/Transfers/TransfersSynchronizer.h",
        "line": 55,
        "signature": "void unsubscribeConsumerNotifications(const Crypto::PublicKey& viewPublicKey, ITransfersSynchronizerObserver* observer);"
      }
    ],
    "verify_keys": [
      {
        "file": "src/Wallet/LegacyKeysImporter.cpp",
        "line": 49,
        "signature": "bool verify_keys(const SecretKey& sec, const PublicKey& expected_pub) {"
      }
    ],
    "loadKeysFromFile": [
      {
        "file": "src/Wallet/LegacyKeysImporter.cpp",
        "line": 55,
        "signature": "void loadKeysFromFile(const std::string& filename, const std::string& password, CryptoNote::AccountBase& account) {"
      }
    ],
    "importLegacyKeys": [
      {
        "file": "src/Wallet/LegacyKeysImporter.cpp",
        "line": 89,
        "signature": "void importLegacyKeys(const std::string& legacyKeysFilename, const std::string& password, std::ostream& destination) {"
      },
      {
        "file": "src/Wallet/LegacyKeysImporter.h",
        "line": 25,
        "signature": "void importLegacyKeys(const std::string& legacyKeysFilename, const std::string& password, std::ostream& destination);"
      }
    ],
    "on_getbalance": [
      {
        "file": "src/Wallet/PoolRpcServer.h",
        "line": 64,
        "signature": "bool on_getbalance(const wallet_rpc::COMMAND_RPC_GET_BALANCE::request& req, wallet_rpc::COMMAND_RPC_GET_BALANCE::response& res);"
      },
      {
        "file": "src/Wallet/WalletRpcServer.h",
        "line": 64,
        "signature": "bool on_getbalance(const wallet_rpc::COMMAND_RPC_GET_BALANCE::request& req, wallet_rpc::COMMAND_RPC_GET_BALANCE::response& res);"
      }
    ],
    "on_create_integrated": [
      {
        "file": "src/Wallet/PoolRpcServer.h",
        "line": 65,
        "signature": "bool on_create_integrated(const wallet_rpc::COMMAND_RPC_CREATE_INTEGRATED::request& req, wallet_rpc::COMMAND_RPC_CREATE_INTEGRATED::response& res);"
      },
      {
        "file": "src/Wallet/WalletRpcServer.h",
        "line": 65,
        "signature": "bool on_create_integrated(const wallet_rpc::COMMAND_RPC_CREATE_INTEGRATED::request& req, wallet_rpc::COMMAND_RPC_CREATE_INTEGRATED::response& res);"
      }
    ],
    "on_transfer": [
      {
        "file": "src/Wallet/PoolRpcServer.h",
        "line": 66,
        "signature": "bool on_transfer(const wallet_rpc::COMMAND_RPC_TRANSFER::request& req, wallet_rpc::COMMAND_RPC_TRANSFER::response& res);"
      },
      {
        "file": "src/Wallet/WalletRpcServer.h",
        "line": 66,
        "signature": "bool on_transfer(const wallet_rpc::COMMAND_RPC_TRANSFER::request& req, wallet_rpc::COMMAND_RPC_TRANSFER::response& res);"
      }
    ],
    "on_store": [
      {
        "file": "src/Wallet/PoolRpcServer.h",
        "line": 67,
        "signature": "bool on_store(const wallet_rpc::COMMAND_RPC_STORE::request& req, wallet_rpc::COMMAND_RPC_STORE::response& res);"
      },
      {
        "file": "src/Wallet/WalletRpcServer.h",
        "line": 67,
        "signature": "bool on_store(const wallet_rpc::COMMAND_RPC_STORE::request& req, wallet_rpc::COMMAND_RPC_STORE::response& res);"
      }
    ],
    "on_get_messages": [
      {
        "file": "src/Wallet/PoolRpcServer.h",
        "line": 68,
        "signature": "bool on_get_messages(const wallet_rpc::COMMAND_RPC_GET_MESSAGES::request& req, wallet_rpc::COMMAND_RPC_GET_MESSAGES::response& res);"
      },
      {
        "file": "src/Wallet/WalletRpcServer.h",
        "line": 68,
        "signature": "bool on_get_messages(const wallet_rpc::COMMAND_RPC_GET_MESSAGES::request& req, wallet_rpc::COMMAND_RPC_GET_MESSAGES::response& res);"
      }
    ],
    "on_get_payments": [
      {
        "file": "src/Wallet/PoolRpcServer.h",
        "line": 69,
        "signature": "bool on_get_payments(const wallet_rpc::COMMAND_RPC_GET_PAYMENTS::request& req, wallet_rpc::COMMAND_RPC_GET_PAYMENTS::response& res);"
      },
      {
        "file": "src/Wallet/WalletRpcServer.h",
        "line": 69,
        "signature": "bool on_get_payments(const wallet_rpc::COMMAND_RPC_GET_PAYMENTS::request& req, wallet_rpc::COMMAND_RPC_GET_PAYMENTS::response& res);"
      }
    ],
    "on_get_transfers": [
      {
        "file": "src/Wallet/PoolRpcServer.h",
        "line": 70,
        "signature": "bool on_get_transfers(const wallet_rpc::COMMAND_RPC_GET_TRANSFERS::request& req, wallet_rpc::COMMAND_RPC_GET_TRANSFERS::response& res);"
      },
      {
        "file": "src/Wallet/WalletRpcServer.h",
        "line": 70,
        "signature": "bool on_get_transfers(const wallet_rpc::COMMAND_RPC_GET_TRANSFERS::request& req, wallet_rpc::COMMAND_RPC_GET_TRANSFERS::response& res);"
      }
    ],
    "on_get_outputs": [
      {
        "file": "src/Wallet/PoolRpcServer.h",
        "line": 72,
        "signature": "bool on_get_outputs(const wallet_rpc::COMMAND_RPC_GET_OUTPUTS::request& req, wallet_rpc::COMMAND_RPC_GET_OUTPUTS::response& res);"
      },
      {
        "file": "src/Wallet/WalletRpcServer.h",
        "line": 74,
        "signature": "bool on_get_outputs(const wallet_rpc::COMMAND_RPC_GET_OUTPUTS::request& req, wallet_rpc::COMMAND_RPC_GET_OUTPUTS::response& res);"
      }
    ],
    "on_optimize": [
      {
        "file": "src/Wallet/PoolRpcServer.h",
        "line": 73,
        "signature": "bool on_optimize(const wallet_rpc::COMMAND_RPC_OPTIMIZE::request& req, wallet_rpc::COMMAND_RPC_OPTIMIZE::response& res);"
      },
      {
        "file": "src/Wallet/WalletRpcServer.h",
        "line": 75,
        "signature": "bool on_optimize(const wallet_rpc::COMMAND_RPC_OPTIMIZE::request& req, wallet_rpc::COMMAND_RPC_OPTIMIZE::response& res);"
      }
    ],
    "on_reset": [
      {
        "file": "src/Wallet/PoolRpcServer.h",
        "line": 74,
        "signature": "bool on_reset(const wallet_rpc::COMMAND_RPC_RESET::request& req, wallet_rpc::COMMAND_RPC_RESET::response& res);"
      },
      {
        "file": "src/Wallet/WalletRpcServer.h",
        "line": 78,
        "signature": "bool on_reset(const wallet_rpc::COMMAND_RPC_RESET::request& req, wallet_rpc::COMMAND_RPC_RESET::response& res);"
      }
    ],
    "addAsyncContext": [
      {
        "file": "src/Wallet/WalletAsyncContextCounter.h",
        "line": 31,
        "signature": "void addAsyncContext();"
      }
    ],
    "delAsyncContext": [
      {
        "file": "src/Wallet/WalletAsyncContextCounter.h",
        "line": 32,
        "signature": "void delAsyncContext();"
      }
    ],
    "waitAsyncContextsFinish": [
      {
        "file": "src/Wallet/WalletAsyncContextCounter.h",
        "line": 35,
        "signature": "void waitAsyncContextsFinish();"
      }
    ],
    "outputStream": [
      {
        "file": "src/Wallet/WalletGreen.cpp",
        "line": 678,
        "signature": "StringOutputStream outputStream(serializedKeys);"
      }
    ],
    "suffixSerializer": [
      {
        "file": "src/Wallet/WalletGreen.cpp",
        "line": 1168,
        "signature": "BinaryInputStreamSerializer suffixSerializer(suffixStream);"
      },
      {
        "file": "src/Wallet/WalletGreen.cpp",
        "line": 1253,
        "signature": "BinaryOutputStreamSerializer suffixSerializer(suffixStream);"
      }
    ],
    "doCreateAddress": [
      {
        "file": "src/Wallet/WalletGreen.cpp",
        "line": 1592,
        "signature": "return doCreateAddress(spendKey.publicKey, spendKey.secretKey, creationTimestamp);"
      },
      {
        "file": "src/Wallet/WalletGreen.cpp",
        "line": 1603,
        "signature": "return doCreateAddress(spendPublicKey, spendSecretKey, creationTimestamp);"
      },
      {
        "file": "src/Wallet/WalletGreen.cpp",
        "line": 1613,
        "signature": "return doCreateAddress(spendPublicKey, NULL_SECRET_KEY, creationTimestamp);"
      }
    ],
    "doCreateAddressList": [
      {
        "file": "src/Wallet/WalletGreen.cpp",
        "line": 1633,
        "signature": "return doCreateAddressList(addressDataList);"
      }
    ],
    "doTransfer": [
      {
        "file": "src/Wallet/WalletGreen.cpp",
        "line": 1978,
        "signature": "return doTransfer(transactionParameters, transactionSK);"
      },
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 282,
        "signature": "size_t doTransfer(const TransactionParameters &transactionParameters, Crypto::SecretKey &transactionSK);"
      }
    ],
    "validateSaveAndSendTransaction": [
      {
        "file": "src/Wallet/WalletGreen.cpp",
        "line": 2082,
        "signature": "return validateSaveAndSendTransaction(*preparedTransaction.transaction, preparedTransaction.destinations, false, true);"
      },
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 307,
        "signature": "size_t validateSaveAndSendTransaction(const ITransactionReader &transaction, const std::vector<WalletTransfer> &destinations, bool isFusion, bool send);"
      }
    ],
    "getCurrentTimestampAdjusted": [
      {
        "file": "src/Wallet/WalletGreen.cpp",
        "line": 2395,
        "signature": "return getCurrentTimestampAdjusted();"
      },
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 159,
        "signature": "uint64_t getCurrentTimestampAdjusted();"
      }
    ],
    "eraseTransfers": [
      {
        "file": "src/Wallet/WalletGreen.cpp",
        "line": 2695,
        "signature": "return eraseTransfers(transactionId, firstTransferIdx, [&address, eraseOutputTransfers](bool isOutput, const std::string &transferAddress) {"
      },
      {
        "file": "src/Wallet/WalletGreen.cpp",
        "line": 2704,
        "signature": "return eraseTransfers(transactionId, firstTransferIdx, [this, &knownAddresses, eraseOutputTransfers](bool isOutput, const std::string &transferAddress) {"
      }
    ],
    "getTransactionsInBlocks": [
      {
        "file": "src/Wallet/WalletGreen.cpp",
        "line": 3131,
        "signature": "return getTransactionsInBlocks(blockIndex, count);"
      },
      {
        "file": "src/Wallet/WalletGreen.cpp",
        "line": 3157,
        "signature": "return getTransactionsInBlocks(blockIndex, count);"
      }
    ],
    "getDepositsInBlocks": [
      {
        "file": "src/Wallet/WalletGreen.cpp",
        "line": 3149,
        "signature": "return getDepositsInBlocks(blockIndex, count);"
      },
      {
        "file": "src/Wallet/WalletGreen.cpp",
        "line": 3165,
        "signature": "return getDepositsInBlocks(blockIndex, count);"
      }
    ],
    "insertDeposit": [
      {
        "file": "src/Wallet/WalletGreen.cpp",
        "line": 3446,
        "signature": "return insertDeposit(deposit, depositOutput.outputInTransaction, depositOutput.transactionHash);"
      },
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 123,
        "signature": "DepositId insertDeposit(const Deposit &deposit, size_t depositIndexInTransaction, const Crypto::Hash &transactionHash);"
      },
      {
        "file": "src/WalletLegacy/WalletUserTransactionsCache.cpp",
        "line": 627,
        "signature": "return insertDeposit(deposit, depositOutput.outputInTransaction, depositOutput.transactionHash);"
      },
      {
        "file": "src/WalletLegacy/WalletUserTransactionsCache.h",
        "line": 110,
        "signature": "DepositId insertDeposit(const Deposit& deposit, size_t depositIndexInTransaction, const Crypto::Hash& transactionHash);"
      }
    ],
    "getWalletRecord": [
      {
        "file": "src/Wallet/WalletGreen.cpp",
        "line": 3864,
        "signature": "return getWalletRecord(pubAddr.spendPublicKey);"
      }
    ],
    "clearCaches": [
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 140,
        "signature": "void clearCaches(bool clearTransactions, bool clearCachedData);"
      }
    ],
    "clearCacheAndShutdown": [
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 141,
        "signature": "void clearCacheAndShutdown();"
      }
    ],
    "convertAndLoadWalletFile": [
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 142,
        "signature": "void convertAndLoadWalletFile(const std::string &path, std::ifstream &&walletFileStream);"
      }
    ],
    "getTxSize": [
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 143,
        "signature": "size_t getTxSize(const TransactionParameters &sendingTransaction);"
      }
    ],
    "decryptKeyPair": [
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 145,
        "signature": "static void decryptKeyPair(const EncryptedWalletRecord& cipher, Crypto::PublicKey& publicKey, Crypto::SecretKey& secretKey, uint64_t& creationTimestamp, const Crypto::chacha8_key& key);"
      }
    ],
    "encryptKeyPair": [
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 149,
        "signature": "static EncryptedWalletRecord encryptKeyPair(const Crypto::PublicKey& publicKey, const Crypto::SecretKey& secretKey, uint64_t creationTimestamp, const Crypto::chacha8_key& key, const Crypto::chacha8_iv& iv);"
      }
    ],
    "incIv": [
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 151,
        "signature": "static void incIv(Crypto::chacha8_iv& iv);"
      },
      {
        "file": "src/Wallet/WalletSerializationV1.h",
        "line": 37,
        "signature": "void incIv();"
      }
    ],
    "incNextIv": [
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 152,
        "signature": "void incNextIv();"
      }
    ],
    "initWithKeys": [
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 153,
        "signature": "void initWithKeys(const std::string& path, const std::string& password, const Crypto::PublicKey& viewPublicKey, const Crypto::SecretKey& viewSecretKey);"
      }
    ],
    "scanHeightToTimestamp": [
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 158,
        "signature": "uint64_t scanHeightToTimestamp(const uint32_t scanHeight);"
      }
    ],
    "transactionUpdated": [
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 215,
        "signature": "void transactionUpdated(TransactionInformation transactionInfo, const std::vector<ContainerAmounts> &containerAmountsList);"
      }
    ],
    "transactionDeleted": [
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 218,
        "signature": "void transactionDeleted(ITransfersSubscription *object, const Crypto::Hash &transactionHash);"
      }
    ],
    "onSynchronizationProgressUpdated": [
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 223,
        "signature": "void onSynchronizationProgressUpdated(uint32_t processedBlockCount, uint32_t totalBlockCount);"
      }
    ],
    "onSynchronizationCompleted": [
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 224,
        "signature": "void onSynchronizationCompleted();"
      }
    ],
    "blocksAdded": [
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 227,
        "signature": "void blocksAdded(const std::vector<Crypto::Hash> &blockHashes);"
      }
    ],
    "blocksRollback": [
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 230,
        "signature": "void blocksRollback(uint32_t blockIndex);"
      }
    ],
    "transactionDeleteBegin": [
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 233,
        "signature": "void transactionDeleteBegin(Crypto::Hash transactionHash);"
      }
    ],
    "transactionDeleteEnd": [
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 236,
        "signature": "void transactionDeleteEnd(Crypto::Hash transactionHash);"
      }
    ],
    "updateBalance": [
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 242,
        "signature": "void updateBalance(CryptoNote::ITransfersContainer *container);"
      }
    ],
    "unlockBalances": [
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 243,
        "signature": "void unlockBalances(uint32_t height);"
      }
    ],
    "splitAmount": [
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 301,
        "signature": "ReceiverAmounts splitAmount(uint64_t amount, const AccountPublicAddress &destination, uint64_t dustThreshold);"
      }
    ],
    "sendTransaction": [
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 306,
        "signature": "void sendTransaction(const CryptoNote::Transaction &cryptoNoteTransaction);"
      },
      {
        "file": "src/WalletLegacy/WalletLegacy.cpp",
        "line": 566,
        "signature": "return sendTransaction(transactionSK, transfers, fee, extra, mixIn, unlockTimestamp, messages, ttl);"
      }
    ],
    "insertBlockchainTransaction": [
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 309,
        "signature": "size_t insertBlockchainTransaction(const TransactionInformation &info, int64_t txBalance);"
      }
    ],
    "insertOutgoingTransactionAndPushEvent": [
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 310,
        "signature": "size_t insertOutgoingTransactionAndPushEvent(const Crypto::Hash &transactionHash, uint64_t fee, const BinaryArray &extra, uint64_t unlockTimestamp);"
      }
    ],
    "updateTransactionStateAndPushEvent": [
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 311,
        "signature": "void updateTransactionStateAndPushEvent(size_t transactionId, WalletTransactionState state);"
      }
    ],
    "updateWalletTransactionInfo": [
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 312,
        "signature": "bool updateWalletTransactionInfo(size_t transactionId, const CryptoNote::TransactionInformation &info, int64_t totalAmount);"
      }
    ],
    "updateWalletDepositInfo": [
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 313,
        "signature": "bool updateWalletDepositInfo(size_t depositId, const CryptoNote::Deposit &info);"
      }
    ],
    "updateAddressTransfers": [
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 320,
        "signature": "bool updateAddressTransfers(size_t transactionId, size_t firstTransferIdx, const std::string &address, int64_t knownAmount, int64_t targetAmount);"
      }
    ],
    "appendTransfer": [
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 323,
        "signature": "void appendTransfer(size_t transactionId, size_t firstTransferIdx, const std::string &address, int64_t amount);"
      }
    ],
    "adjustTransfer": [
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 324,
        "signature": "bool adjustTransfer(size_t transactionId, size_t firstTransferIdx, const std::string &address, int64_t amount);"
      }
    ],
    "eraseTransfersByAddress": [
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 326,
        "signature": "bool eraseTransfersByAddress(size_t transactionId, size_t firstTransferIdx, const std::string &address, bool eraseOutputTransfers);"
      }
    ],
    "eraseForeignTransfers": [
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 327,
        "signature": "bool eraseForeignTransfers(size_t transactionId, size_t firstTransferIdx, const std::unordered_set<std::string> &knownAddresses, bool eraseOutputTransfers);"
      }
    ],
    "pushBackOutgoingTransfers": [
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 328,
        "signature": "void pushBackOutgoingTransfers(size_t txId, const std::vector<WalletTransfer> &destinations);"
      }
    ],
    "insertUnlockTransactionJob": [
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 329,
        "signature": "void insertUnlockTransactionJob(const Crypto::Hash &transactionHash, uint32_t blockHeight, CryptoNote::ITransfersContainer *container);"
      }
    ],
    "deleteUnlockTransactionJob": [
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 330,
        "signature": "void deleteUnlockTransactionJob(const Crypto::Hash &transactionHash);"
      }
    ],
    "startBlockchainSynchronizer": [
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 331,
        "signature": "void startBlockchainSynchronizer();"
      }
    ],
    "stopBlockchainSynchronizer": [
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 332,
        "signature": "void stopBlockchainSynchronizer();"
      }
    ],
    "addUnconfirmedTransaction": [
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 333,
        "signature": "void addUnconfirmedTransaction(const ITransactionReader &transaction);"
      }
    ],
    "removeUnconfirmedTransaction": [
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 334,
        "signature": "void removeUnconfirmedTransaction(const Crypto::Hash &transactionHash);"
      }
    ],
    "loadAndDecryptContainerData": [
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 336,
        "signature": "static void loadAndDecryptContainerData(ContainerStorage& storage, const Crypto::chacha8_key& key, BinaryArray& containerData);"
      }
    ],
    "encryptAndSaveContainerData": [
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 337,
        "signature": "static void encryptAndSaveContainerData(ContainerStorage& storage, const Crypto::chacha8_key& key, const void* containerData, size_t containerDataSize);"
      }
    ],
    "loadWalletCache": [
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 338,
        "signature": "void loadWalletCache(std::unordered_set<Crypto::PublicKey>& addedKeys, std::unordered_set<Crypto::PublicKey>& deletedKeys, std::string& extra);"
      }
    ],
    "copyContainerStorageKeys": [
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 340,
        "signature": "void copyContainerStorageKeys(ContainerStorage& src, const Crypto::chacha8_key& srcKey, ContainerStorage& dst, const Crypto::chacha8_key& dstKey);"
      }
    ],
    "copyContainerStoragePrefix": [
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 341,
        "signature": "static void copyContainerStoragePrefix(ContainerStorage& src, const Crypto::chacha8_key& srcKey, ContainerStorage& dst, const Crypto::chacha8_key& dstKey);"
      }
    ],
    "deleteOrphanTransactions": [
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 343,
        "signature": "void deleteOrphanTransactions(const std::unordered_set<Crypto::PublicKey>& deletedKeys);"
      }
    ],
    "saveWalletCache": [
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 344,
        "signature": "void saveWalletCache(ContainerStorage& storage, const Crypto::chacha8_key& key, WalletSaveLevel saveLevel, const std::string& extra);"
      }
    ],
    "loadSpendKeys": [
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 345,
        "signature": "void loadSpendKeys();"
      }
    ],
    "loadContainerStorage": [
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 346,
        "signature": "void loadContainerStorage(const std::string& path);"
      }
    ],
    "subscribeWallets": [
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 348,
        "signature": "void subscribeWallets();"
      },
      {
        "file": "src/Wallet/WalletSerializationV1.h",
        "line": 91,
        "signature": "void subscribeWallets();"
      }
    ],
    "decomposeFusionOutputs": [
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 353,
        "signature": "static ReceiverAmounts decomposeFusionOutputs(const AccountPublicAddress &address, uint64_t inputsAmount);"
      }
    ],
    "initBlockchain": [
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 377,
        "signature": "void initBlockchain(const Crypto::PublicKey& viewPublicKey);"
      }
    ],
    "getViewKeyKnownBlocks": [
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 378,
        "signature": "void getViewKeyKnownBlocks(const Crypto::PublicKey &viewPublicKey);"
      }
    ],
    "deleteContainerFromUnlockTransactionJobs": [
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 382,
        "signature": "void deleteContainerFromUnlockTransactionJobs(const ITransfersContainer *container);"
      }
    ],
    "deleteFromUncommitedTransactions": [
      {
        "file": "src/Wallet/WalletGreen.h",
        "line": 384,
        "signature": "void deleteFromUncommitedTransactions(const std::vector<size_t> &deletedTransactions);"
      }
    ],
    "on_get_tx_proof": [
      {
        "file": "src/Wallet/WalletRpcServer.h",
        "line": 71,
        "signature": "bool on_get_tx_proof(const wallet_rpc::COMMAND_RPC_GET_TX_PROOF::request& req, wallet_rpc::COMMAND_RPC_GET_TX_PROOF::response& res);"
      }
    ],
    "on_get_reserve_proof": [
      {
        "file": "src/Wallet/WalletRpcServer.h",
        "line": 72,
        "signature": "bool on_get_reserve_proof(const wallet_rpc::COMMAND_RPC_GET_BALANCE_PROOF::request& req, wallet_rpc::COMMAND_RPC_GET_BALANCE_PROOF::response& res);"
      }
    ],
    "on_estimate_fusion": [
      {
        "file": "src/Wallet/WalletRpcServer.h",
        "line": 76,
        "signature": "bool on_estimate_fusion(const wallet_rpc::COMMAND_RPC_ESTIMATE_FUSION::request& req, wallet_rpc::COMMAND_RPC_ESTIMATE_FUSION::response& res);"
      }
    ],
    "on_send_fusion": [
      {
        "file": "src/Wallet/WalletRpcServer.h",
        "line": 77,
        "signature": "bool on_send_fusion(const wallet_rpc::COMMAND_RPC_SEND_FUSION::request& req, wallet_rpc::COMMAND_RPC_SEND_FUSION::response& res);"
      }
    ],
    "addToStream": [
      {
        "file": "src/Wallet/WalletSerializationV1.cpp",
        "line": 191,
        "signature": "void addToStream(const std::string& cipher, const std::string& name, Common::IOutputStream& destination) {"
      }
    ],
    "serializeEncrypted": [
      {
        "file": "src/Wallet/WalletSerializationV1.cpp",
        "line": 197,
        "signature": "void serializeEncrypted(Object& obj, const std::string& name, CryptoNote::CryptoContext& cryptoContext, Common::IOutputStream& destination) {"
      }
    ],
    "deserialize": [
      {
        "file": "src/Wallet/WalletSerializationV1.cpp",
        "line": 221,
        "signature": "void deserialize(Object& obj, const std::string& name, const std::string& plain) {"
      },
      {
        "file": "src/WalletLegacy/WalletLegacySerializer.h",
        "line": 41,
        "signature": "void deserialize(std::istream& stream, const std::string& password, std::string& cache);"
      },
      {
        "file": "src/WalletLegacy/WalletLegacySerializer.h",
        "line": 42,
        "signature": "bool deserialize(std::istream& stream, const std::string& password);"
      }
    ],
    "deserializeEncrypted": [
      {
        "file": "src/Wallet/WalletSerializationV1.cpp",
        "line": 228,
        "signature": "void deserializeEncrypted(Object& obj, const std::string& name, CryptoNote::CryptoContext& cryptoContext, Common::IInputStream& source) {"
      }
    ],
    "verifyKeys": [
      {
        "file": "src/Wallet/WalletSerializationV1.cpp",
        "line": 235,
        "signature": "bool verifyKeys(const SecretKey& sec, const PublicKey& expected_pub) {"
      },
      {
        "file": "src/WalletLegacy/WalletLegacySerializer.cpp",
        "line": 40,
        "signature": "bool verifyKeys(const Crypto::SecretKey& sec, const Crypto::PublicKey& expected_pub) {"
      }
    ],
    "throwIfKeysMissmatch": [
      {
        "file": "src/Wallet/WalletSerializationV1.cpp",
        "line": 242,
        "signature": "void throwIfKeysMissmatch(const SecretKey& sec, const PublicKey& expected_pub) {"
      },
      {
        "file": "src/Wallet/WalletUtils.cpp",
        "line": 31,
        "signature": "void throwIfKeysMissmatch(const Crypto::SecretKey& secretKey, const Crypto::PublicKey& expectedPublicKey, const std::string& message) {"
      },
      {
        "file": "src/Wallet/WalletUtils.h",
        "line": 27,
        "signature": "void throwIfKeysMissmatch(const Crypto::SecretKey& secretKey, const Crypto::PublicKey& expectedPublicKey, const std::string& message = \"\");"
      },
      {
        "file": "src/WalletLegacy/WalletLegacySerializer.cpp",
        "line": 46,
        "signature": "void throwIfKeysMissmatch(const Crypto::SecretKey& sec, const Crypto::PublicKey& expected_pub) {"
      }
    ],
    "dto": [
      {
        "file": "src/Wallet/WalletSerializationV1.cpp",
        "line": 464,
        "signature": "WalletTransactionDto dto(tx);"
      },
      {
        "file": "src/Wallet/WalletSerializationV1.cpp",
        "line": 901,
        "signature": "WalletTransferDto dto(version);"
      },
      {
        "file": "src/Wallet/WalletSerializationV2.cpp",
        "line": 388,
        "signature": "WalletTransactionDtoV2 dto(tx);"
      },
      {
        "file": "src/Wallet/WalletSerializationV2.cpp",
        "line": 398,
        "signature": "WalletDepositDtoV2 dto(tx);"
      }
    ],
    "tr": [
      {
        "file": "src/Wallet/WalletSerializationV1.cpp",
        "line": 478,
        "signature": "WalletTransferDto tr(kv.second, SERIALIZATION_VERSION);"
      },
      {
        "file": "src/Wallet/WalletSerializationV2.cpp",
        "line": 432,
        "signature": "WalletTransferDtoV2 tr(kv.second);"
      }
    ],
    "loadWalletV1": [
      {
        "file": "src/Wallet/WalletSerializationV1.h",
        "line": 64,
        "signature": "void loadWalletV1(Common::IInputStream &source, const Crypto::chacha8_key &key);"
      }
    ],
    "generateCryptoContext": [
      {
        "file": "src/Wallet/WalletSerializationV1.h",
        "line": 66,
        "signature": "CryptoContext generateCryptoContext(const std::string &password);"
      }
    ],
    "saveVersion": [
      {
        "file": "src/Wallet/WalletSerializationV1.h",
        "line": 68,
        "signature": "void saveVersion(Common::IOutputStream &destination);"
      }
    ],
    "saveIv": [
      {
        "file": "src/Wallet/WalletSerializationV1.h",
        "line": 69,
        "signature": "void saveIv(Common::IOutputStream &destination, Crypto::chacha8_iv &iv);"
      }
    ],
    "saveKeys": [
      {
        "file": "src/Wallet/WalletSerializationV1.h",
        "line": 70,
        "signature": "void saveKeys(Common::IOutputStream &destination, CryptoContext &cryptoContext);"
      },
      {
        "file": "src/WalletLegacy/WalletLegacySerializer.h",
        "line": 45,
        "signature": "void saveKeys(CryptoNote::ISerializer& serializer);"
      }
    ],
    "savePublicKey": [
      {
        "file": "src/Wallet/WalletSerializationV1.h",
        "line": 71,
        "signature": "void savePublicKey(Common::IOutputStream &destination, CryptoContext &cryptoContext);"
      }
    ],
    "saveSecretKey": [
      {
        "file": "src/Wallet/WalletSerializationV1.h",
        "line": 72,
        "signature": "void saveSecretKey(Common::IOutputStream &destination, CryptoContext &cryptoContext);"
      }
    ],
    "saveFlags": [
      {
        "file": "src/Wallet/WalletSerializationV1.h",
        "line": 73,
        "signature": "void saveFlags(bool saveDetails, bool saveCache, Common::IOutputStream &destination, CryptoContext &cryptoContext);"
      }
    ],
    "saveWallets": [
      {
        "file": "src/Wallet/WalletSerializationV1.h",
        "line": 74,
        "signature": "void saveWallets(Common::IOutputStream &destination, bool saveCache, CryptoContext &cryptoContext);"
      }
    ],
    "saveBalances": [
      {
        "file": "src/Wallet/WalletSerializationV1.h",
        "line": 75,
        "signature": "void saveBalances(Common::IOutputStream &destination, bool saveCache, CryptoContext &cryptoContext);"
      }
    ],
    "saveTransfersSynchronizer": [
      {
        "file": "src/Wallet/WalletSerializationV1.h",
        "line": 76,
        "signature": "void saveTransfersSynchronizer(Common::IOutputStream &destination, CryptoContext &cryptoContext);"
      },
      {
        "file": "src/Wallet/WalletSerializationV2.h",
        "line": 73,
        "signature": "void saveTransfersSynchronizer(CryptoNote::ISerializer& serializer);"
      }
    ],
    "saveUnlockTransactionsJobs": [
      {
        "file": "src/Wallet/WalletSerializationV1.h",
        "line": 77,
        "signature": "void saveUnlockTransactionsJobs(Common::IOutputStream &destination, CryptoContext &cryptoContext);"
      },
      {
        "file": "src/Wallet/WalletSerializationV2.h",
        "line": 76,
        "signature": "void saveUnlockTransactionsJobs(CryptoNote::ISerializer& serializer);"
      }
    ],
    "saveUncommitedTransactions": [
      {
        "file": "src/Wallet/WalletSerializationV1.h",
        "line": 78,
        "signature": "void saveUncommitedTransactions(Common::IOutputStream &destination, CryptoContext &cryptoContext);"
      }
    ],
    "saveTransfers": [
      {
        "file": "src/Wallet/WalletSerializationV1.h",
        "line": 80,
        "signature": "void saveTransfers(Common::IOutputStream &destination, CryptoContext &cryptoContext);"
      },
      {
        "file": "src/Wallet/WalletSerializationV2.h",
        "line": 70,
        "signature": "void saveTransfers(CryptoNote::ISerializer& serializer);"
      }
    ],
    "loadVersion": [
      {
        "file": "src/Wallet/WalletSerializationV1.h",
        "line": 82,
        "signature": "uint32_t loadVersion(Common::IInputStream &source);"
      }
    ],
    "loadIv": [
      {
        "file": "src/Wallet/WalletSerializationV1.h",
        "line": 83,
        "signature": "void loadIv(Common::IInputStream &source, Crypto::chacha8_iv &iv);"
      }
    ],
    "generateKey": [
      {
        "file": "src/Wallet/WalletSerializationV1.h",
        "line": 84,
        "signature": "void generateKey(const std::string &password, Crypto::chacha8_key &key);"
      }
    ],
    "loadKeys": [
      {
        "file": "src/Wallet/WalletSerializationV1.h",
        "line": 85,
        "signature": "void loadKeys(Common::IInputStream &source, CryptoContext &cryptoContext);"
      },
      {
        "file": "src/WalletLegacy/WalletLegacySerializer.h",
        "line": 46,
        "signature": "void loadKeys(CryptoNote::ISerializer& serializer);"
      }
    ],
    "loadPublicKey": [
      {
        "file": "src/Wallet/WalletSerializationV1.h",
        "line": 86,
        "signature": "void loadPublicKey(Common::IInputStream &source, CryptoContext &cryptoContext);"
      }
    ],
    "loadSecretKey": [
      {
        "file": "src/Wallet/WalletSerializationV1.h",
        "line": 87,
        "signature": "void loadSecretKey(Common::IInputStream &source, CryptoContext &cryptoContext);"
      }
    ],
    "checkKeys": [
      {
        "file": "src/Wallet/WalletSerializationV1.h",
        "line": 88,
        "signature": "void checkKeys();"
      }
    ],
    "loadFlags": [
      {
        "file": "src/Wallet/WalletSerializationV1.h",
        "line": 89,
        "signature": "void loadFlags(bool &details, bool &cache, Common::IInputStream &source, CryptoContext &cryptoContext);"
      }
    ],
    "loadWallets": [
      {
        "file": "src/Wallet/WalletSerializationV1.h",
        "line": 90,
        "signature": "void loadWallets(Common::IInputStream &source, CryptoContext &cryptoContext);"
      }
    ],
    "loadBalances": [
      {
        "file": "src/Wallet/WalletSerializationV1.h",
        "line": 92,
        "signature": "void loadBalances(Common::IInputStream &source, CryptoContext &cryptoContext);"
      }
    ],
    "loadTransfersSynchronizer": [
      {
        "file": "src/Wallet/WalletSerializationV1.h",
        "line": 93,
        "signature": "void loadTransfersSynchronizer(Common::IInputStream &source, CryptoContext &cryptoContext);"
      },
      {
        "file": "src/Wallet/WalletSerializationV2.h",
        "line": 72,
        "signature": "void loadTransfersSynchronizer(CryptoNote::ISerializer& serializer);"
      }
    ],
    "loadObsoleteSpentOutputs": [
      {
        "file": "src/Wallet/WalletSerializationV1.h",
        "line": 94,
        "signature": "void loadObsoleteSpentOutputs(Common::IInputStream &source, CryptoContext &cryptoContext);"
      }
    ],
    "loadUnlockTransactionsJobs": [
      {
        "file": "src/Wallet/WalletSerializationV1.h",
        "line": 95,
        "signature": "void loadUnlockTransactionsJobs(Common::IInputStream &source, CryptoContext &cryptoContext);"
      },
      {
        "file": "src/Wallet/WalletSerializationV2.h",
        "line": 75,
        "signature": "void loadUnlockTransactionsJobs(CryptoNote::ISerializer& serializer);"
      }
    ],
    "loadObsoleteChange": [
      {
        "file": "src/Wallet/WalletSerializationV1.h",
        "line": 96,
        "signature": "void loadObsoleteChange(Common::IInputStream &source, CryptoContext &cryptoContext);"
      }
    ],
    "loadUncommitedTransactions": [
      {
        "file": "src/Wallet/WalletSerializationV1.h",
        "line": 97,
        "signature": "void loadUncommitedTransactions(Common::IInputStream &source, CryptoContext &cryptoContext);"
      }
    ],
    "loadTransfers": [
      {
        "file": "src/Wallet/WalletSerializationV1.h",
        "line": 99,
        "signature": "void loadTransfers(Common::IInputStream &source, CryptoContext &cryptoContext, uint32_t version);"
      },
      {
        "file": "src/Wallet/WalletSerializationV2.h",
        "line": 69,
        "signature": "void loadTransfers(CryptoNote::ISerializer& serializer);"
      }
    ],
    "loadWalletV1Keys": [
      {
        "file": "src/Wallet/WalletSerializationV1.h",
        "line": 101,
        "signature": "void loadWalletV1Keys(CryptoNote::BinaryInputStreamSerializer &serializer);"
      }
    ],
    "loadWalletV1Details": [
      {
        "file": "src/Wallet/WalletSerializationV1.h",
        "line": 102,
        "signature": "void loadWalletV1Details(CryptoNote::BinaryInputStreamSerializer &serializer);"
      }
    ],
    "addWalletV1Details": [
      {
        "file": "src/Wallet/WalletSerializationV1.h",
        "line": 103,
        "signature": "void addWalletV1Details(const std::vector<WalletLegacyTransaction> &txs, const std::vector<WalletLegacyTransfer> &trs);"
      }
    ],
    "resetCachedBalance": [
      {
        "file": "src/Wallet/WalletSerializationV1.h",
        "line": 105,
        "signature": "void resetCachedBalance();"
      }
    ],
    "updateTransactionsBaseStatus": [
      {
        "file": "src/Wallet/WalletSerializationV1.h",
        "line": 106,
        "signature": "void updateTransactionsBaseStatus();"
      }
    ],
    "updateTransfersSign": [
      {
        "file": "src/Wallet/WalletSerializationV1.h",
        "line": 107,
        "signature": "void updateTransfersSign();"
      }
    ],
    "loadKeyListAndBanalces": [
      {
        "file": "src/Wallet/WalletSerializationV2.h",
        "line": 60,
        "signature": "void loadKeyListAndBanalces(CryptoNote::ISerializer& serializer, bool saveCache);"
      }
    ],
    "saveKeyListAndBanalces": [
      {
        "file": "src/Wallet/WalletSerializationV2.h",
        "line": 61,
        "signature": "void saveKeyListAndBanalces(CryptoNote::ISerializer& serializer, bool saveCache);"
      }
    ],
    "loadDeposits": [
      {
        "file": "src/Wallet/WalletSerializationV2.h",
        "line": 66,
        "signature": "void loadDeposits(CryptoNote::ISerializer& serializer);"
      }
    ],
    "saveDeposits": [
      {
        "file": "src/Wallet/WalletSerializationV2.h",
        "line": 67,
        "signature": "void saveDeposits(CryptoNote::ISerializer& serializer);"
      }
    ],
    "validateAddress": [
      {
        "file": "src/Wallet/WalletUtils.cpp",
        "line": 26,
        "signature": "bool validateAddress(const std::string& address, const CryptoNote::Currency& currency) {"
      },
      {
        "file": "src/Wallet/WalletUtils.h",
        "line": 26,
        "signature": "bool validateAddress(const std::string& address, const CryptoNote::Currency& currency);"
      }
    ],
    "openOutputFileStream": [
      {
        "file": "src/WalletLegacy/WalletHelper.cpp",
        "line": 28,
        "signature": "void openOutputFileStream(const std::string& filename, std::ofstream& file) {"
      }
    ],
    "prepareFileNames": [
      {
        "file": "src/WalletLegacy/WalletHelper.h",
        "line": 67,
        "signature": "void prepareFileNames(const std::string& file_path, std::string& keys_file, std::string& wallet_file);"
      }
    ],
    "storeWallet": [
      {
        "file": "src/WalletLegacy/WalletHelper.h",
        "line": 68,
        "signature": "bool storeWallet(CryptoNote::IWalletLegacy& wallet, const std::string& walletFilename);"
      }
    ],
    "throwNotDefined": [
      {
        "file": "src/WalletLegacy/WalletLegacy.cpp",
        "line": 49,
        "signature": "void throwNotDefined() {"
      }
    ],
    "runAtomic": [
      {
        "file": "src/WalletLegacy/WalletLegacy.cpp",
        "line": 64,
        "signature": "void runAtomic(std::mutex& mutex, F f) {"
      }
    ],
    "calculateDepositsAmount": [
      {
        "file": "src/WalletLegacy/WalletLegacy.cpp",
        "line": 103,
        "signature": "uint64_t calculateDepositsAmount(const std::vector<CryptoNote::TransactionOutputInformation>& transfers, const CryptoNote::Currency& currency, const std::vector<uint32_t> heights) {"
      },
      {
        "file": "src/WalletLegacy/WalletLegacy.cpp",
        "line": 1228,
        "signature": "return calculateDepositsAmount(transfers, m_currency, heights);"
      }
    ],
    "calculateInvestmentsAmount": [
      {
        "file": "src/WalletLegacy/WalletLegacy.cpp",
        "line": 118,
        "signature": "uint64_t calculateInvestmentsAmount(const std::vector<CryptoNote::TransactionOutputInformation>& transfers, const CryptoNote::Currency& currency, const std::vector<uint32_t> heights) {"
      },
      {
        "file": "src/WalletLegacy/WalletLegacy.cpp",
        "line": 1206,
        "signature": "return calculateInvestmentsAmount(transfers, m_currency, heights);"
      },
      {
        "file": "src/WalletLegacy/WalletLegacy.cpp",
        "line": 1237,
        "signature": "return calculateInvestmentsAmount(transfers, m_currency, heights);"
      }
    ],
    "calculateActualBalance": [
      {
        "file": "src/WalletLegacy/WalletLegacy.cpp",
        "line": 454,
        "signature": "return calculateActualBalance();"
      },
      {
        "file": "src/WalletLegacy/WalletLegacy.h",
        "line": 161,
        "signature": "uint64_t calculateActualBalance();"
      }
    ],
    "calculatePendingBalance": [
      {
        "file": "src/WalletLegacy/WalletLegacy.cpp",
        "line": 461,
        "signature": "return calculatePendingBalance();"
      },
      {
        "file": "src/WalletLegacy/WalletLegacy.h",
        "line": 162,
        "signature": "uint64_t calculatePendingBalance();"
      }
    ],
    "calculateActualDepositBalance": [
      {
        "file": "src/WalletLegacy/WalletLegacy.cpp",
        "line": 469,
        "signature": "return calculateActualDepositBalance();"
      },
      {
        "file": "src/WalletLegacy/WalletLegacy.h",
        "line": 154,
        "signature": "uint64_t calculateActualDepositBalance();"
      }
    ],
    "calculateActualInvestmentBalance": [
      {
        "file": "src/WalletLegacy/WalletLegacy.cpp",
        "line": 476,
        "signature": "return calculateActualInvestmentBalance();"
      },
      {
        "file": "src/WalletLegacy/WalletLegacy.h",
        "line": 155,
        "signature": "uint64_t calculateActualInvestmentBalance();"
      }
    ],
    "calculatePendingInvestmentBalance": [
      {
        "file": "src/WalletLegacy/WalletLegacy.cpp",
        "line": 483,
        "signature": "return calculatePendingInvestmentBalance();"
      },
      {
        "file": "src/WalletLegacy/WalletLegacy.h",
        "line": 157,
        "signature": "uint64_t calculatePendingInvestmentBalance();"
      }
    ],
    "calculatePendingDepositBalance": [
      {
        "file": "src/WalletLegacy/WalletLegacy.cpp",
        "line": 490,
        "signature": "return calculatePendingDepositBalance();"
      },
      {
        "file": "src/WalletLegacy/WalletLegacy.h",
        "line": 156,
        "signature": "uint64_t calculatePendingDepositBalance();"
      }
    ],
    "compareTransactionOutputInformationByAmount": [
      {
        "file": "src/WalletLegacy/WalletLegacy.cpp",
        "line": 1352,
        "signature": "bool compareTransactionOutputInformationByAmount(const TransactionOutputInformation &a, const TransactionOutputInformation &b) {"
      }
    ],
    "isTrackingWallet": [
      {
        "file": "src/WalletLegacy/WalletLegacy.h",
        "line": 84,
        "signature": "virtual bool isTrackingWallet();"
      }
    ],
    "estimateFusion": [
      {
        "file": "src/WalletLegacy/WalletLegacy.h",
        "line": 111,
        "signature": "virtual size_t estimateFusion(const uint64_t& threshold);"
      }
    ],
    "sendFusionTransaction": [
      {
        "file": "src/WalletLegacy/WalletLegacy.h",
        "line": 113,
        "signature": "virtual TransactionId sendFusionTransaction(const std::list<TransactionOutputInformation>& fusionInputs, uint64_t fee, const std::string& extra = \"\", uint64_t mixIn = 0, uint64_t unlockTimestamp = 0);"
      }
    ],
    "initSync": [
      {
        "file": "src/WalletLegacy/WalletLegacy.h",
        "line": 132,
        "signature": "void initSync();"
      }
    ],
    "throwIfNotInitialised": [
      {
        "file": "src/WalletLegacy/WalletLegacy.h",
        "line": 133,
        "signature": "void throwIfNotInitialised();"
      }
    ],
    "doSave": [
      {
        "file": "src/WalletLegacy/WalletLegacy.h",
        "line": 135,
        "signature": "void doSave(std::ostream& destination, bool saveDetailed, bool saveCache);"
      }
    ],
    "doLoad": [
      {
        "file": "src/WalletLegacy/WalletLegacy.h",
        "line": 136,
        "signature": "void doLoad(std::istream& source);"
      }
    ],
    "synchronizationCallback": [
      {
        "file": "src/WalletLegacy/WalletLegacy.h",
        "line": 138,
        "signature": "void synchronizationCallback(WalletRequest::Callback callback, std::error_code ec);"
      }
    ],
    "sendTransactionCallback": [
      {
        "file": "src/WalletLegacy/WalletLegacy.h",
        "line": 139,
        "signature": "void sendTransactionCallback(WalletRequest::Callback callback, std::error_code ec);"
      }
    ],
    "notifyClients": [
      {
        "file": "src/WalletLegacy/WalletLegacy.h",
        "line": 140,
        "signature": "void notifyClients(std::deque<std::unique_ptr<WalletLegacyEvent> >& events);"
      }
    ],
    "notifyIfBalanceChanged": [
      {
        "file": "src/WalletLegacy/WalletLegacy.h",
        "line": 141,
        "signature": "void notifyIfBalanceChanged();"
      }
    ],
    "notifyIfDepositBalanceChanged": [
      {
        "file": "src/WalletLegacy/WalletLegacy.h",
        "line": 142,
        "signature": "void notifyIfDepositBalanceChanged();"
      }
    ],
    "notifyIfInvestmentBalanceChanged": [
      {
        "file": "src/WalletLegacy/WalletLegacy.h",
        "line": 143,
        "signature": "void notifyIfInvestmentBalanceChanged();"
      }
    ],
    "getWalletMaximum": [
      {
        "file": "src/WalletLegacy/WalletLegacy.h",
        "line": 158,
        "signature": "uint64_t getWalletMaximum();"
      }
    ],
    "dustBalance": [
      {
        "file": "src/WalletLegacy/WalletLegacy.h",
        "line": 159,
        "signature": "uint64_t dustBalance();"
      }
    ],
    "pushBalanceUpdatedEvents": [
      {
        "file": "src/WalletLegacy/WalletLegacy.h",
        "line": 164,
        "signature": "void pushBalanceUpdatedEvents(std::deque<std::unique_ptr<WalletLegacyEvent>>& eventsQueue);"
      }
    ],
    "plainStream": [
      {
        "file": "src/WalletLegacy/WalletLegacySerializer.cpp",
        "line": 64,
        "signature": "StdOutputStream plainStream(plainArchive);"
      }
    ],
    "stdStream": [
      {
        "file": "src/WalletLegacy/WalletLegacySerializer.cpp",
        "line": 121,
        "signature": "StdInputStream stdStream(stream);"
      },
      {
        "file": "src/WalletLegacy/WalletLegacySerializer.cpp",
        "line": 171,
        "signature": "StdInputStream stdStream(stream);"
      }
    ],
    "decrypt": [
      {
        "file": "src/WalletLegacy/WalletLegacySerializer.h",
        "line": 49,
        "signature": "void decrypt(const std::string& cipher, std::string& plain, Crypto::chacha8_iv iv, const std::string& password);"
      }
    ],
    "checkIfEnoughMixins": [
      {
        "file": "src/WalletLegacy/WalletTransactionSender.h",
        "line": 97,
        "signature": "bool checkIfEnoughMixins(const std::vector<COMMAND_RPC_GET_RANDOM_OUTPUTS_FOR_AMOUNTS::outs_for_amount>& outs, uint64_t mixIn);"
      }
    ],
    "notifyBalanceChanged": [
      {
        "file": "src/WalletLegacy/WalletTransactionSender.h",
        "line": 107,
        "signature": "void notifyBalanceChanged(std::deque<std::unique_ptr<WalletLegacyEvent>>& events);"
      }
    ],
    "validateTransfersAddresses": [
      {
        "file": "src/WalletLegacy/WalletTransactionSender.h",
        "line": 109,
        "signature": "void validateTransfersAddresses(const std::vector<WalletLegacyTransfer>& transfers);"
      }
    ],
    "validateDestinationAddress": [
      {
        "file": "src/WalletLegacy/WalletTransactionSender.h",
        "line": 110,
        "signature": "bool validateDestinationAddress(const std::string& address);"
      }
    ],
    "selectNTransfersToSend": [
      {
        "file": "src/WalletLegacy/WalletTransactionSender.h",
        "line": 112,
        "signature": "uint64_t selectNTransfersToSend(std::vector<TransactionOutputInformation>& selectedTransfers);"
      }
    ],
    "selectTransfersToSend": [
      {
        "file": "src/WalletLegacy/WalletTransactionSender.h",
        "line": 113,
        "signature": "uint64_t selectTransfersToSend(uint64_t neededMoney, bool addDust, uint64_t dust, std::vector<TransactionOutputInformation>& selectedTransfers);"
      }
    ],
    "selectDepositTransfers": [
      {
        "file": "src/WalletLegacy/WalletTransactionSender.h",
        "line": 114,
        "signature": "uint64_t selectDepositTransfers(const std::vector<DepositId>& depositIds, std::vector<TransactionOutputInformation>& selectedTransfers);"
      }
    ],
    "setSpendingTransactionToDeposits": [
      {
        "file": "src/WalletLegacy/WalletTransactionSender.h",
        "line": 116,
        "signature": "void setSpendingTransactionToDeposits(TransactionId transactionId, const std::vector<DepositId>& depositIds);"
      }
    ],
    "getOutputId": [
      {
        "file": "src/WalletLegacy/WalletUnconfirmedTransactions.cpp",
        "line": 29,
        "signature": "inline TransactionOutputId getOutputId(const TransactionOutputInformation& out) {"
      }
    ],
    "WalletUnconfirmedTransactions": [
      {
        "file": "src/WalletLegacy/WalletUnconfirmedTransactions.h",
        "line": 75,
        "signature": "explicit WalletUnconfirmedTransactions(uint64_t uncofirmedTransactionsLiveTime);"
      }
    ],
    "deserializeV1": [
      {
        "file": "src/WalletLegacy/WalletUnconfirmedTransactions.h",
        "line": 78,
        "signature": "bool deserializeV1(CryptoNote::ISerializer& s);"
      }
    ],
    "findTransactionId": [
      {
        "file": "src/WalletLegacy/WalletUnconfirmedTransactions.h",
        "line": 80,
        "signature": "bool findTransactionId(const Crypto::Hash& hash, TransactionId& id);"
      }
    ],
    "updateTransactionId": [
      {
        "file": "src/WalletLegacy/WalletUnconfirmedTransactions.h",
        "line": 84,
        "signature": "void updateTransactionId(const Crypto::Hash& hash, TransactionId id);"
      }
    ],
    "addCreatedDeposit": [
      {
        "file": "src/WalletLegacy/WalletUnconfirmedTransactions.h",
        "line": 86,
        "signature": "void addCreatedDeposit(DepositId id, uint64_t totalAmount);"
      },
      {
        "file": "src/WalletLegacy/WalletUserTransactionsCache.h",
        "line": 83,
        "signature": "void addCreatedDeposit(DepositId id, uint64_t totalAmount);"
      }
    ],
    "addDepositSpendingTransaction": [
      {
        "file": "src/WalletLegacy/WalletUnconfirmedTransactions.h",
        "line": 87,
        "signature": "void addDepositSpendingTransaction(const Crypto::Hash& transactionHash, const UnconfirmedSpentDepositDetails& details);"
      },
      {
        "file": "src/WalletLegacy/WalletUserTransactionsCache.h",
        "line": 84,
        "signature": "void addDepositSpendingTransaction(const Crypto::Hash& transactionHash, const UnconfirmedSpentDepositDetails& details);"
      }
    ],
    "eraseCreatedDeposit": [
      {
        "file": "src/WalletLegacy/WalletUnconfirmedTransactions.h",
        "line": 89,
        "signature": "void eraseCreatedDeposit(DepositId id);"
      },
      {
        "file": "src/WalletLegacy/WalletUserTransactionsCache.h",
        "line": 135,
        "signature": "void eraseCreatedDeposit(DepositId id);"
      }
    ],
    "collectUsedOutputs": [
      {
        "file": "src/WalletLegacy/WalletUnconfirmedTransactions.h",
        "line": 104,
        "signature": "void collectUsedOutputs();"
      }
    ],
    "deleteUsedOutputs": [
      {
        "file": "src/WalletLegacy/WalletUnconfirmedTransactions.h",
        "line": 105,
        "signature": "void deleteUsedOutputs(const std::vector<TransactionOutputId>& usedOutputs);"
      }
    ],
    "eraseUnconfirmedTransaction": [
      {
        "file": "src/WalletLegacy/WalletUnconfirmedTransactions.h",
        "line": 107,
        "signature": "bool eraseUnconfirmedTransaction(const Crypto::Hash& hash);"
      }
    ],
    "eraseDepositSpendingTransaction": [
      {
        "file": "src/WalletLegacy/WalletUnconfirmedTransactions.h",
        "line": 108,
        "signature": "bool eraseDepositSpendingTransaction(const Crypto::Hash& hash);"
      }
    ],
    "findUnconfirmedTransactionId": [
      {
        "file": "src/WalletLegacy/WalletUnconfirmedTransactions.h",
        "line": 110,
        "signature": "bool findUnconfirmedTransactionId(const Crypto::Hash& hash, TransactionId& id);"
      }
    ],
    "findUnconfirmedDepositSpendingTransactionId": [
      {
        "file": "src/WalletLegacy/WalletUnconfirmedTransactions.h",
        "line": 111,
        "signature": "bool findUnconfirmedDepositSpendingTransactionId(const Crypto::Hash& hash, TransactionId& id);"
      }
    ],
    "convertLegacyDeposits": [
      {
        "file": "src/WalletLegacy/WalletUserTransactionsCache.cpp",
        "line": 100,
        "signature": "void convertLegacyDeposits(const std::vector<LegacyDepositInfo>& legacyDeposits, UserDeposits& deposits) {"
      }
    ],
    "paymentIdIsSet": [
      {
        "file": "src/WalletLegacy/WalletUserTransactionsCache.cpp",
        "line": 149,
        "signature": "bool paymentIdIsSet(const PaymentId& paymentId) {"
      }
    ],
    "canInsertTransactionToIndex": [
      {
        "file": "src/WalletLegacy/WalletUserTransactionsCache.cpp",
        "line": 153,
        "signature": "bool canInsertTransactionToIndex(const WalletLegacyTransaction& info) {"
      }
    ],
    "depositIdSequenceStart": [
      {
        "file": "src/WalletLegacy/WalletUserTransactionsCache.cpp",
        "line": 385,
        "signature": "DepositIdSequenceIterator depositIdSequenceStart(tr.firstDepositId);"
      }
    ],
    "depositIdSequenceEnd": [
      {
        "file": "src/WalletLegacy/WalletUserTransactionsCache.cpp",
        "line": 386,
        "signature": "DepositIdSequenceIterator depositIdSequenceEnd(tr.firstDepositId + tr.depositCount);"
      }
    ],
    "WalletUserTransactionsCache": [
      {
        "file": "src/WalletLegacy/WalletUserTransactionsCache.h",
        "line": 56,
        "signature": "explicit WalletUserTransactionsCache(uint64_t mempoolTxLiveTime = 60 * 60 * 24);"
      }
    ],
    "deserializeLegacyV1": [
      {
        "file": "src/WalletLegacy/WalletUserTransactionsCache.h",
        "line": 59,
        "signature": "void deserializeLegacyV1(CryptoNote::ISerializer& serializer);"
      }
    ],
    "updateTransactionSendingState": [
      {
        "file": "src/WalletLegacy/WalletUserTransactionsCache.h",
        "line": 81,
        "signature": "void updateTransactionSendingState(TransactionId transactionId, std::error_code ec);"
      }
    ],
    "getDepositInTransactionInfo": [
      {
        "file": "src/WalletLegacy/WalletUserTransactionsCache.h",
        "line": 111,
        "signature": "bool getDepositInTransactionInfo(DepositId depositId, Crypto::Hash& transactionHash, uint32_t& outputInTransaction);"
      }
    ],
    "findTransactionByHash": [
      {
        "file": "src/WalletLegacy/WalletUserTransactionsCache.h",
        "line": 114,
        "signature": "TransactionId findTransactionByHash(const Crypto::Hash& hash);"
      }
    ],
    "insertTransaction": [
      {
        "file": "src/WalletLegacy/WalletUserTransactionsCache.h",
        "line": 118,
        "signature": "TransactionId insertTransaction(WalletLegacyTransaction&& Transaction);"
      }
    ],
    "insertTransfers": [
      {
        "file": "src/WalletLegacy/WalletUserTransactionsCache.h",
        "line": 119,
        "signature": "TransferId insertTransfers(const std::vector<WalletLegacyTransfer>& transfers);"
      }
    ],
    "updateUnconfirmedTransactions": [
      {
        "file": "src/WalletLegacy/WalletUserTransactionsCache.h",
        "line": 120,
        "signature": "void updateUnconfirmedTransactions();"
      }
    ],
    "restoreTransactionOutputToDepositIndex": [
      {
        "file": "src/WalletLegacy/WalletUserTransactionsCache.h",
        "line": 122,
        "signature": "void restoreTransactionOutputToDepositIndex();"
      }
    ],
    "getDepositId": [
      {
        "file": "src/WalletLegacy/WalletUserTransactionsCache.h",
        "line": 131,
        "signature": "DepositId getDepositId(const Crypto::Hash& creatingTransactionHash, uint32_t outputInTransaction);"
      }
    ],
    "rebuildPaymentsIndex": [
      {
        "file": "src/WalletLegacy/WalletUserTransactionsCache.h",
        "line": 143,
        "signature": "void rebuildPaymentsIndex();"
      }
    ],
    "pushToPaymentsIndex": [
      {
        "file": "src/WalletLegacy/WalletUserTransactionsCache.h",
        "line": 144,
        "signature": "void pushToPaymentsIndex(const PaymentId& paymentId, Offset distance);"
      }
    ],
    "pushToPaymentsIndexInternal": [
      {
        "file": "src/WalletLegacy/WalletUserTransactionsCache.h",
        "line": 145,
        "signature": "void pushToPaymentsIndexInternal(Offset distance, const WalletLegacyTransaction& info, std::vector<uint8_t>& extra);"
      }
    ],
    "popFromPaymentsIndex": [
      {
        "file": "src/WalletLegacy/WalletUserTransactionsCache.h",
        "line": 146,
        "signature": "void popFromPaymentsIndex(const PaymentId& paymentId, Offset distance);"
      }
    ],
    "blake256_compress": [
      {
        "file": "src/crypto/blake256.c",
        "line": 53,
        "signature": "void blake256_compress(state *S, const uint8_t *block) {"
      }
    ],
    "blake256_init": [
      {
        "file": "src/crypto/blake256.c",
        "line": 100,
        "signature": "void blake256_init(state *S) {"
      },
      {
        "file": "src/crypto/blake256.h",
        "line": 17,
        "signature": "void blake256_init(state *);"
      }
    ],
    "blake224_init": [
      {
        "file": "src/crypto/blake256.c",
        "line": 113,
        "signature": "void blake224_init(state *S) {"
      },
      {
        "file": "src/crypto/blake256.h",
        "line": 18,
        "signature": "void blake224_init(state *);"
      }
    ],
    "blake256_update": [
      {
        "file": "src/crypto/blake256.c",
        "line": 127,
        "signature": "void blake256_update(state *S, const uint8_t *data, uint64_t datalen) {"
      },
      {
        "file": "src/crypto/blake256.h",
        "line": 20,
        "signature": "void blake256_update(state *, const uint8_t *, uint64_t);"
      }
    ],
    "blake224_update": [
      {
        "file": "src/crypto/blake256.c",
        "line": 158,
        "signature": "void blake224_update(state *S, const uint8_t *data, uint64_t datalen) {"
      },
      {
        "file": "src/crypto/blake256.h",
        "line": 21,
        "signature": "void blake224_update(state *, const uint8_t *, uint64_t);"
      }
    ],
    "blake256_final_h": [
      {
        "file": "src/crypto/blake256.c",
        "line": 162,
        "signature": "void blake256_final_h(state *S, uint8_t *digest, uint8_t pa, uint8_t pb) {"
      }
    ],
    "blake256_final": [
      {
        "file": "src/crypto/blake256.c",
        "line": 200,
        "signature": "void blake256_final(state *S, uint8_t *digest) {"
      },
      {
        "file": "src/crypto/blake256.h",
        "line": 23,
        "signature": "void blake256_final(state *, uint8_t *);"
      }
    ],
    "blake224_final": [
      {
        "file": "src/crypto/blake256.c",
        "line": 204,
        "signature": "void blake224_final(state *S, uint8_t *digest) {"
      },
      {
        "file": "src/crypto/blake256.h",
        "line": 24,
        "signature": "void blake224_final(state *, uint8_t *);"
      }
    ],
    "blake256_hash": [
      {
        "file": "src/crypto/blake256.c",
        "line": 209,
        "signature": "void blake256_hash(uint8_t *out, const uint8_t *in, uint64_t inlen) {"
      },
      {
        "file": "src/crypto/blake256.h",
        "line": 26,
        "signature": "void blake256_hash(uint8_t *, const uint8_t *, uint64_t);"
      }
    ],
    "blake224_hash": [
      {
        "file": "src/crypto/blake256.c",
        "line": 217,
        "signature": "void blake224_hash(uint8_t *out, const uint8_t *in, uint64_t inlen) {"
      },
      {
        "file": "src/crypto/blake256.h",
        "line": 27,
        "signature": "void blake224_hash(uint8_t *, const uint8_t *, uint64_t);"
      }
    ],
    "hmac_blake256_init": [
      {
        "file": "src/crypto/blake256.c",
        "line": 225,
        "signature": "void hmac_blake256_init(hmac_state *S, const uint8_t *_key, uint64_t keylen) {"
      },
      {
        "file": "src/crypto/blake256.h",
        "line": 31,
        "signature": "void hmac_blake256_init(hmac_state *, const uint8_t *, uint64_t);"
      }
    ],
    "hmac_blake224_init": [
      {
        "file": "src/crypto/blake256.c",
        "line": 255,
        "signature": "void hmac_blake224_init(hmac_state *S, const uint8_t *_key, uint64_t keylen) {"
      },
      {
        "file": "src/crypto/blake256.h",
        "line": 32,
        "signature": "void hmac_blake224_init(hmac_state *, const uint8_t *, uint64_t);"
      }
    ],
    "hmac_blake256_update": [
      {
        "file": "src/crypto/blake256.c",
        "line": 285,
        "signature": "void hmac_blake256_update(hmac_state *S, const uint8_t *data, uint64_t datalen) {"
      },
      {
        "file": "src/crypto/blake256.h",
        "line": 34,
        "signature": "void hmac_blake256_update(hmac_state *, const uint8_t *, uint64_t);"
      }
    ],
    "hmac_blake224_update": [
      {
        "file": "src/crypto/blake256.c",
        "line": 291,
        "signature": "void hmac_blake224_update(hmac_state *S, const uint8_t *data, uint64_t datalen) {"
      },
      {
        "file": "src/crypto/blake256.h",
        "line": 35,
        "signature": "void hmac_blake224_update(hmac_state *, const uint8_t *, uint64_t);"
      }
    ],
    "hmac_blake256_final": [
      {
        "file": "src/crypto/blake256.c",
        "line": 296,
        "signature": "void hmac_blake256_final(hmac_state *S, uint8_t *digest) {"
      },
      {
        "file": "src/crypto/blake256.h",
        "line": 37,
        "signature": "void hmac_blake256_final(hmac_state *, uint8_t *);"
      }
    ],
    "hmac_blake224_final": [
      {
        "file": "src/crypto/blake256.c",
        "line": 304,
        "signature": "void hmac_blake224_final(hmac_state *S, uint8_t *digest) {"
      },
      {
        "file": "src/crypto/blake256.h",
        "line": 38,
        "signature": "void hmac_blake224_final(hmac_state *, uint8_t *);"
      }
    ],
    "hmac_blake256_hash": [
      {
        "file": "src/crypto/blake256.c",
        "line": 313,
        "signature": "void hmac_blake256_hash(uint8_t *out, const uint8_t *key, uint64_t keylen, const uint8_t *in, uint64_t inlen) {"
      },
      {
        "file": "src/crypto/blake256.h",
        "line": 40,
        "signature": "void hmac_blake256_hash(uint8_t *, const uint8_t *, uint64_t, const uint8_t *, uint64_t);"
      }
    ],
    "hmac_blake224_hash": [
      {
        "file": "src/crypto/blake256.c",
        "line": 321,
        "signature": "void hmac_blake224_hash(uint8_t *out, const uint8_t *key, uint64_t keylen, const uint8_t *in, uint64_t inlen) {"
      },
      {
        "file": "src/crypto/blake256.h",
        "line": 41,
        "signature": "void hmac_blake224_hash(uint8_t *, const uint8_t *, uint64_t, const uint8_t *, uint64_t);"
      }
    ],
    "chacha8": [
      {
        "file": "src/crypto/chacha8.h",
        "line": 21,
        "signature": "void chacha8(const void *data, size_t length, const uint8_t *key, const uint8_t *iv, char *cipher);"
      }
    ],
    "generate_chacha8_key": [
      {
        "file": "src/crypto/chacha8.h",
        "line": 50,
        "signature": "inline void generate_chacha8_key(Crypto::cn_context &context, const std::string& password, chacha8_key& key, int cn_variant = 0) {"
      }
    ],
    "fe_mul": [
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 14,
        "signature": "static void fe_mul(fe, const fe, const fe);"
      },
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 352,
        "signature": "static void fe_mul(fe h, const fe f, const fe g) {"
      }
    ],
    "fe_sq": [
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 15,
        "signature": "static void fe_sq(fe, const fe);"
      },
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 632,
        "signature": "static void fe_sq(fe h, const fe f) {"
      }
    ],
    "fe_tobytes": [
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 16,
        "signature": "static void fe_tobytes(unsigned char *, const fe);"
      },
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 1006,
        "signature": "static void fe_tobytes(unsigned char *s, const fe h) {"
      }
    ],
    "ge_madd": [
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 17,
        "signature": "static void ge_madd(ge_p1p1 *, const ge_p3 *, const ge_precomp *);"
      },
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 1312,
        "signature": "static void ge_madd(ge_p1p1 *r, const ge_p3 *p, const ge_precomp *q) {"
      }
    ],
    "ge_msub": [
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 18,
        "signature": "static void ge_msub(ge_p1p1 *, const ge_p3 *, const ge_precomp *);"
      },
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 1332,
        "signature": "static void ge_msub(ge_p1p1 *r, const ge_p3 *p, const ge_precomp *q) {"
      }
    ],
    "ge_p2_0": [
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 19,
        "signature": "static void ge_p2_0(ge_p2 *);"
      },
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 1373,
        "signature": "static void ge_p2_0(ge_p2 *h) {"
      }
    ],
    "ge_p3_dbl": [
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 20,
        "signature": "static void ge_p3_dbl(ge_p1p1 *, const ge_p3 *);"
      },
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 1413,
        "signature": "static void ge_p3_dbl(ge_p1p1 *r, const ge_p3 *p) {"
      }
    ],
    "fe_divpowm1": [
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 21,
        "signature": "static void fe_divpowm1(fe, const fe, const fe);"
      },
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 1839,
        "signature": "static void fe_divpowm1(fe r, const fe u, const fe v) {"
      }
    ],
    "load_3": [
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 25,
        "signature": "static uint64_t load_3(const unsigned char *in) {"
      }
    ],
    "fe_0": [
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 49,
        "signature": "static void fe_0(fe h) {"
      }
    ],
    "fe_1": [
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 68,
        "signature": "static void fe_1(fe h) {"
      }
    ],
    "fe_add": [
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 95,
        "signature": "static void fe_add(fe h, const fe f, const fe g) {"
      }
    ],
    "fe_cmov": [
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 147,
        "signature": "static void fe_cmov(fe f, const fe g, unsigned int b) {"
      }
    ],
    "fe_copy": [
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 208,
        "signature": "static void fe_copy(fe h, const fe f) {"
      }
    ],
    "fe_invert": [
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 233,
        "signature": "static void fe_invert(fe out, const fe z) {"
      }
    ],
    "fe_isnegative": [
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 301,
        "signature": "static int fe_isnegative(const fe f) {"
      }
    ],
    "fe_isnonzero": [
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 309,
        "signature": "static int fe_isnonzero(const fe f) {"
      }
    ],
    "fe_neg": [
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 582,
        "signature": "static void fe_neg(fe h, const fe f) {"
      }
    ],
    "fe_sq2": [
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 780,
        "signature": "static void fe_sq2(fe h, const fe f) {"
      }
    ],
    "fe_sub": [
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 936,
        "signature": "static void fe_sub(fe h, const fe f, const fe g) {"
      }
    ],
    "ge_add": [
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 1100,
        "signature": "void ge_add(ge_p1p1 *r, const ge_p3 *p, const ge_cached *q) {"
      },
      {
        "file": "src/crypto/crypto-ops.h",
        "line": 44,
        "signature": "void ge_add(ge_p1p1 *, const ge_p3 *, const ge_cached *);"
      }
    ],
    "slide": [
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 1117,
        "signature": "static void slide(signed char *r, const unsigned char *a) {"
      }
    ],
    "ge_dsm_precomp": [
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 1149,
        "signature": "void ge_dsm_precomp(ge_dsmp r, const ge_p3 *s) {"
      },
      {
        "file": "src/crypto/crypto-ops.h",
        "line": 50,
        "signature": "void ge_dsm_precomp(ge_dsmp r, const ge_p3 *s);"
      }
    ],
    "ge_double_scalarmult_base_vartime": [
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 1170,
        "signature": "void ge_double_scalarmult_base_vartime(ge_p2 *r, const unsigned char *a, const ge_p3 *A, const unsigned char *b) {"
      },
      {
        "file": "src/crypto/crypto-ops.h",
        "line": 51,
        "signature": "void ge_double_scalarmult_base_vartime(ge_p2 *, const unsigned char *, const ge_p3 *, const unsigned char *);"
      }
    ],
    "ge_frombytes_vartime": [
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 1213,
        "signature": "int ge_frombytes_vartime(ge_p3 *h, const unsigned char *s) {"
      },
      {
        "file": "src/crypto/crypto-ops.h",
        "line": 57,
        "signature": "int ge_frombytes_vartime(ge_p3 *, const unsigned char *);"
      }
    ],
    "ge_p1p1_to_p2": [
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 1352,
        "signature": "void ge_p1p1_to_p2(ge_p2 *r, const ge_p1p1 *p) {"
      },
      {
        "file": "src/crypto/crypto-ops.h",
        "line": 61,
        "signature": "void ge_p1p1_to_p2(ge_p2 *, const ge_p1p1 *);"
      }
    ],
    "ge_p1p1_to_p3": [
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 1364,
        "signature": "void ge_p1p1_to_p3(ge_p3 *r, const ge_p1p1 *p) {"
      },
      {
        "file": "src/crypto/crypto-ops.h",
        "line": 65,
        "signature": "void ge_p1p1_to_p3(ge_p3 *, const ge_p1p1 *);"
      }
    ],
    "ge_p2_dbl": [
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 1385,
        "signature": "void ge_p2_dbl(ge_p1p1 *r, const ge_p2 *p) {"
      },
      {
        "file": "src/crypto/crypto-ops.h",
        "line": 69,
        "signature": "void ge_p2_dbl(ge_p1p1 *, const ge_p2 *);"
      }
    ],
    "ge_p3_0": [
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 1400,
        "signature": "static void ge_p3_0(ge_p3 *h) {"
      }
    ],
    "ge_p3_to_cached": [
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 1425,
        "signature": "void ge_p3_to_cached(ge_cached *r, const ge_p3 *p) {"
      },
      {
        "file": "src/crypto/crypto-ops.h",
        "line": 74,
        "signature": "void ge_p3_to_cached(ge_cached *, const ge_p3 *);"
      }
    ],
    "ge_p3_to_p2": [
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 1438,
        "signature": "void ge_p3_to_p2(ge_p2 *r, const ge_p3 *p) {"
      },
      {
        "file": "src/crypto/crypto-ops.h",
        "line": 78,
        "signature": "void ge_p3_to_p2(ge_p2 *, const ge_p3 *);"
      }
    ],
    "ge_p3_tobytes": [
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 1446,
        "signature": "void ge_p3_tobytes(unsigned char *s, const ge_p3 *h) {"
      },
      {
        "file": "src/crypto/crypto-ops.h",
        "line": 82,
        "signature": "void ge_p3_tobytes(unsigned char *, const ge_p3 *);"
      }
    ],
    "ge_precomp_0": [
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 1460,
        "signature": "static void ge_precomp_0(ge_precomp *h) {"
      }
    ],
    "equal": [
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 1468,
        "signature": "static unsigned char equal(signed char b, signed char c) {"
      }
    ],
    "negative": [
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 1478,
        "signature": "static unsigned char negative(signed char b) {"
      }
    ],
    "ge_precomp_cmov": [
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 1484,
        "signature": "static void ge_precomp_cmov(ge_precomp *t, const ge_precomp *u, unsigned char b) {"
      }
    ],
    "select": [
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 1490,
        "signature": "static void select(ge_precomp *t, int pos, signed char b) {"
      }
    ],
    "ge_scalarmult_base": [
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 1519,
        "signature": "void ge_scalarmult_base(ge_p3 *h, const unsigned char *a) {"
      },
      {
        "file": "src/crypto/crypto-ops.h",
        "line": 87,
        "signature": "void ge_scalarmult_base(ge_p3 *, const unsigned char *);"
      }
    ],
    "ge_sub": [
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 1567,
        "signature": "void ge_sub(ge_p1p1 *r, const ge_p3 *p, const ge_cached *q) {"
      },
      {
        "file": "src/crypto/crypto-ops.h",
        "line": 91,
        "signature": "void ge_sub(ge_p1p1 *, const ge_p3 *, const ge_cached *);"
      }
    ],
    "ge_tobytes": [
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 1584,
        "signature": "void ge_tobytes(unsigned char *s, const ge_p2 *h) {"
      },
      {
        "file": "src/crypto/crypto-ops.h",
        "line": 95,
        "signature": "void ge_tobytes(unsigned char *, const ge_p2 *);"
      }
    ],
    "sc_reduce": [
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 1608,
        "signature": "void sc_reduce(unsigned char *s) {"
      },
      {
        "file": "src/crypto/crypto-ops.h",
        "line": 99,
        "signature": "void sc_reduce(unsigned char *);"
      }
    ],
    "ge_cached_0": [
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 1903,
        "signature": "static void ge_cached_0(ge_cached *r) {"
      }
    ],
    "ge_cached_cmov": [
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 1910,
        "signature": "static void ge_cached_cmov(ge_cached *t, const ge_cached *u, unsigned char b) {"
      }
    ],
    "ge_scalarmult": [
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 1918,
        "signature": "void ge_scalarmult(ge_p2 *r, const unsigned char *a, const ge_p3 *A) {"
      },
      {
        "file": "src/crypto/crypto-ops.h",
        "line": 103,
        "signature": "void ge_scalarmult(ge_p2 *, const unsigned char *, const ge_p3 *);"
      }
    ],
    "ge_double_scalarmult_precomp_vartime": [
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 1978,
        "signature": "void ge_double_scalarmult_precomp_vartime(ge_p2 *r, const unsigned char *a, const ge_p3 *A, const unsigned char *b, const ge_dsmp Bi) {"
      },
      {
        "file": "src/crypto/crypto-ops.h",
        "line": 104,
        "signature": "void ge_double_scalarmult_precomp_vartime(ge_p2 *, const unsigned char *, const ge_p3 *, const unsigned char *, const ge_dsmp);"
      }
    ],
    "ge_mul8": [
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 2019,
        "signature": "void ge_mul8(ge_p1p1 *r, const ge_p2 *t) {"
      },
      {
        "file": "src/crypto/crypto-ops.h",
        "line": 105,
        "signature": "void ge_mul8(ge_p1p1 *, const ge_p2 *);"
      }
    ],
    "ge_fromfe_frombytes_vartime": [
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 2028,
        "signature": "void ge_fromfe_frombytes_vartime(ge_p2 *r, const unsigned char *s) {"
      },
      {
        "file": "src/crypto/crypto-ops.h",
        "line": 112,
        "signature": "void ge_fromfe_frombytes_vartime(ge_p2 *, const unsigned char *);"
      }
    ],
    "sc_0": [
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 2144,
        "signature": "void sc_0(unsigned char *s) {"
      },
      {
        "file": "src/crypto/crypto-ops.h",
        "line": 113,
        "signature": "void sc_0(unsigned char *);"
      }
    ],
    "sc_reduce32": [
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 2151,
        "signature": "void sc_reduce32(unsigned char *s) {"
      },
      {
        "file": "src/crypto/crypto-ops.h",
        "line": 114,
        "signature": "void sc_reduce32(unsigned char *);"
      }
    ],
    "sc_add": [
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 2266,
        "signature": "void sc_add(unsigned char *s, const unsigned char *a, const unsigned char *b) {"
      },
      {
        "file": "src/crypto/crypto-ops.h",
        "line": 115,
        "signature": "void sc_add(unsigned char *, const unsigned char *, const unsigned char *);"
      }
    ],
    "sc_sub": [
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 2405,
        "signature": "void sc_sub(unsigned char *s, const unsigned char *a, const unsigned char *b) {"
      },
      {
        "file": "src/crypto/crypto-ops.h",
        "line": 116,
        "signature": "void sc_sub(unsigned char *, const unsigned char *, const unsigned char *);"
      }
    ],
    "sc_mulsub": [
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 2555,
        "signature": "void sc_mulsub(unsigned char *s, const unsigned char *a, const unsigned char *b, const unsigned char *c) {"
      },
      {
        "file": "src/crypto/crypto-ops.h",
        "line": 117,
        "signature": "void sc_mulsub(unsigned char *, const unsigned char *, const unsigned char *, const unsigned char *);"
      }
    ],
    "signum": [
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 2877,
        "signature": "static int64_t signum(int64_t a) {"
      }
    ],
    "sc_check": [
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 2881,
        "signature": "int sc_check(const unsigned char *s) {"
      },
      {
        "file": "src/crypto/crypto-ops.h",
        "line": 118,
        "signature": "int sc_check(const unsigned char *);"
      }
    ],
    "sc_isnonzero": [
      {
        "file": "src/crypto/crypto-ops.c",
        "line": 2893,
        "signature": "int sc_isnonzero(const unsigned char *s) {"
      },
      {
        "file": "src/crypto/crypto-ops.h",
        "line": 119,
        "signature": "int sc_isnonzero(const unsigned char *); /* Doesn't normalize */"
      }
    ],
    "sodium_memzero": [
      {
        "file": "src/crypto/crypto-util.h",
        "line": 31,
        "signature": "void sodium_memzero(void *pnt, size_t length);"
      }
    ],
    "sodium_compare": [
      {
        "file": "src/crypto/crypto-util.h",
        "line": 32,
        "signature": "int sodium_compare(const void *a1, const void *a2, size_t length);"
      }
    ],
    "random_scalar": [
      {
        "file": "src/crypto/crypto.cpp",
        "line": 62,
        "signature": "static inline void random_scalar(EllipticCurveScalar &res) {"
      }
    ],
    "derivation_to_scalar": [
      {
        "file": "src/crypto/crypto.cpp",
        "line": 121,
        "signature": "static void derivation_to_scalar(const KeyDerivation &derivation, size_t output_index, EllipticCurveScalar &res) {"
      },
      {
        "file": "src/crypto/crypto.cpp",
        "line": 133,
        "signature": "static void derivation_to_scalar(const KeyDerivation &derivation, size_t output_index, const uint8_t* suffix, size_t suffixLength, EllipticCurveScalar &res) {"
      }
    ],
    "hash_to_ec": [
      {
        "file": "src/crypto/crypto.cpp",
        "line": 439,
        "signature": "static void hash_to_ec(const PublicKey &key, ge_p3 &res) {"
      }
    ],
    "rs_comm_size": [
      {
        "file": "src/crypto/crypto.cpp",
        "line": 497,
        "signature": "static inline size_t rs_comm_size(size_t pubs_count) {"
      }
    ],
    "generate_keys": [
      {
        "file": "src/crypto/crypto.h",
        "line": 45,
        "signature": "static void generate_keys(PublicKey &, SecretKey &);"
      },
      {
        "file": "src/crypto/crypto.h",
        "line": 46,
        "signature": "friend void generate_keys(PublicKey &, SecretKey &);"
      },
      {
        "file": "src/crypto/crypto.h",
        "line": 143,
        "signature": "inline void generate_keys(PublicKey &pub, SecretKey &sec) {"
      }
    ],
    "generate_keys_from_seed": [
      {
        "file": "src/crypto/crypto.h",
        "line": 47,
        "signature": "static void generate_keys_from_seed(PublicKey &, SecretKey &, SecretKey &);"
      },
      {
        "file": "src/crypto/crypto.h",
        "line": 48,
        "signature": "friend void generate_keys_from_seed(PublicKey &, SecretKey &, SecretKey &);"
      },
      {
        "file": "src/crypto/crypto.h",
        "line": 161,
        "signature": "inline void generate_keys_from_seed(PublicKey &pub, SecretKey &sec, SecretKey &seed) {"
      }
    ],
    "check_key": [
      {
        "file": "src/crypto/crypto.h",
        "line": 49,
        "signature": "static bool check_key(const PublicKey &);"
      },
      {
        "file": "src/crypto/crypto.h",
        "line": 50,
        "signature": "friend bool check_key(const PublicKey &);"
      },
      {
        "file": "src/crypto/crypto.h",
        "line": 149,
        "signature": "inline bool check_key(const PublicKey &key) {"
      }
    ],
    "secret_key_to_public_key": [
      {
        "file": "src/crypto/crypto.h",
        "line": 51,
        "signature": "static bool secret_key_to_public_key(const SecretKey &, PublicKey &);"
      },
      {
        "file": "src/crypto/crypto.h",
        "line": 52,
        "signature": "friend bool secret_key_to_public_key(const SecretKey &, PublicKey &);"
      },
      {
        "file": "src/crypto/crypto.h",
        "line": 155,
        "signature": "inline bool secret_key_to_public_key(const SecretKey &sec, PublicKey &pub) {"
      }
    ],
    "generate_key_derivation": [
      {
        "file": "src/crypto/crypto.h",
        "line": 53,
        "signature": "static bool generate_key_derivation(const PublicKey &, const SecretKey &, KeyDerivation &);"
      },
      {
        "file": "src/crypto/crypto.h",
        "line": 54,
        "signature": "friend bool generate_key_derivation(const PublicKey &, const SecretKey &, KeyDerivation &);"
      },
      {
        "file": "src/crypto/crypto.h",
        "line": 171,
        "signature": "inline bool generate_key_derivation(const PublicKey &key1, const SecretKey &key2, KeyDerivation &derivation) {"
      }
    ],
    "derive_public_key": [
      {
        "file": "src/crypto/crypto.h",
        "line": 55,
        "signature": "static bool derive_public_key(const KeyDerivation &, size_t, const PublicKey &, PublicKey &);"
      },
      {
        "file": "src/crypto/crypto.h",
        "line": 56,
        "signature": "friend bool derive_public_key(const KeyDerivation &, size_t, const PublicKey &, PublicKey &);"
      },
      {
        "file": "src/crypto/crypto.h",
        "line": 57,
        "signature": "friend bool derive_public_key(const KeyDerivation &, size_t, const PublicKey &, const uint8_t*, size_t, PublicKey &);"
      },
      {
        "file": "src/crypto/crypto.h",
        "line": 58,
        "signature": "static bool derive_public_key(const KeyDerivation &, size_t, const PublicKey &, const uint8_t*, size_t, PublicKey &);"
      }
    ],
    "underive_public_key_and_get_scalar": [
      {
        "file": "src/crypto/crypto.h",
        "line": 60,
        "signature": "static bool underive_public_key_and_get_scalar(const KeyDerivation &, std::size_t, const PublicKey &, PublicKey &, EllipticCurveScalar &);"
      },
      {
        "file": "src/crypto/crypto.h",
        "line": 61,
        "signature": "friend bool underive_public_key_and_get_scalar(const KeyDerivation &, std::size_t, const PublicKey &, PublicKey &, EllipticCurveScalar &);"
      }
    ],
    "generate_incomplete_key_image": [
      {
        "file": "src/crypto/crypto.h",
        "line": 62,
        "signature": "static void generate_incomplete_key_image(const PublicKey &, EllipticCurvePoint &);"
      },
      {
        "file": "src/crypto/crypto.h",
        "line": 63,
        "signature": "friend void generate_incomplete_key_image(const PublicKey &, EllipticCurvePoint &);"
      }
    ],
    "derive_secret_key": [
      {
        "file": "src/crypto/crypto.h",
        "line": 65,
        "signature": "static void derive_secret_key(const KeyDerivation &, size_t, const SecretKey &, SecretKey &);"
      },
      {
        "file": "src/crypto/crypto.h",
        "line": 66,
        "signature": "friend void derive_secret_key(const KeyDerivation &, size_t, const SecretKey &, SecretKey &);"
      },
      {
        "file": "src/crypto/crypto.h",
        "line": 67,
        "signature": "static void derive_secret_key(const KeyDerivation &, size_t, const SecretKey &, const uint8_t*, size_t, SecretKey &);"
      },
      {
        "file": "src/crypto/crypto.h",
        "line": 68,
        "signature": "friend void derive_secret_key(const KeyDerivation &, size_t, const SecretKey &, const uint8_t*, size_t, SecretKey &);"
      }
    ],
    "underive_public_key": [
      {
        "file": "src/crypto/crypto.h",
        "line": 69,
        "signature": "static bool underive_public_key(const KeyDerivation &, size_t, const PublicKey &, PublicKey &);"
      },
      {
        "file": "src/crypto/crypto.h",
        "line": 70,
        "signature": "friend bool underive_public_key(const KeyDerivation &, size_t, const PublicKey &, PublicKey &);"
      },
      {
        "file": "src/crypto/crypto.h",
        "line": 71,
        "signature": "static bool underive_public_key(const KeyDerivation &, size_t, const PublicKey &, const uint8_t*, size_t, PublicKey &);"
      },
      {
        "file": "src/crypto/crypto.h",
        "line": 72,
        "signature": "friend bool underive_public_key(const KeyDerivation &, size_t, const PublicKey &, const uint8_t*, size_t, PublicKey &);"
      }
    ],
    "generate_signature": [
      {
        "file": "src/crypto/crypto.h",
        "line": 73,
        "signature": "static void generate_signature(const Hash &, const PublicKey &, const SecretKey &, Signature &);"
      },
      {
        "file": "src/crypto/crypto.h",
        "line": 74,
        "signature": "friend void generate_signature(const Hash &, const PublicKey &, const SecretKey &, Signature &);"
      },
      {
        "file": "src/crypto/crypto.h",
        "line": 216,
        "signature": "inline void generate_signature(const Hash &prefix_hash, const PublicKey &pub, const SecretKey &sec, Signature &sig) {"
      }
    ],
    "check_signature": [
      {
        "file": "src/crypto/crypto.h",
        "line": 75,
        "signature": "static bool check_signature(const Hash &, const PublicKey &, const Signature &);"
      },
      {
        "file": "src/crypto/crypto.h",
        "line": 76,
        "signature": "friend bool check_signature(const Hash &, const PublicKey &, const Signature &);"
      },
      {
        "file": "src/crypto/crypto.h",
        "line": 219,
        "signature": "inline bool check_signature(const Hash &prefix_hash, const PublicKey &pub, const Signature &sig) {"
      }
    ],
    "generate_key_image": [
      {
        "file": "src/crypto/crypto.h",
        "line": 77,
        "signature": "static void generate_key_image(const PublicKey &, const SecretKey &, KeyImage &);"
      },
      {
        "file": "src/crypto/crypto.h",
        "line": 78,
        "signature": "friend void generate_key_image(const PublicKey &, const SecretKey &, KeyImage &);"
      },
      {
        "file": "src/crypto/crypto.h",
        "line": 239,
        "signature": "inline void generate_key_image(const PublicKey &pub, const SecretKey &sec, KeyImage &image) {"
      }
    ],
    "scalarmultKey": [
      {
        "file": "src/crypto/crypto.h",
        "line": 79,
        "signature": "static KeyImage scalarmultKey(const KeyImage & P, const KeyImage & a);"
      },
      {
        "file": "src/crypto/crypto.h",
        "line": 80,
        "signature": "friend KeyImage scalarmultKey(const KeyImage & P, const KeyImage & a);"
      },
      {
        "file": "src/crypto/crypto.h",
        "line": 243,
        "signature": "inline KeyImage scalarmultKey(const KeyImage & P, const KeyImage & a) {"
      }
    ],
    "hash_data_to_ec": [
      {
        "file": "src/crypto/crypto.h",
        "line": 81,
        "signature": "static void hash_data_to_ec(const uint8_t*, std::size_t, PublicKey&);"
      },
      {
        "file": "src/crypto/crypto.h",
        "line": 82,
        "signature": "friend void hash_data_to_ec(const uint8_t*, std::size_t, PublicKey&);"
      },
      {
        "file": "src/crypto/crypto.h",
        "line": 247,
        "signature": "inline void hash_data_to_ec(const uint8_t* data, std::size_t len, PublicKey& key) {"
      }
    ],
    "generate_tx_proof": [
      {
        "file": "src/crypto/crypto.h",
        "line": 85,
        "signature": "static void generate_tx_proof(const Hash &, const PublicKey &, const PublicKey &, const PublicKey &, const SecretKey &, Signature &);"
      },
      {
        "file": "src/crypto/crypto.h",
        "line": 86,
        "signature": "friend void generate_tx_proof(const Hash &, const PublicKey &, const PublicKey &, const PublicKey &, const SecretKey &, Signature &);"
      },
      {
        "file": "src/crypto/crypto.h",
        "line": 226,
        "signature": "inline void generate_tx_proof(const Hash &prefix_hash, const PublicKey &R, const PublicKey &A, const PublicKey &D, const SecretKey &r, Signature &sig) {"
      }
    ],
    "check_tx_proof": [
      {
        "file": "src/crypto/crypto.h",
        "line": 87,
        "signature": "static bool check_tx_proof(const Hash &, const PublicKey &, const PublicKey &, const PublicKey &, const Signature &);"
      },
      {
        "file": "src/crypto/crypto.h",
        "line": 88,
        "signature": "friend bool check_tx_proof(const Hash &, const PublicKey &, const PublicKey &, const PublicKey &, const Signature &);"
      },
      {
        "file": "src/crypto/crypto.h",
        "line": 229,
        "signature": "inline bool check_tx_proof(const Hash &prefix_hash, const PublicKey &R, const PublicKey &A, const PublicKey &D, const Signature &sig) {"
      }
    ],
    "min": [
      {
        "file": "src/crypto/crypto.h",
        "line": 118,
        "signature": "constexpr static T min() {"
      }
    ],
    "max": [
      {
        "file": "src/crypto/crypto.h",
        "line": 122,
        "signature": "constexpr static T max() {"
      }
    ],
    "hash_to_scalar": [
      {
        "file": "src/crypto/crypto.h",
        "line": 139,
        "signature": "void hash_to_scalar(const void *data, size_t length, EllipticCurveScalar &res);"
      }
    ],
    "hash_value": [
      {
        "file": "src/crypto/generic-ops.h",
        "line": 38,
        "signature": "inline size_t hash_value(const type &_v) { \\"
      }
    ],
    "RND512P": [
      {
        "file": "src/crypto/groestl.c",
        "line": 67,
        "signature": "static void RND512P(uint8_t *x, uint32_t *y, uint32_t r) {"
      }
    ],
    "RND512Q": [
      {
        "file": "src/crypto/groestl.c",
        "line": 89,
        "signature": "static void RND512Q(uint8_t *x, uint32_t *y, uint32_t r) {"
      }
    ],
    "F512": [
      {
        "file": "src/crypto/groestl.c",
        "line": 119,
        "signature": "static void F512(uint32_t *h, const uint32_t *m) {"
      }
    ],
    "OutputTransformation": [
      {
        "file": "src/crypto/groestl.c",
        "line": 179,
        "signature": "static void OutputTransformation(hashState *ctx) {"
      }
    ],
    "Init": [
      {
        "file": "src/crypto/groestl.c",
        "line": 206,
        "signature": "static void Init(hashState* ctx) {"
      },
      {
        "file": "src/crypto/jh.c",
        "line": 97,
        "signature": "static HashReturn Init(hashState *state, int hashbitlen);"
      },
      {
        "file": "src/crypto/skein.c",
        "line": 1936,
        "signature": "static HashReturn Init  (hashState *state, int hashbitlen);"
      }
    ],
    "Update": [
      {
        "file": "src/crypto/groestl.h",
        "line": 49,
        "signature": "void Update(hashState*, const BitSequence*, DataLength);"
      },
      {
        "file": "src/crypto/jh.c",
        "line": 98,
        "signature": "static HashReturn Update(hashState *state, const BitSequence *data, DataLength databitlen);"
      },
      {
        "file": "src/crypto/skein.c",
        "line": 1937,
        "signature": "static HashReturn Update(hashState *state, const BitSequence *data, DataLength databitlen);"
      }
    ],
    "Final": [
      {
        "file": "src/crypto/groestl.h",
        "line": 50,
        "signature": "void Final(hashState*, BitSequence*); */"
      },
      {
        "file": "src/crypto/jh.c",
        "line": 99,
        "signature": "static HashReturn Final(hashState *state, BitSequence *hashval);"
      },
      {
        "file": "src/crypto/skein.c",
        "line": 1938,
        "signature": "static HashReturn Final (hashState *state,       BitSequence *hashval);"
      }
    ],
    "groestl": [
      {
        "file": "src/crypto/groestl.h",
        "line": 51,
        "signature": "void groestl(const BitSequence*, DataLength, BitSequence*);"
      }
    ],
    "hash_extra_blake": [
      {
        "file": "src/crypto/hash-extra-blake.c",
        "line": 23,
        "signature": "void hash_extra_blake(const void *data, size_t length, char *hash) {"
      },
      {
        "file": "src/crypto/hash-ops.h",
        "line": 70,
        "signature": "void hash_extra_blake(const void *data, size_t length, char *hash);"
      }
    ],
    "hash_extra_groestl": [
      {
        "file": "src/crypto/hash-extra-groestl.c",
        "line": 23,
        "signature": "void hash_extra_groestl(const void *data, size_t length, char *hash) {"
      },
      {
        "file": "src/crypto/hash-ops.h",
        "line": 71,
        "signature": "void hash_extra_groestl(const void *data, size_t length, char *hash);"
      }
    ],
    "hash_extra_jh": [
      {
        "file": "src/crypto/hash-extra-jh.c",
        "line": 26,
        "signature": "void hash_extra_jh(const void *data, size_t length, char *hash) {"
      },
      {
        "file": "src/crypto/hash-ops.h",
        "line": 72,
        "signature": "void hash_extra_jh(const void *data, size_t length, char *hash);"
      }
    ],
    "hash_extra_skein": [
      {
        "file": "src/crypto/hash-extra-skein.c",
        "line": 24,
        "signature": "void hash_extra_skein(const void *data, size_t length, char *hash) {"
      },
      {
        "file": "src/crypto/hash-ops.h",
        "line": 73,
        "signature": "void hash_extra_skein(const void *data, size_t length, char *hash);"
      }
    ],
    "place_length": [
      {
        "file": "src/crypto/hash-ops.h",
        "line": 39,
        "signature": "static inline void place_length(uint8_t *buffer, size_t bufsize, size_t length) {"
      }
    ],
    "hash_permutation": [
      {
        "file": "src/crypto/hash-ops.h",
        "line": 55,
        "signature": "void hash_permutation(union hash_state *state);"
      },
      {
        "file": "src/crypto/hash.c",
        "line": 14,
        "signature": "void hash_permutation(union hash_state *state) {"
      }
    ],
    "hash_process": [
      {
        "file": "src/crypto/hash-ops.h",
        "line": 56,
        "signature": "void hash_process(union hash_state *state, const uint8_t *buf, size_t count);"
      },
      {
        "file": "src/crypto/hash.c",
        "line": 18,
        "signature": "void hash_process(union hash_state *state, const uint8_t *buf, size_t count) {"
      }
    ],
    "cn_fast_hash": [
      {
        "file": "src/crypto/hash-ops.h",
        "line": 66,
        "signature": "void cn_fast_hash(const void *data, size_t length, char *hash);"
      },
      {
        "file": "src/crypto/hash.c",
        "line": 22,
        "signature": "void cn_fast_hash(const void *data, size_t length, char *hash) {"
      },
      {
        "file": "src/crypto/hash.h",
        "line": 35,
        "signature": "inline void cn_fast_hash(const void *data, size_t length, Hash &hash) {"
      },
      {
        "file": "src/crypto/hash.h",
        "line": 39,
        "signature": "inline Hash cn_fast_hash(const void *data, size_t length) {"
      }
    ],
    "cn_slow_hash": [
      {
        "file": "src/crypto/hash-ops.h",
        "line": 68,
        "signature": "void cn_slow_hash(const void *data, size_t length, char *hash, int light, int variant, int prehashed);"
      },
      {
        "file": "src/crypto/hash.h",
        "line": 58,
        "signature": "friend inline void cn_slow_hash(cn_context &, const void *, size_t, Hash &, int, int, int);"
      },
      {
        "file": "src/crypto/hash.h",
        "line": 61,
        "signature": "inline void cn_slow_hash(cn_context &context, const void *data, size_t length, Hash &hash, int light = 0, int variant = 0, int prehashed = 0) {"
      },
      {
        "file": "src/crypto/slow-hash.c",
        "line": 1486,
        "signature": "void cn_slow_hash(const void *data, size_t length, char *hash, int light, int variant, int prehashed) {"
      }
    ],
    "tree_depth": [
      {
        "file": "src/crypto/hash-ops.h",
        "line": 76,
        "signature": "size_t tree_depth(size_t count);"
      },
      {
        "file": "src/crypto/tree-hash.c",
        "line": 44,
        "signature": "size_t tree_depth(size_t count) {"
      }
    ],
    "cn_slow_hash_prehashed": [
      {
        "file": "src/crypto/hash.h",
        "line": 65,
        "signature": "inline void cn_slow_hash_prehashed(const void *data, std::size_t length, Hash &hash, int light = 0, int variant = 0, int prehashed = 0) {"
      }
    ],
    "tree_hash": [
      {
        "file": "src/crypto/hash.h",
        "line": 69,
        "signature": "inline void tree_hash(const Hash *hashes, size_t count, Hash &root_hash) {"
      }
    ],
    "tree_branch": [
      {
        "file": "src/crypto/hash.h",
        "line": 73,
        "signature": "inline void tree_branch(const Hash *hashes, size_t count, Hash *branch) {"
      }
    ],
    "tree_hash_from_branch": [
      {
        "file": "src/crypto/hash.h",
        "line": 77,
        "signature": "inline void tree_hash_from_branch(const Hash *branch, size_t depth, const Hash &leaf, const void *path, Hash &root_hash) {"
      }
    ],
    "name": [
      {
        "file": "src/crypto/initializer.h",
        "line": 32,
        "signature": "static void __cdecl name(void); \\"
      }
    ],
    "E8": [
      {
        "file": "src/crypto/jh.c",
        "line": 93,
        "signature": "static void E8(hashState *state);  /*The bijective function E8, in bitslice form*/"
      }
    ],
    "F8": [
      {
        "file": "src/crypto/jh.c",
        "line": 94,
        "signature": "static void F8(hashState *state);  /*The compression function F8 */"
      }
    ],
    "jh_hash": [
      {
        "file": "src/crypto/jh.c",
        "line": 100,
        "signature": "HashReturn jh_hash(int hashbitlen, const BitSequence *data,DataLength databitlen, BitSequence *hashval);"
      },
      {
        "file": "src/crypto/jh.h",
        "line": 21,
        "signature": "HashReturn jh_hash(int hashbitlen, const BitSequence *data, DataLength databitlen, BitSequence *hashval);"
      }
    ],
    "keccak": [
      {
        "file": "src/crypto/keccak.h",
        "line": 19,
        "signature": "int keccak(const uint8_t *in, int inlen, uint8_t *md, int mdlen);"
      }
    ],
    "keccakf": [
      {
        "file": "src/crypto/keccak.h",
        "line": 22,
        "signature": "void keccakf(uint64_t st[25], int norounds);"
      }
    ],
    "keccak1600": [
      {
        "file": "src/crypto/keccak.h",
        "line": 24,
        "signature": "void keccak1600(const uint8_t *in, int inlen, uint8_t *md);"
      }
    ],
    "oaes_key_gen": [
      {
        "file": "src/crypto/oaes_lib.c",
        "line": 669,
        "signature": "return oaes_key_gen( ctx, 16 );"
      },
      {
        "file": "src/crypto/oaes_lib.c",
        "line": 674,
        "signature": "return oaes_key_gen( ctx, 24 );"
      },
      {
        "file": "src/crypto/oaes_lib.c",
        "line": 679,
        "signature": "return oaes_key_gen( ctx, 32 );"
      }
    ],
    "oaes_free": [
      {
        "file": "src/crypto/oaes_lib.h",
        "line": 166,
        "signature": "OAES_API OAES_RET oaes_free( OAES_CTX ** ctx );"
      }
    ],
    "oaes_key_gen_128": [
      {
        "file": "src/crypto/oaes_lib.h",
        "line": 171,
        "signature": "OAES_API OAES_RET oaes_key_gen_128( OAES_CTX * ctx );"
      }
    ],
    "oaes_key_gen_192": [
      {
        "file": "src/crypto/oaes_lib.h",
        "line": 173,
        "signature": "OAES_API OAES_RET oaes_key_gen_192( OAES_CTX * ctx );"
      }
    ],
    "oaes_key_gen_256": [
      {
        "file": "src/crypto/oaes_lib.h",
        "line": 175,
        "signature": "OAES_API OAES_RET oaes_key_gen_256( OAES_CTX * ctx );"
      }
    ],
    "oaes_encryption_round": [
      {
        "file": "src/crypto/oaes_lib.h",
        "line": 207,
        "signature": "OAES_API OAES_RET oaes_encryption_round( const uint8_t * key, uint8_t * c );"
      }
    ],
    "oaes_pseudo_encrypt_ecb": [
      {
        "file": "src/crypto/oaes_lib.h",
        "line": 209,
        "signature": "OAES_API OAES_RET oaes_pseudo_encrypt_ecb( OAES_CTX * ctx, uint8_t * c );"
      }
    ],
    "generate_system_random_bytes": [
      {
        "file": "src/crypto/random.c",
        "line": 26,
        "signature": "static void generate_system_random_bytes(size_t n, void *result);"
      },
      {
        "file": "src/crypto/random.c",
        "line": 33,
        "signature": "static void generate_system_random_bytes(size_t n, void *result) {"
      },
      {
        "file": "src/crypto/random.c",
        "line": 52,
        "signature": "static void generate_system_random_bytes(size_t n, void *result) {"
      }
    ],
    "generate_random_bytes": [
      {
        "file": "src/crypto/random.c",
        "line": 103,
        "signature": "void generate_random_bytes(size_t n, void *result) {"
      },
      {
        "file": "src/crypto/random.h",
        "line": 24,
        "signature": "void generate_random_bytes(size_t n, void *result);"
      }
    ],
    "distribution": [
      {
        "file": "src/crypto/randomize.h",
        "line": 73,
        "signature": "return distribution(gen);"
      },
      {
        "file": "src/crypto/randomize.h",
        "line": 87,
        "signature": "return distribution(gen);"
      }
    ],
    "Skein_256_Init": [
      {
        "file": "src/crypto/skein.c",
        "line": 81,
        "signature": "static int  Skein_256_Init  (Skein_256_Ctxt_t *ctx, size_t hashBitLen);"
      }
    ],
    "Skein_512_Init": [
      {
        "file": "src/crypto/skein.c",
        "line": 83,
        "signature": "static int  Skein_512_Init  (Skein_512_Ctxt_t *ctx, size_t hashBitLen);"
      }
    ],
    "Skein1024_Init": [
      {
        "file": "src/crypto/skein.c",
        "line": 84,
        "signature": "static int  Skein1024_Init  (Skein1024_Ctxt_t *ctx, size_t hashBitLen);"
      }
    ],
    "Skein_256_Update": [
      {
        "file": "src/crypto/skein.c",
        "line": 86,
        "signature": "static int  Skein_256_Update(Skein_256_Ctxt_t *ctx, const u08b_t *msg, size_t msgByteCnt);"
      }
    ],
    "Skein_512_Update": [
      {
        "file": "src/crypto/skein.c",
        "line": 87,
        "signature": "static int  Skein_512_Update(Skein_512_Ctxt_t *ctx, const u08b_t *msg, size_t msgByteCnt);"
      }
    ],
    "Skein1024_Update": [
      {
        "file": "src/crypto/skein.c",
        "line": 88,
        "signature": "static int  Skein1024_Update(Skein1024_Ctxt_t *ctx, const u08b_t *msg, size_t msgByteCnt);"
      }
    ],
    "Skein_256_Final": [
      {
        "file": "src/crypto/skein.c",
        "line": 90,
        "signature": "static int  Skein_256_Final (Skein_256_Ctxt_t *ctx, u08b_t * hashVal);"
      }
    ],
    "Skein_512_Final": [
      {
        "file": "src/crypto/skein.c",
        "line": 91,
        "signature": "static int  Skein_512_Final (Skein_512_Ctxt_t *ctx, u08b_t * hashVal);"
      }
    ],
    "Skein1024_Final": [
      {
        "file": "src/crypto/skein.c",
        "line": 92,
        "signature": "static int  Skein1024_Final (Skein1024_Ctxt_t *ctx, u08b_t * hashVal);"
      }
    ],
    "Skein_256_InitExt": [
      {
        "file": "src/crypto/skein.c",
        "line": 109,
        "signature": "static int  Skein_256_InitExt(Skein_256_Ctxt_t *ctx, size_t hashBitLen, u64b_t treeInfo, const u08b_t *key, size_t keyBytes);"
      }
    ],
    "Skein_512_InitExt": [
      {
        "file": "src/crypto/skein.c",
        "line": 110,
        "signature": "static int  Skein_512_InitExt(Skein_512_Ctxt_t *ctx, size_t hashBitLen, u64b_t treeInfo, const u08b_t *key, size_t keyBytes);"
      }
    ],
    "Skein1024_InitExt": [
      {
        "file": "src/crypto/skein.c",
        "line": 111,
        "signature": "static int  Skein1024_InitExt(Skein1024_Ctxt_t *ctx, size_t hashBitLen, u64b_t treeInfo, const u08b_t *key, size_t keyBytes);"
      }
    ],
    "Skein_256_Final_Pad": [
      {
        "file": "src/crypto/skein.c",
        "line": 120,
        "signature": "static int  Skein_256_Final_Pad(Skein_256_Ctxt_t *ctx, u08b_t * hashVal);"
      }
    ],
    "Skein_512_Final_Pad": [
      {
        "file": "src/crypto/skein.c",
        "line": 121,
        "signature": "static int  Skein_512_Final_Pad(Skein_512_Ctxt_t *ctx, u08b_t * hashVal);"
      }
    ],
    "Skein1024_Final_Pad": [
      {
        "file": "src/crypto/skein.c",
        "line": 122,
        "signature": "static int  Skein1024_Final_Pad(Skein1024_Ctxt_t *ctx, u08b_t * hashVal);"
      }
    ],
    "Skein_256_Output": [
      {
        "file": "src/crypto/skein.c",
        "line": 130,
        "signature": "static int  Skein_256_Output   (Skein_256_Ctxt_t *ctx, u08b_t * hashVal);"
      }
    ],
    "Skein_512_Output": [
      {
        "file": "src/crypto/skein.c",
        "line": 131,
        "signature": "static int  Skein_512_Output   (Skein_512_Ctxt_t *ctx, u08b_t * hashVal);"
      }
    ],
    "Skein1024_Output": [
      {
        "file": "src/crypto/skein.c",
        "line": 132,
        "signature": "static int  Skein1024_Output   (Skein1024_Ctxt_t *ctx, u08b_t * hashVal);"
      }
    ],
    "aesb_single_round": [
      {
        "file": "src/crypto/slow-hash.c",
        "line": 54,
        "signature": "extern int aesb_single_round(const uint8_t *in, uint8_t *out, const uint8_t *expandedKey);"
      },
      {
        "file": "src/crypto/slow-hash.c",
        "line": 1416,
        "signature": "extern int aesb_single_round(const uint8_t *in, uint8_t*out, const uint8_t *expandedKey);"
      }
    ],
    "aesb_pseudo_round": [
      {
        "file": "src/crypto/slow-hash.c",
        "line": 55,
        "signature": "extern int aesb_pseudo_round(const uint8_t *in, uint8_t *out, const uint8_t *expandedKey);"
      },
      {
        "file": "src/crypto/slow-hash.c",
        "line": 1417,
        "signature": "extern int aesb_pseudo_round(const uint8_t *in, uint8_t *out, const uint8_t *expandedKey);"
      }
    ],
    "aes_expand_key": [
      {
        "file": "src/crypto/slow-hash.c",
        "line": 923,
        "signature": "static void aes_expand_key(const uint8_t *key, uint8_t *expandedKey) {"
      }
    ],
    "e2i": [
      {
        "file": "src/crypto/slow-hash.c",
        "line": 1419,
        "signature": "static size_t e2i(const uint8_t* a, size_t count) { return (*((uint64_t*)a) / AES_BLOCK_SIZE) & (count - 1); }"
      }
    ],
    "sum_half_blocks": [
      {
        "file": "src/crypto/slow-hash.c",
        "line": 1432,
        "signature": "static void sum_half_blocks(uint8_t* a, const uint8_t* b) {"
      }
    ],
    "copy_block": [
      {
        "file": "src/crypto/slow-hash.c",
        "line": 1446,
        "signature": "static void copy_block(uint8_t* dst, const uint8_t* src) {"
      }
    ],
    "swap_blocks": [
      {
        "file": "src/crypto/slow-hash.c",
        "line": 1450,
        "signature": "static void swap_blocks(uint8_t *a, uint8_t *b){"
      }
    ],
    "xor_blocks": [
      {
        "file": "src/crypto/slow-hash.c",
        "line": 1460,
        "signature": "static void xor_blocks(uint8_t* a, const uint8_t* b) {"
      }
    ],
    "bad_alloc": [
      {
        "file": "src/crypto/slow-hash.cpp",
        "line": 41,
        "signature": "throw bad_alloc();"
      },
      {
        "file": "src/crypto/slow-hash.cpp",
        "line": 47,
        "signature": "throw bad_alloc();"
      },
      {
        "file": "src/crypto/slow-hash.cpp",
        "line": 60,
        "signature": "throw bad_alloc();"
      }
    ],
    "_mm_xor_si128": [
      {
        "file": "src/crypto/soft_aes.hpp",
        "line": 87,
        "signature": "return _mm_xor_si128(out, key);"
      }
    ],
    "_rotr": [
      {
        "file": "src/crypto/soft_aes.hpp",
        "line": 99,
        "signature": "static inline uint32_t _rotr(uint32_t value, uint32_t amount) {"
      }
    ],
    "vqabsq_s32": [
      {
        "file": "src/crypto/sse2neon.h",
        "line": 699,
        "signature": "return vqabsq_s32(a);"
      }
    ],
    "vld1q_s32": [
      {
        "file": "src/crypto/sse2neon.h",
        "line": 1062,
        "signature": "return vld1q_s32(r);"
      }
    ],
    "vreinterpretq_m128_f32": [
      {
        "file": "src/crypto/sse2neon.h",
        "line": 1781,
        "signature": "return vreinterpretq_m128_f32(recip);"
      },
      {
        "file": "src/crypto/sse2neon.h",
        "line": 1791,
        "signature": "return vreinterpretq_m128_f32(recip);"
      },
      {
        "file": "src/crypto/sse2neon.h",
        "line": 1809,
        "signature": "return vreinterpretq_m128_f32(sq);"
      }
    ],
    "vreinterpretq_m128i_u16": [
      {
        "file": "src/crypto/sse2neon.h",
        "line": 1963,
        "signature": "return vreinterpretq_m128i_u16(r.val[1]);"
      }
    ],
    "vreinterpretq_s32_u32": [
      {
        "file": "src/crypto/sse2neon.h",
        "line": 2283,
        "signature": "return vreinterpretq_s32_u32(u32x4);"
      }
    ],
    "vcvtnq_s32_f32": [
      {
        "file": "src/crypto/sse2neon.h",
        "line": 2309,
        "signature": "return vcvtnq_s32_f32(a);"
      }
    ],
    "_umul128": [
      {
        "file": "src/crypto/sse2neon.h",
        "line": 2770,
        "signature": "inline uint64_t _umul128(uint64_t multiplier, uint64_t multiplicand, uint64_t *product_hi) {"
      }
    ]
  },
  "constants": {
    "alphabet_size": [
      {
        "file": "src/Common/Base58.cpp",
        "line": 35,
        "value": "sizeof(alphabet) - 1"
      }
    ],
    "full_block_size": [
      {
        "file": "src/Common/Base58.cpp",
        "line": 37,
        "value": "sizeof(encoded_block_sizes) / sizeof(encoded_block_sizes[0]) - 1"
      }
    ],
    "full_encoded_block_size": [
      {
        "file": "src/Common/Base58.cpp",
        "line": 38,
        "value": "encoded_block_sizes[full_block_size]"
      }
    ],
    "addr_checksum_size": [
      {
        "file": "src/Common/Base58.cpp",
        "line": 39,
        "value": "4"
      }
    ],
    "resultSize": [
      {
        "file": "src/Common/Base64.cpp",
        "line": 26,
        "value": "4 * ((data.size() + 2) / 3)"
      }
    ],
    "initialCapacity": [
      {
        "file": "src/Common/FileMappedVector.h",
        "line": 351,
        "value": "10"
      }
    ],
    "GENERIC_PATH_SEPARATOR": [
      {
        "file": "src/Common/PathTools.cpp",
        "line": 23,
        "value": "'/'"
      }
    ],
    "NATIVE_PATH_SEPARATOR": [
      {
        "file": "src/Common/PathTools.cpp",
        "line": 26,
        "value": "'\\\\'"
      },
      {
        "file": "src/Common/PathTools.cpp",
        "line": 28,
        "value": "'/'"
      }
    ],
    "BUFSIZE": [
      {
        "file": "src/Common/Util.cpp",
        "line": 41,
        "value": "10000"
      }
    ],
    "inline": [
      {
        "file": "src/Common/int-util.h",
        "line": 29,
        "value": "__inline"
      }
    ],
    "UNUSED": [
      {
        "file": "src/Common/int-util.h",
        "line": 140,
        "value": "__attribute__((unused))"
      }
    ],
    "SWAP32LE": [
      {
        "file": "src/Common/int-util.h",
        "line": 187,
        "value": "IDENT32"
      },
      {
        "file": "src/Common/int-util.h",
        "line": 207,
        "value": "SWAP32"
      }
    ],
    "SWAP32BE": [
      {
        "file": "src/Common/int-util.h",
        "line": 188,
        "value": "SWAP32"
      },
      {
        "file": "src/Common/int-util.h",
        "line": 206,
        "value": "IDENT32"
      }
    ],
    "swap32le": [
      {
        "file": "src/Common/int-util.h",
        "line": 189,
        "value": "ident32"
      },
      {
        "file": "src/Common/int-util.h",
        "line": 209,
        "value": "swap32"
      }
    ],
    "swap32be": [
      {
        "file": "src/Common/int-util.h",
        "line": 190,
        "value": "swap32"
      },
      {
        "file": "src/Common/int-util.h",
        "line": 208,
        "value": "ident32"
      }
    ],
    "mem_inplace_swap32le": [
      {
        "file": "src/Common/int-util.h",
        "line": 191,
        "value": "mem_inplace_ident"
      },
      {
        "file": "src/Common/int-util.h",
        "line": 211,
        "value": "mem_inplace_swap32"
      }
    ],
    "mem_inplace_swap32be": [
      {
        "file": "src/Common/int-util.h",
        "line": 192,
        "value": "mem_inplace_swap32"
      },
      {
        "file": "src/Common/int-util.h",
        "line": 210,
        "value": "mem_inplace_ident"
      }
    ],
    "memcpy_swap32le": [
      {
        "file": "src/Common/int-util.h",
        "line": 193,
        "value": "memcpy_ident32"
      },
      {
        "file": "src/Common/int-util.h",
        "line": 213,
        "value": "memcpy_swap32"
      }
    ],
    "memcpy_swap32be": [
      {
        "file": "src/Common/int-util.h",
        "line": 194,
        "value": "memcpy_swap32"
      },
      {
        "file": "src/Common/int-util.h",
        "line": 212,
        "value": "memcpy_ident32"
      }
    ],
    "SWAP64LE": [
      {
        "file": "src/Common/int-util.h",
        "line": 195,
        "value": "IDENT64"
      },
      {
        "file": "src/Common/int-util.h",
        "line": 215,
        "value": "SWAP64"
      }
    ],
    "SWAP64BE": [
      {
        "file": "src/Common/int-util.h",
        "line": 196,
        "value": "SWAP64"
      },
      {
        "file": "src/Common/int-util.h",
        "line": 214,
        "value": "IDENT64"
      }
    ],
    "swap64le": [
      {
        "file": "src/Common/int-util.h",
        "line": 197,
        "value": "ident64"
      },
      {
        "file": "src/Common/int-util.h",
        "line": 217,
        "value": "swap64"
      }
    ],
    "swap64be": [
      {
        "file": "src/Common/int-util.h",
        "line": 198,
        "value": "swap64"
      },
      {
        "file": "src/Common/int-util.h",
        "line": 216,
        "value": "ident64"
      }
    ],
    "mem_inplace_swap64le": [
      {
        "file": "src/Common/int-util.h",
        "line": 199,
        "value": "mem_inplace_ident"
      },
      {
        "file": "src/Common/int-util.h",
        "line": 219,
        "value": "mem_inplace_swap64"
      }
    ],
    "mem_inplace_swap64be": [
      {
        "file": "src/Common/int-util.h",
        "line": 200,
        "value": "mem_inplace_swap64"
      },
      {
        "file": "src/Common/int-util.h",
        "line": 218,
        "value": "mem_inplace_ident"
      }
    ],
    "memcpy_swap64le": [
      {
        "file": "src/Common/int-util.h",
        "line": 201,
        "value": "memcpy_ident64"
      },
      {
        "file": "src/Common/int-util.h",
        "line": 221,
        "value": "memcpy_swap64"
      }
    ],
    "memcpy_swap64be": [
      {
        "file": "src/Common/int-util.h",
        "line": 202,
        "value": "memcpy_swap64"
      },
      {
        "file": "src/Common/int-util.h",
        "line": 220,
        "value": "memcpy_ident64"
      }
    ],
    "POD_CLASS": [
      {
        "file": "src/Common/pod-class.h",
        "line": 21,
        "value": "struct"
      },
      {
        "file": "src/Common/pod-class.h",
        "line": 23,
        "value": "class"
      }
    ],
    "static_assert": [
      {
        "file": "src/Common/static_assert.h",
        "line": 23,
        "value": "_Static_assert"
      }
    ],
    "ENDL": [
      {
        "file": "src/ConnectivityTool/ConnectivityTool.cpp",
        "line": 46,
        "value": "std::endl"
      },
      {
        "file": "src/Logging/ILogger.h",
        "line": 63,
        "value": "std::endl"
      },
      {
        "file": "src/Optimizer/Optimizer.cpp",
        "line": 41,
        "value": "std::endl"
      }
    ],
    "DIFFICULTY_TARGET": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 30,
        "value": "480"
      }
    ],
    "CRYPTONOTE_MAX_BLOCK_NUMBER": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 31,
        "value": "500000000"
      }
    ],
    "CRYPTONOTE_MAX_BLOCK_BLOB_SIZE": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 32,
        "value": "500000000"
      }
    ],
    "CRYPTONOTE_MAX_TX_SIZE": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 33,
        "value": "1000000000"
      }
    ],
    "CRYPTONOTE_PUBLIC_ADDRESS_BASE58_PREFIX": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 34,
        "value": "1753191"
      }
    ],
    "CRYPTONOTE_MINED_MONEY_UNLOCK_WINDOW": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 35,
        "value": "60"
      }
    ],
    "DIFFICULTY_TARGET_DRGL": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 36,
        "value": "81"
      }
    ],
    "EMISSION_SPEED_FACTOR": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 37,
        "value": "18"
      }
    ],
    "EMISSION_SPEED_FACTOR_FANGO": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 38,
        "value": "19"
      }
    ],
    "EMISSION_SPEED_FACTOR_FUEGO": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 39,
        "value": "20"
      }
    ],
    "CRYPTONOTE_BLOCK_FUTURE_TIME_LIMIT": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 40,
        "value": "60 * 60 * 2"
      }
    ],
    "CRYPTONOTE_BLOCK_FUTURE_TIME_LIMIT_V1": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 41,
        "value": "DIFFICULTY_TARGET_DRGL * 6"
      }
    ],
    "CRYPTONOTE_BLOCK_FUTURE_TIME_LIMIT_V2": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 42,
        "value": "DIFFICULTY_TARGET * 2"
      }
    ],
    "CRYPTONOTE_DEFAULT_TX_SPENDABLE_AGE": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 43,
        "value": "10"
      }
    ],
    "BLOCKCHAIN_TIMESTAMP_CHECK_WINDOW": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 44,
        "value": "60"
      }
    ],
    "BLOCKCHAIN_TIMESTAMP_CHECK_WINDOW_V1": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 45,
        "value": "11"
      }
    ],
    "MONEY_SUPPLY": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 47,
        "value": "UINT64_C(80000088000008)"
      }
    ],
    "COIN": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 48,
        "value": "UINT64_C(10000000)"
      }
    ],
    "MINIMUM_FEE_V1": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 49,
        "value": "UINT64_C(800000)"
      }
    ],
    "MINIMUM_FEE_V2": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 50,
        "value": "UINT64_C(80000)"
      }
    ],
    "MINIMUM_FEE": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 51,
        "value": "MINIMUM_FEE_V2"
      }
    ],
    "MINIMUM_FEE_BANKING": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 52,
        "value": "UINT64_C(80000)"
      }
    ],
    "DEFAULT_DUST_THRESHOLD": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 53,
        "value": "UINT64_C(20000)"
      }
    ],
    "MINIMUM_MIXIN": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 54,
        "value": "2"
      }
    ],
    "CRYPTONOTE_COIN_VERSION": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 56,
        "value": "1"
      }
    ],
    "CRYPTONOTE_DISPLAY_DECIMAL_POINT": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 57,
        "value": "7"
      }
    ],
    "CRYPTONOTE_REWARD_BLOCKS_WINDOW": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 58,
        "value": "100"
      }
    ],
    "CRYPTONOTE_BLOCK_GRANTED_FULL_REWARD_ZONE": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 59,
        "value": "800000"
      }
    ],
    "CRYPTONOTE_BLOCK_GRANTED_FULL_REWARD_ZONE_V2": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 60,
        "value": "800000"
      }
    ],
    "CRYPTONOTE_BLOCK_GRANTED_FULL_REWARD_ZONE_V1": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 61,
        "value": "20000"
      }
    ],
    "CRYPTONOTE_BLOCK_GRANTED_FULL_REWARD_ZONE_CURRENT": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 62,
        "value": "CRYPTONOTE_BLOCK_GRANTED_FULL_REWARD_ZONE"
      }
    ],
    "CRYPTONOTE_COINBASE_BLOB_RESERVED_SIZE": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 63,
        "value": "600"
      }
    ],
    "EXPECTED_NUMBER_OF_BLOCKS_PER_DAY": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 65,
        "value": "24 * 60 * 60 / DIFFICULTY_TARGET"
      }
    ],
    "DIFFICULTY_CUT": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 66,
        "value": "60"
      }
    ],
    "DIFFICULTY_LAG": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 67,
        "value": "15"
      }
    ],
    "DIFFICULTY_WINDOW": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 68,
        "value": "1067"
      }
    ],
    "DIFFICULTY_WINDOW_V2": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 69,
        "value": "18"
      }
    ],
    "DIFFICULTY_WINDOW_V3": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 70,
        "value": "60"
      }
    ],
    "DIFFICULTY_WINDOW_V4": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 71,
        "value": "45"
      }
    ],
    "MIN_TX_MIXIN_SIZE": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 73,
        "value": "2"
      }
    ],
    "MAX_TX_MIXIN_SIZE": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 75,
        "value": "18"
      }
    ],
    "DEPOSIT_MIN_AMOUNT": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 78,
        "value": "800 * COIN"
      }
    ],
    "DEPOSIT_MIN_TERM_v1": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 79,
        "value": "5480"
      }
    ],
    "DEPOSIT_MAX_TERM_v1": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 80,
        "value": "5480"
      }
    ],
    "DEPOSIT_MIN_TERM": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 81,
        "value": "16440"
      }
    ],
    "DEPOSIT_MAX_TERM": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 82,
        "value": "16440"
      }
    ],
    "MULTIPLIER_FACTOR": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 86,
        "value": "100"
      }
    ],
    "END_MULTIPLIER_BLOCK": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 87,
        "value": "50"
      }
    ],
    "MAX_BLOCK_SIZE_INITIAL": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 93,
        "value": "800000"
      }
    ],
    "MAX_BLOCK_SIZE_GROWTH_SPEED_NUMERATOR": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 94,
        "value": "100 * 1024"
      }
    ],
    "MAX_BLOCK_SIZE_GROWTH_SPEED_DENOMINATOR": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 95,
        "value": "365 * 24 * 60 * 60 / DIFFICULTY_TARGET"
      }
    ],
    "CRYPTONOTE_LOCKED_TX_ALLOWED_DELTA_BLOCKS": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 97,
        "value": "1"
      }
    ],
    "CRYPTONOTE_LOCKED_TX_ALLOWED_DELTA_SECONDS": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 98,
        "value": "DIFFICULTY_TARGET_DRGL * CRYPTONOTE_LOCKED_TX_ALLOWED_DELTA_BLOCKS"
      }
    ],
    "CRYPTONOTE_LOCKED_TX_ALLOWED_DELTA_SECONDS_V2": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 99,
        "value": "DIFFICULTY_TARGET * CRYPTONOTE_LOCKED_TX_ALLOWED_DELTA_BLOCKS"
      }
    ],
    "CRYPTONOTE_MAX_TX_SIZE_LIMIT": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 101,
        "value": "CRYPTONOTE_BLOCK_GRANTED_FULL_REWARD_ZONE_CURRENT - CRYPTONOTE_COINBASE_BLOB_RESERVED_SIZE"
      }
    ],
    "CRYPTONOTE_OPTIMIZE_SIZE": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 102,
        "value": "100"
      }
    ],
    "CRYPTONOTE_MEMPOOL_TX_LIVETIME": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 104,
        "value": "(60 * 60 * 12)"
      }
    ],
    "CRYPTONOTE_MEMPOOL_TX_FROM_ALT_BLOCK_LIVETIME": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 105,
        "value": "(60 * 60 * 12)"
      }
    ],
    "CRYPTONOTE_NUMBER_OF_PERIODS_TO_FORGET_TX_DELETED_FROM_POOL": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 106,
        "value": "7"
      }
    ],
    "FUSION_TX_MAX_SIZE": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 108,
        "value": "CRYPTONOTE_BLOCK_GRANTED_FULL_REWARD_ZONE * 30 / 100"
      }
    ],
    "FUSION_TX_MIN_INPUT_COUNT": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 109,
        "value": "12"
      }
    ],
    "FUSION_TX_MIN_IN_OUT_COUNT_RATIO": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 110,
        "value": "4"
      }
    ],
    "UPGRADE_HEIGHT_V2": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 112,
        "value": "147958"
      }
    ],
    "UPGRADE_HEIGHT_V3": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 113,
        "value": "154321"
      }
    ],
    "UPGRADE_HEIGHT_V4": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 114,
        "value": "300000"
      }
    ],
    "UPGRADE_HEIGHT_V5": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 115,
        "value": "324819"
      }
    ],
    "UPGRADE_HEIGHT_V6": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 116,
        "value": "345678"
      }
    ],
    "UPGRADE_HEIGHT_V7": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 117,
        "value": "657000"
      }
    ],
    "UPGRADE_HEIGHT_V8": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 118,
        "value": "800000"
      }
    ],
    "UPGRADE_HEIGHT_V9": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 119,
        "value": "826420"
      }
    ],
    "UPGRADE_VOTING_THRESHOLD": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 120,
        "value": "90"
      }
    ],
    "UPGRADE_VOTING_WINDOW": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 121,
        "value": "EXPECTED_NUMBER_OF_BLOCKS_PER_DAY"
      }
    ],
    "UPGRADE_WINDOW": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 122,
        "value": "EXPECTED_NUMBER_OF_BLOCKS_PER_DAY"
      }
    ],
    "TRANSACTION_VERSION_1": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 140,
        "value": "1"
      }
    ],
    "TRANSACTION_VERSION_2": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 141,
        "value": "2"
      }
    ],
    "BLOCK_MAJOR_VERSION_1": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 142,
        "value": "1"
      }
    ],
    "BLOCK_MAJOR_VERSION_2": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 143,
        "value": "2"
      }
    ],
    "BLOCK_MAJOR_VERSION_3": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 144,
        "value": "3"
      }
    ],
    "BLOCK_MAJOR_VERSION_4": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 145,
        "value": "4"
      }
    ],
    "BLOCK_MAJOR_VERSION_5": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 146,
        "value": "5"
      }
    ],
    "BLOCK_MAJOR_VERSION_6": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 147,
        "value": "6"
      }
    ],
    "BLOCK_MAJOR_VERSION_7": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 148,
        "value": "7"
      }
    ],
    "BLOCK_MAJOR_VERSION_8": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 149,
        "value": "8"
      }
    ],
    "BLOCK_MAJOR_VERSION_9": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 150,
        "value": "9"
      }
    ],
    "BLOCK_MINOR_VERSION_0": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 151,
        "value": "0"
      }
    ],
    "BLOCK_MINOR_VERSION_1": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 152,
        "value": "1"
      }
    ],
    "BLOCKS_IDS_SYNCHRONIZING_DEFAULT_COUNT": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 154,
        "value": "10000"
      }
    ],
    "BLOCKS_SYNCHRONIZING_DEFAULT_COUNT": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 155,
        "value": "128"
      }
    ],
    "COMMAND_RPC_GET_BLOCKS_FAST_MAX_COUNT": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 156,
        "value": "1000"
      }
    ],
    "P2P_DEFAULT_PORT": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 158,
        "value": "10808"
      }
    ],
    "RPC_DEFAULT_PORT": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 159,
        "value": "18180"
      }
    ],
    "P2P_VERSION_1": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 163,
        "value": "1"
      }
    ],
    "P2P_VERSION_2": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 164,
        "value": "2"
      }
    ],
    "P2P_CURRENT_VERSION": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 165,
        "value": "1"
      }
    ],
    "P2P_MINIMUM_VERSION": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 166,
        "value": "1"
      }
    ],
    "P2P_UPGRADE_WINDOW": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 167,
        "value": "2"
      }
    ],
    "P2P_LITE_BLOCKS_PROPOGATION_VERSION": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 170,
        "value": "3"
      }
    ],
    "P2P_LOCAL_WHITE_PEERLIST_LIMIT": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 172,
        "value": "1000"
      }
    ],
    "P2P_LOCAL_GRAY_PEERLIST_LIMIT": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 173,
        "value": "5000"
      }
    ],
    "P2P_CONNECTION_MAX_WRITE_BUFFER_SIZE": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 175,
        "value": "64 * 1024 * 1024"
      }
    ],
    "P2P_DEFAULT_CONNECTIONS_COUNT": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 176,
        "value": "8"
      }
    ],
    "P2P_DEFAULT_ANCHOR_CONNECTIONS_COUNT": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 177,
        "value": "2"
      }
    ],
    "P2P_DEFAULT_WHITELIST_CONNECTIONS_PERCENT": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 178,
        "value": "70"
      }
    ],
    "P2P_DEFAULT_HANDSHAKE_INTERVAL": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 179,
        "value": "60"
      }
    ],
    "P2P_DEFAULT_PACKET_MAX_SIZE": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 180,
        "value": "50000000"
      }
    ],
    "P2P_DEFAULT_PEERS_IN_HANDSHAKE": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 181,
        "value": "250"
      }
    ],
    "P2P_DEFAULT_CONNECTION_TIMEOUT": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 182,
        "value": "5000"
      }
    ],
    "P2P_DEFAULT_PING_CONNECTION_TIMEOUT": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 183,
        "value": "2000"
      }
    ],
    "P2P_DEFAULT_INVOKE_TIMEOUT": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 184,
        "value": "60 * 2 * 1000"
      }
    ],
    "P2P_DEFAULT_HANDSHAKE_INVOKE_TIMEOUT": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 185,
        "value": "5000"
      }
    ],
    "P2P_IP_BLOCKTIME": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 186,
        "value": "(60 * 60 * 24)"
      }
    ],
    "P2P_IP_FAILS_BEFORE_BLOCK": [
      {
        "file": "src/CryptoNoteConfig.h",
        "line": 187,
        "value": "45"
      }
    ],
    "CURRENT_BLOCKCACHE_STORAGE_ARCHIVE_VER": [
      {
        "file": "src/CryptoNoteCore/Blockchain.cpp",
        "line": 66,
        "value": "4"
      }
    ],
    "CURRENT_BLOCKCHAININDICES_STORAGE_ARCHIVE_VER": [
      {
        "file": "src/CryptoNoteCore/Blockchain.cpp",
        "line": 67,
        "value": "1"
      }
    ],
    "elementSize": [
      {
        "file": "src/CryptoNoteCore/Blockchain.cpp",
        "line": 107,
        "value": "sizeof(std::pair<Blockchain::TransactionIndex, uint16_t>)"
      }
    ],
    "mainPrev": [
      {
        "file": "src/CryptoNoteCore/Blockchain.cpp",
        "line": 1295,
        "value": "m_blockIndex.getBlockHeight(b.previousBlockHash, mainPrevHeight)"
      }
    ],
    "it_prev": [
      {
        "file": "src/CryptoNoteCore/Blockchain.cpp",
        "line": 1296,
        "value": "m_alternative_chains.find(b.previousBlockHash)"
      }
    ],
    "expectedBlockVersion": [
      {
        "file": "src/CryptoNoteCore/Blockchain.cpp",
        "line": 1981,
        "value": "getBlockMajorVersionForHeight(height)"
      }
    ],
    "fee": [
      {
        "file": "src/CryptoNoteCore/Core.cpp",
        "line": 320,
        "value": "inputs_amount - outputs_amount"
      },
      {
        "file": "src/CryptoNoteCore/TransactionPool.cpp",
        "line": 172,
        "value": "inputs_amount - outputs_amount"
      }
    ],
    "cn_variant": [
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.cpp",
        "line": 534,
        "value": "b.majorVersion < 5 ? 0 : b.majorVersion >= BLOCK_MAJOR_VERSION_6 ? 2 : 1"
      }
    ],
    "light": [
      {
        "file": "src/CryptoNoteCore/CryptoNoteFormatUtils.cpp",
        "line": 535,
        "value": "( b.majorVersion >= BLOCK_MAJOR_VERSION_9) ? 1 : 0"
      }
    ],
    "T": [
      {
        "file": "src/CryptoNoteCore/Currency.cpp",
        "line": 938,
        "value": "static_cast<int64_t>(m_difficultyTarget_DRGL)"
      },
      {
        "file": "src/CryptoNoteCore/Currency.cpp",
        "line": 998,
        "value": "CryptoNote::parameters::DIFFICULTY_TARGET_DRGL"
      },
      {
        "file": "src/CryptoNoteCore/Currency.cpp",
        "line": 1065,
        "value": "CryptoNote::parameters::DIFFICULTY_TARGET"
      }
    ],
    "adjust": [
      {
        "file": "src/CryptoNoteCore/Currency.cpp",
        "line": 955,
        "value": "0.998"
      }
    ],
    "k": [
      {
        "file": "src/CryptoNoteCore/Currency.cpp",
        "line": 957,
        "value": "N * (N + 1) / 2"
      }
    ],
    "KEY_IMAGE_SIZE": [
      {
        "file": "src/CryptoNoteCore/Currency.cpp",
        "line": 1201,
        "value": "sizeof(Crypto::KeyImage)"
      }
    ],
    "OUTPUT_KEY_SIZE": [
      {
        "file": "src/CryptoNoteCore/Currency.cpp",
        "line": 1202,
        "value": "sizeof(decltype(KeyOutput::key))"
      }
    ],
    "AMOUNT_SIZE": [
      {
        "file": "src/CryptoNoteCore/Currency.cpp",
        "line": 1203,
        "value": "sizeof(uint64_t) + 2"
      }
    ],
    "GLOBAL_INDEXES_VECTOR_SIZE_SIZE": [
      {
        "file": "src/CryptoNoteCore/Currency.cpp",
        "line": 1204,
        "value": "sizeof(uint8_t)"
      }
    ],
    "GLOBAL_INDEXES_INITIAL_VALUE_SIZE": [
      {
        "file": "src/CryptoNoteCore/Currency.cpp",
        "line": 1205,
        "value": "sizeof(uint32_t)"
      }
    ],
    "GLOBAL_INDEXES_DIFFERENCE_SIZE": [
      {
        "file": "src/CryptoNoteCore/Currency.cpp",
        "line": 1206,
        "value": "sizeof(uint32_t)"
      }
    ],
    "SIGNATURE_SIZE": [
      {
        "file": "src/CryptoNoteCore/Currency.cpp",
        "line": 1207,
        "value": "sizeof(Crypto::Signature)"
      }
    ],
    "EXTRA_TAG_SIZE": [
      {
        "file": "src/CryptoNoteCore/Currency.cpp",
        "line": 1208,
        "value": "sizeof(uint8_t)"
      }
    ],
    "INPUT_TAG_SIZE": [
      {
        "file": "src/CryptoNoteCore/Currency.cpp",
        "line": 1209,
        "value": "sizeof(uint8_t)"
      }
    ],
    "OUTPUT_TAG_SIZE": [
      {
        "file": "src/CryptoNoteCore/Currency.cpp",
        "line": 1210,
        "value": "sizeof(uint8_t)"
      }
    ],
    "PUBLIC_KEY_SIZE": [
      {
        "file": "src/CryptoNoteCore/Currency.cpp",
        "line": 1211,
        "value": "sizeof(Crypto::PublicKey)"
      }
    ],
    "TRANSACTION_VERSION_SIZE": [
      {
        "file": "src/CryptoNoteCore/Currency.cpp",
        "line": 1212,
        "value": "sizeof(uint8_t)"
      }
    ],
    "TRANSACTION_UNLOCK_TIME_SIZE": [
      {
        "file": "src/CryptoNoteCore/Currency.cpp",
        "line": 1213,
        "value": "sizeof(uint64_t)"
      }
    ],
    "outputsSize": [
      {
        "file": "src/CryptoNoteCore/Currency.cpp",
        "line": 1215,
        "value": "outputCount * (OUTPUT_TAG_SIZE + OUTPUT_KEY_SIZE + AMOUNT_SIZE)"
      }
    ],
    "headerSize": [
      {
        "file": "src/CryptoNoteCore/Currency.cpp",
        "line": 1216,
        "value": "TRANSACTION_VERSION_SIZE + TRANSACTION_UNLOCK_TIME_SIZE + EXTRA_TAG_SIZE + PUBLIC_KEY_SIZE"
      }
    ],
    "TX_EXTRA_MESSAGE_CHECKSUM_SIZE": [
      {
        "file": "src/CryptoNoteCore/TransactionExtra.cpp",
        "line": 370,
        "value": "4"
      }
    ],
    "TX_EXTRA_PADDING_MAX_COUNT": [
      {
        "file": "src/CryptoNoteCore/TransactionExtra.h",
        "line": 27,
        "value": "255"
      }
    ],
    "TX_EXTRA_NONCE_MAX_COUNT": [
      {
        "file": "src/CryptoNoteCore/TransactionExtra.h",
        "line": 28,
        "value": "255"
      }
    ],
    "TX_EXTRA_TAG_PADDING": [
      {
        "file": "src/CryptoNoteCore/TransactionExtra.h",
        "line": 30,
        "value": "0x00"
      }
    ],
    "TX_EXTRA_TAG_PUBKEY": [
      {
        "file": "src/CryptoNoteCore/TransactionExtra.h",
        "line": 31,
        "value": "0x01"
      }
    ],
    "TX_EXTRA_NONCE": [
      {
        "file": "src/CryptoNoteCore/TransactionExtra.h",
        "line": 32,
        "value": "0x02"
      }
    ],
    "TX_EXTRA_MERGE_MINING_TAG": [
      {
        "file": "src/CryptoNoteCore/TransactionExtra.h",
        "line": 33,
        "value": "0x03"
      }
    ],
    "TX_EXTRA_MESSAGE_TAG": [
      {
        "file": "src/CryptoNoteCore/TransactionExtra.h",
        "line": 34,
        "value": "0x04"
      }
    ],
    "TX_EXTRA_TTL": [
      {
        "file": "src/CryptoNoteCore/TransactionExtra.h",
        "line": 35,
        "value": "0x05"
      }
    ],
    "TX_EXTRA_NONCE_PAYMENT_ID": [
      {
        "file": "src/CryptoNoteCore/TransactionExtra.h",
        "line": 37,
        "value": "0x00"
      }
    ],
    "CURRENT_MEMPOOL_ARCHIVE_VER": [
      {
        "file": "src/CryptoNoteCore/TransactionPool.cpp",
        "line": 594,
        "value": "1"
      }
    ],
    "BC_COMMANDS_POOL_BASE": [
      {
        "file": "src/CryptoNoteProtocol/CryptoNoteProtocolDefinitions.h",
        "line": 22,
        "value": "2000"
      }
    ],
    "DEFAULT_SCANT_PERIOD": [
      {
        "file": "src/Miner/MiningConfig.cpp",
        "line": 37,
        "value": "30"
      }
    ],
    "CONCURRENCY_LEVEL": [
      {
        "file": "src/Miner/MiningConfig.cpp",
        "line": 39,
        "value": "std::thread::hardware_concurrency()"
      }
    ],
    "expected": [
      {
        "file": "src/Mnemonics/electrum-words.cpp",
        "line": 262,
        "value": "len * 8 * 3 / 32"
      },
      {
        "file": "src/Mnemonics/electrum-words.cpp",
        "line": 310,
        "value": "len * 3 / 32"
      }
    ],
    "seed_length": [
      {
        "file": "src/Mnemonics/electrum-words.h",
        "line": 62,
        "value": "24"
      }
    ],
    "DEFAULT_THRESHOLD": [
      {
        "file": "src/Optimizer/Optimizer.cpp",
        "line": 44,
        "value": "UINT64_C(100)"
      }
    ],
    "LEVIN_SIGNATURE": [
      {
        "file": "src/P2p/LevinProtocol.cpp",
        "line": 25,
        "value": "0x0101010101012101LL"
      }
    ],
    "LEVIN_PACKET_REQUEST": [
      {
        "file": "src/P2p/LevinProtocol.cpp",
        "line": 26,
        "value": "0x00000001"
      }
    ],
    "LEVIN_PACKET_RESPONSE": [
      {
        "file": "src/P2p/LevinProtocol.cpp",
        "line": 27,
        "value": "0x00000002"
      }
    ],
    "LEVIN_DEFAULT_MAX_PACKET_SIZE": [
      {
        "file": "src/P2p/LevinProtocol.cpp",
        "line": 28,
        "value": "100000000"
      }
    ],
    "LEVIN_PROTOCOL_VER_1": [
      {
        "file": "src/P2p/LevinProtocol.cpp",
        "line": 29,
        "value": "1"
      }
    ],
    "LEVIN_PROTOCOL_RETCODE_SUCCESS": [
      {
        "file": "src/P2p/LevinProtocol.h",
        "line": 43,
        "value": "1"
      }
    ],
    "totalExpectedConnectionsCount": [
      {
        "file": "src/P2p/P2pNode.cpp",
        "line": 253,
        "value": "m_cfg.getExpectedOutgoingConnectionsCount()"
      }
    ],
    "expectedWhiteConnections": [
      {
        "file": "src/P2p/P2pNode.cpp",
        "line": 254,
        "value": "(totalExpectedConnectionsCount * m_cfg.getWhiteListConnectionsPercent()) / 100"
      }
    ],
    "outgoingConnections": [
      {
        "file": "src/P2p/P2pNode.cpp",
        "line": 255,
        "value": "getOutgoingConnectionsCount()"
      }
    ],
    "P2P_DEFAULT_CONNECT_RANGE": [
      {
        "file": "src/P2p/P2pNodeConfig.cpp",
        "line": 28,
        "value": "20"
      }
    ],
    "P2P_DEFAULT_PEERLIST_GET_TRY_COUNT": [
      {
        "file": "src/P2p/P2pNodeConfig.cpp",
        "line": 29,
        "value": "10"
      }
    ],
    "P2P_COMMANDS_POOL_BASE": [
      {
        "file": "src/P2p/P2pProtocolDefinitions.h",
        "line": 77,
        "value": "1000"
      }
    ],
    "PING_OK_RESPONSE_STATUS_TEXT": [
      {
        "file": "src/P2p/P2pProtocolDefinitions.h",
        "line": 157,
        "value": "\"OK\""
      }
    ],
    "currentVersion": [
      {
        "file": "src/P2p/PeerListManager.cpp",
        "line": 64,
        "value": "2"
      }
    ],
    "DEFAULT_ANONYMITY_LEVEL": [
      {
        "file": "src/PaymentGate/PaymentServiceJsonRpcMessages.h",
        "line": 29,
        "value": "4"
      }
    ],
    "SERVICE_NAME": [
      {
        "file": "src/PaymentGateService/main.cpp",
        "line": 39,
        "value": "\"Payment Gate\""
      }
    ],
    "STACK_SIZE": [
      {
        "file": "src/Platform/Linux/System/Dispatcher.cpp",
        "line": 61,
        "value": "512 * 1024"
      },
      {
        "file": "src/Platform/OSX/System/Dispatcher.cpp",
        "line": 59,
        "value": "512 * 1024"
      },
      {
        "file": "src/Platform/Windows/System/Dispatcher.cpp",
        "line": 39,
        "value": "16384"
      }
    ],
    "SIZEOF_PTHREAD_MUTEX_T": [
      {
        "file": "src/Platform/Linux/System/Dispatcher.h",
        "line": 89,
        "value": "40"
      },
      {
        "file": "src/Platform/Linux/System/Dispatcher.h",
        "line": 91,
        "value": "32"
      },
      {
        "file": "src/Platform/Linux/System/Dispatcher.h",
        "line": 95,
        "value": "48"
      },
      {
        "file": "src/Platform/Linux/System/Dispatcher.h",
        "line": 97,
        "value": "24"
      },
      {
        "file": "src/Platform/OSX/System/Dispatcher.h",
        "line": 78,
        "value": "56 + sizeof(long)"
      },
      {
        "file": "src/Platform/OSX/System/Dispatcher.h",
        "line": 80,
        "value": "40 + sizeof(long)"
      }
    ],
    "_MC_FPFMT_NODEV": [
      {
        "file": "src/Platform/OSX/System/Context.h",
        "line": 69,
        "value": "0x10000\t/* device not present or configured */"
      }
    ],
    "_MC_FPFMT_XMM": [
      {
        "file": "src/Platform/OSX/System/Context.h",
        "line": 70,
        "value": "0x10002"
      }
    ],
    "_MC_FPOWNED_NONE": [
      {
        "file": "src/Platform/OSX/System/Context.h",
        "line": 72,
        "value": "0x20000\t/* FP state not used */"
      }
    ],
    "_MC_FPOWNED_FPU": [
      {
        "file": "src/Platform/OSX/System/Context.h",
        "line": 73,
        "value": "0x20001\t/* FP state came from FPU */"
      }
    ],
    "_MC_FPOWNED_PCB": [
      {
        "file": "src/Platform/OSX/System/Context.h",
        "line": 74,
        "value": "0x20002\t/* FP state came from PCB */"
      }
    ],
    "RESERVE_STACK_SIZE": [
      {
        "file": "src/Platform/Windows/System/Dispatcher.cpp",
        "line": 40,
        "value": "2097152"
      }
    ],
    "true": [
      {
        "file": "src/Platform/msc/stdbool.h",
        "line": 12,
        "value": "1"
      }
    ],
    "false": [
      {
        "file": "src/Platform/msc/stdbool.h",
        "line": 13,
        "value": "0"
      }
    ],
    "LITTLE_ENDIAN": [
      {
        "file": "src/Platform/msc/sys/param.h",
        "line": 9,
        "value": "1234"
      }
    ],
    "BIG_ENDIAN": [
      {
        "file": "src/Platform/msc/sys/param.h",
        "line": 10,
        "value": "4321"
      }
    ],
    "PDP_ENDIAN": [
      {
        "file": "src/Platform/msc/sys/param.h",
        "line": 11,
        "value": "3412"
      }
    ],
    "BYTE_ORDER": [
      {
        "file": "src/Platform/msc/sys/param.h",
        "line": 12,
        "value": "LITTLE_ENDIAN"
      }
    ],
    "CORE_RPC_STATUS_OK": [
      {
        "file": "src/Rpc/CoreRpcServerCommandsDefinitions.h",
        "line": 29,
        "value": "\"OK\""
      }
    ],
    "CORE_RPC_STATUS_BUSY": [
      {
        "file": "src/Rpc/CoreRpcServerCommandsDefinitions.h",
        "line": 30,
        "value": "\"BUSY\""
      }
    ],
    "CORE_RPC_ERROR_CODE_WRONG_PARAM": [
      {
        "file": "src/Rpc/CoreRpcServerErrorCodes.h",
        "line": 20,
        "value": "-1"
      }
    ],
    "CORE_RPC_ERROR_CODE_TOO_BIG_HEIGHT": [
      {
        "file": "src/Rpc/CoreRpcServerErrorCodes.h",
        "line": 21,
        "value": "-2"
      }
    ],
    "CORE_RPC_ERROR_CODE_TOO_BIG_RESERVE_SIZE": [
      {
        "file": "src/Rpc/CoreRpcServerErrorCodes.h",
        "line": 22,
        "value": "-3"
      }
    ],
    "CORE_RPC_ERROR_CODE_WRONG_WALLET_ADDRESS": [
      {
        "file": "src/Rpc/CoreRpcServerErrorCodes.h",
        "line": 23,
        "value": "-4"
      }
    ],
    "CORE_RPC_ERROR_CODE_INTERNAL_ERROR": [
      {
        "file": "src/Rpc/CoreRpcServerErrorCodes.h",
        "line": 24,
        "value": "-5"
      }
    ],
    "CORE_RPC_ERROR_CODE_WRONG_BLOCKBLOB": [
      {
        "file": "src/Rpc/CoreRpcServerErrorCodes.h",
        "line": 25,
        "value": "-6"
      }
    ],
    "CORE_RPC_ERROR_CODE_BLOCK_NOT_ACCEPTED": [
      {
        "file": "src/Rpc/CoreRpcServerErrorCodes.h",
        "line": 26,
        "value": "-7"
      }
    ],
    "CORE_RPC_ERROR_CODE_CORE_BUSY": [
      {
        "file": "src/Rpc/CoreRpcServerErrorCodes.h",
        "line": 27,
        "value": "-9"
      }
    ],
    "errParseError": [
      {
        "file": "src/Rpc/JsonRpc.h",
        "line": 35,
        "value": "-32700"
      }
    ],
    "errInvalidRequest": [
      {
        "file": "src/Rpc/JsonRpc.h",
        "line": 36,
        "value": "-32600"
      }
    ],
    "errMethodNotFound": [
      {
        "file": "src/Rpc/JsonRpc.h",
        "line": 37,
        "value": "-32601"
      }
    ],
    "errInvalidParams": [
      {
        "file": "src/Rpc/JsonRpc.h",
        "line": 38,
        "value": "-32602"
      }
    ],
    "errInternalError": [
      {
        "file": "src/Rpc/JsonRpc.h",
        "line": 39,
        "value": "-32603"
      }
    ],
    "header_len": [
      {
        "file": "src/Rpc/RpcServer.cpp",
        "line": 266,
        "value": "strlen(\"ProofV1\")"
      },
      {
        "file": "src/Rpc/RpcServer.cpp",
        "line": 379,
        "value": "strlen(header)"
      }
    ],
    "rA_len": [
      {
        "file": "src/Rpc/RpcServer.cpp",
        "line": 272,
        "value": "Tools::Base58::encode(std::string((const char *)&rA, sizeof(Crypto::PublicKey))).size()"
      }
    ],
    "sig_len": [
      {
        "file": "src/Rpc/RpcServer.cpp",
        "line": 273,
        "value": "Tools::Base58::encode(std::string((const char *)&sig, sizeof(Crypto::Signature))).size()"
      }
    ],
    "out_key": [
      {
        "file": "src/Rpc/RpcServer.cpp",
        "line": 337,
        "value": "boost::get<KeyOutput>(o.target)"
      },
      {
        "file": "src/Rpc/RpcServer.cpp",
        "line": 432,
        "value": "boost::get<KeyOutput>(tx.outputs[proof.index_in_tx].target)"
      }
    ],
    "DEFAULT_RPC_PORT": [
      {
        "file": "src/Rpc/RpcServerConfig.cpp",
        "line": 27,
        "value": "RPC_DEFAULT_PORT"
      }
    ],
    "PORTABLE_STORAGE_SIGNATUREA": [
      {
        "file": "src/Serialization/KVBinaryCommon.h",
        "line": 24,
        "value": "0x01011101"
      }
    ],
    "PORTABLE_STORAGE_SIGNATUREB": [
      {
        "file": "src/Serialization/KVBinaryCommon.h",
        "line": 25,
        "value": "0x01020101"
      }
    ],
    "PORTABLE_STORAGE_FORMAT_VER": [
      {
        "file": "src/Serialization/KVBinaryCommon.h",
        "line": 26,
        "value": "1"
      }
    ],
    "PORTABLE_RAW_SIZE_MARK_MASK": [
      {
        "file": "src/Serialization/KVBinaryCommon.h",
        "line": 28,
        "value": "0x03"
      }
    ],
    "PORTABLE_RAW_SIZE_MARK_BYTE": [
      {
        "file": "src/Serialization/KVBinaryCommon.h",
        "line": 29,
        "value": "0"
      }
    ],
    "PORTABLE_RAW_SIZE_MARK_WORD": [
      {
        "file": "src/Serialization/KVBinaryCommon.h",
        "line": 30,
        "value": "1"
      }
    ],
    "PORTABLE_RAW_SIZE_MARK_DWORD": [
      {
        "file": "src/Serialization/KVBinaryCommon.h",
        "line": 31,
        "value": "2"
      }
    ],
    "PORTABLE_RAW_SIZE_MARK_INT64": [
      {
        "file": "src/Serialization/KVBinaryCommon.h",
        "line": 32,
        "value": "3"
      }
    ],
    "MAX_STRING_LEN_POSSIBLE": [
      {
        "file": "src/Serialization/KVBinaryCommon.h",
        "line": 35,
        "value": "2000000000 //do not let string be so big"
      }
    ],
    "BIN_KV_SERIALIZE_TYPE_INT64": [
      {
        "file": "src/Serialization/KVBinaryCommon.h",
        "line": 40,
        "value": "1"
      }
    ],
    "BIN_KV_SERIALIZE_TYPE_INT32": [
      {
        "file": "src/Serialization/KVBinaryCommon.h",
        "line": 41,
        "value": "2"
      }
    ],
    "BIN_KV_SERIALIZE_TYPE_INT16": [
      {
        "file": "src/Serialization/KVBinaryCommon.h",
        "line": 42,
        "value": "3"
      }
    ],
    "BIN_KV_SERIALIZE_TYPE_INT8": [
      {
        "file": "src/Serialization/KVBinaryCommon.h",
        "line": 43,
        "value": "4"
      }
    ],
    "BIN_KV_SERIALIZE_TYPE_UINT64": [
      {
        "file": "src/Serialization/KVBinaryCommon.h",
        "line": 44,
        "value": "5"
      }
    ],
    "BIN_KV_SERIALIZE_TYPE_UINT32": [
      {
        "file": "src/Serialization/KVBinaryCommon.h",
        "line": 45,
        "value": "6"
      }
    ],
    "BIN_KV_SERIALIZE_TYPE_UINT16": [
      {
        "file": "src/Serialization/KVBinaryCommon.h",
        "line": 46,
        "value": "7"
      }
    ],
    "BIN_KV_SERIALIZE_TYPE_UINT8": [
      {
        "file": "src/Serialization/KVBinaryCommon.h",
        "line": 47,
        "value": "8"
      }
    ],
    "BIN_KV_SERIALIZE_TYPE_DOUBLE": [
      {
        "file": "src/Serialization/KVBinaryCommon.h",
        "line": 48,
        "value": "9"
      }
    ],
    "BIN_KV_SERIALIZE_TYPE_STRING": [
      {
        "file": "src/Serialization/KVBinaryCommon.h",
        "line": 49,
        "value": "10"
      }
    ],
    "BIN_KV_SERIALIZE_TYPE_BOOL": [
      {
        "file": "src/Serialization/KVBinaryCommon.h",
        "line": 50,
        "value": "11"
      }
    ],
    "BIN_KV_SERIALIZE_TYPE_OBJECT": [
      {
        "file": "src/Serialization/KVBinaryCommon.h",
        "line": 51,
        "value": "12"
      }
    ],
    "BIN_KV_SERIALIZE_TYPE_ARRAY": [
      {
        "file": "src/Serialization/KVBinaryCommon.h",
        "line": 52,
        "value": "13"
      }
    ],
    "BIN_KV_SERIALIZE_FLAG_ARRAY": [
      {
        "file": "src/Serialization/KVBinaryCommon.h",
        "line": 53,
        "value": "0x80"
      }
    ],
    "blobSize": [
      {
        "file": "src/Serialization/SerializationOverloads.h",
        "line": 49,
        "value": "blob.size()"
      }
    ],
    "BACKSPACE": [
      {
        "file": "src/SimpleWallet/PasswordContainer.cpp",
        "line": 133,
        "value": "8"
      },
      {
        "file": "src/SimpleWallet/PasswordContainer.cpp",
        "line": 209,
        "value": "127"
      }
    ],
    "max_password_size": [
      {
        "file": "src/SimpleWallet/PasswordContainer.h",
        "line": 27,
        "value": "1024"
      }
    ],
    "EXTENDED_LOGS_FILE": [
      {
        "file": "src/SimpleWallet/SimpleWallet.cpp",
        "line": 70,
        "value": "\"wallet_details.log\""
      }
    ],
    "paymentIDLen": [
      {
        "file": "src/SimpleWallet/SimpleWallet.cpp",
        "line": 200,
        "value": "64"
      }
    ],
    "TIMESTAMP_MAX_WIDTH": [
      {
        "file": "src/SimpleWallet/SimpleWallet.cpp",
        "line": 410,
        "value": "19"
      }
    ],
    "HASH_MAX_WIDTH": [
      {
        "file": "src/SimpleWallet/SimpleWallet.cpp",
        "line": 411,
        "value": "64"
      }
    ],
    "TOTAL_AMOUNT_MAX_WIDTH": [
      {
        "file": "src/SimpleWallet/SimpleWallet.cpp",
        "line": 412,
        "value": "20"
      }
    ],
    "FEE_MAX_WIDTH": [
      {
        "file": "src/SimpleWallet/SimpleWallet.cpp",
        "line": 413,
        "value": "14"
      }
    ],
    "BLOCK_MAX_WIDTH": [
      {
        "file": "src/SimpleWallet/SimpleWallet.cpp",
        "line": 414,
        "value": "7"
      }
    ],
    "UNLOCK_TIME_MAX_WIDTH": [
      {
        "file": "src/SimpleWallet/SimpleWallet.cpp",
        "line": 415,
        "value": "11"
      }
    ],
    "num_of_languages": [
      {
        "file": "src/SimpleWallet/SimpleWallet.cpp",
        "line": 944,
        "value": "1"
      }
    ],
    "mnemonic_phrase_length": [
      {
        "file": "src/SimpleWallet/SimpleWallet.cpp",
        "line": 945,
        "value": "25"
      }
    ],
    "prefix_size": [
      {
        "file": "src/SimpleWallet/SimpleWallet.cpp",
        "line": 1408,
        "value": "strlen(\"Sig\")"
      }
    ],
    "TRANSFERS_CONTAINER_STORAGE_VERSION": [
      {
        "file": "src/Transfers/TransfersContainer.cpp",
        "line": 45,
        "value": "1"
      }
    ],
    "TRANSFERS_STORAGE_ARCHIVE_VERSION": [
      {
        "file": "src/Transfers/TransfersSynchronizer.cpp",
        "line": 31,
        "value": "0"
      }
    ],
    "MAX_FUSION_OUTPUT_COUNT": [
      {
        "file": "src/Wallet/WalletGreen.cpp",
        "line": 3941,
        "value": "8"
      },
      {
        "file": "src/Wallet/WalletRpcServer.cpp",
        "line": 359,
        "value": "8"
      }
    ],
    "ACCOUNT_CREATE_TIME_ACCURACY": [
      {
        "file": "src/Wallet/WalletIndices.h",
        "line": 40,
        "value": "60 * 60 * 24"
      }
    ],
    "WALLET_RPC_STATUS_OK": [
      {
        "file": "src/Wallet/WalletRpcServerCommandsDefinitions.h",
        "line": 32,
        "value": "\"OK\""
      }
    ],
    "WALLET_RPC_STATUS_BUSY": [
      {
        "file": "src/Wallet/WalletRpcServerCommandsDefinitions.h",
        "line": 33,
        "value": "\"BUSY\""
      }
    ],
    "WALLET_RPC_ERROR_CODE_UNKNOWN_ERROR": [
      {
        "file": "src/Wallet/WalletRpcServerErrorCodes.h",
        "line": 21,
        "value": "-1"
      }
    ],
    "WALLET_RPC_ERROR_CODE_WRONG_ADDRESS": [
      {
        "file": "src/Wallet/WalletRpcServerErrorCodes.h",
        "line": 22,
        "value": "-2"
      }
    ],
    "WALLET_RPC_ERROR_CODE_DAEMON_IS_BUSY": [
      {
        "file": "src/Wallet/WalletRpcServerErrorCodes.h",
        "line": 23,
        "value": "-3"
      }
    ],
    "WALLET_RPC_ERROR_CODE_GENERIC_TRANSFER_ERROR": [
      {
        "file": "src/Wallet/WalletRpcServerErrorCodes.h",
        "line": 24,
        "value": "-4"
      }
    ],
    "WALLET_RPC_ERROR_CODE_WRONG_PAYMENT_ID": [
      {
        "file": "src/Wallet/WalletRpcServerErrorCodes.h",
        "line": 25,
        "value": "-5"
      }
    ],
    "walletsSize": [
      {
        "file": "src/Wallet/WalletSerializationV1.cpp",
        "line": 774,
        "value": "walletsIndex.size()"
      }
    ],
    "MIN_VERSION": [
      {
        "file": "src/Wallet/WalletSerializationV2.h",
        "line": 56,
        "value": "6"
      }
    ],
    "SERIALIZATION_VERSION": [
      {
        "file": "src/Wallet/WalletSerializationV2.h",
        "line": 57,
        "value": "6"
      }
    ],
    "ACCOUN_CREATE_TIME_ACCURACY": [
      {
        "file": "src/WalletLegacy/WalletLegacy.cpp",
        "line": 47,
        "value": "24 * 60 * 60"
      }
    ],
    "r": [
      {
        "file": "src/WalletLegacy/WalletLegacy.cpp",
        "line": 1403,
        "value": "CryptoNote::generate_key_image_helper(m_account.getAccountKeys(), td.transactionPublicKey, td.outputInTransaction, ephemeral, ki)"
      },
      {
        "file": "src/WalletLegacy/WalletLegacy.cpp",
        "line": 1444,
        "value": "CryptoNote::generate_key_image_helper(m_account.getAccountKeys(), td.transactionPublicKey, td.outputInTransaction, ephemeral, ki)"
      }
    ],
    "WALLET_SERIALIZATION_VERSION": [
      {
        "file": "src/WalletLegacy/WalletLegacySerializer.cpp",
        "line": 38,
        "value": "2"
      }
    ],
    "TABLE_ALIGN": [
      {
        "file": "src/crypto/aesb.c",
        "line": 28,
        "value": "32"
      },
      {
        "file": "src/crypto/aesb.h",
        "line": 28,
        "value": "32"
      }
    ],
    "WPOLY": [
      {
        "file": "src/crypto/aesb.c",
        "line": 29,
        "value": "0x011b"
      },
      {
        "file": "src/crypto/aesb.h",
        "line": 29,
        "value": "0x011b"
      }
    ],
    "N_COLS": [
      {
        "file": "src/crypto/aesb.c",
        "line": 30,
        "value": "4"
      },
      {
        "file": "src/crypto/aesb.h",
        "line": 30,
        "value": "4"
      }
    ],
    "AES_BLOCK_SIZE": [
      {
        "file": "src/crypto/aesb.c",
        "line": 31,
        "value": "16"
      },
      {
        "file": "src/crypto/aesb.h",
        "line": 31,
        "value": "16"
      },
      {
        "file": "src/crypto/slow-hash.c",
        "line": 49,
        "value": "16"
      }
    ],
    "RC_LENGTH": [
      {
        "file": "src/crypto/aesb.c",
        "line": 32,
        "value": "(5 * (AES_BLOCK_SIZE / 4 - 2))"
      },
      {
        "file": "src/crypto/aesb.h",
        "line": 32,
        "value": "(5 * (AES_BLOCK_SIZE / 4 - 2))"
      }
    ],
    "ALIGN": [
      {
        "file": "src/crypto/aesb.c",
        "line": 35,
        "value": "__declspec(align(TABLE_ALIGN))"
      },
      {
        "file": "src/crypto/aesb.c",
        "line": 37,
        "value": "__attribute__ ((aligned(16)))"
      }
    ],
    "ALIGN2": [
      {
        "file": "src/crypto/aesb.h",
        "line": 35,
        "value": "__declspec(align(TABLE_ALIGN))"
      },
      {
        "file": "src/crypto/aesb.h",
        "line": 37,
        "value": "__attribute__ ((aligned(16)))"
      }
    ],
    "CHACHA8_KEY_SIZE": [
      {
        "file": "src/crypto/chacha8.h",
        "line": 6,
        "value": "32"
      }
    ],
    "CHACHA8_IV_SIZE": [
      {
        "file": "src/crypto/chacha8.h",
        "line": 7,
        "value": "8"
      }
    ],
    "fe_d": [
      {
        "file": "src/crypto/crypto-ops-data.c",
        "line": 13,
        "value": "{-10913610, 13857413, -15372611, 6949391, 114729, -8787816, -6275908, -3247719, -18696448, -12055116}"
      }
    ],
    "fe_sqrtm1": [
      {
        "file": "src/crypto/crypto-ops-data.c",
        "line": 14,
        "value": "{-32595792, -7943725, 9377950, 3500415, 12389472, -272473, -25146209, -2005654, 326686, 11406482}"
      }
    ],
    "fe_d2": [
      {
        "file": "src/crypto/crypto-ops-data.c",
        "line": 15,
        "value": "{-21827239, -5839606, -30745221, 13898782, 229458, 15978800, -12551817, -6495438, 29715968, 9444199}"
      }
    ],
    "fe_ma2": [
      {
        "file": "src/crypto/crypto-ops-data.c",
        "line": 843,
        "value": "{-12721188, -3529, 0, 0, 0, 0, 0, 0, 0, 0}"
      }
    ],
    "fe_ma": [
      {
        "file": "src/crypto/crypto-ops-data.c",
        "line": 844,
        "value": "{-486662, 0, 0, 0, 0, 0, 0, 0, 0, 0}"
      }
    ],
    "fe_fffb1": [
      {
        "file": "src/crypto/crypto-ops-data.c",
        "line": 845,
        "value": "{-31702527, -2466483, -26106795, -12203692, -12169197, -321052, 14850977, -10296299, -16929438, -407568}"
      }
    ],
    "fe_fffb2": [
      {
        "file": "src/crypto/crypto-ops-data.c",
        "line": 846,
        "value": "{8166131, -6741800, -17040804, 3154616, 21461005, 1466302, -30876704, -6368709, 10503587, -13363080}"
      }
    ],
    "fe_fffb3": [
      {
        "file": "src/crypto/crypto-ops-data.c",
        "line": 847,
        "value": "{-13620103, 14639558, 4532995, 7679154, 16815101, -15883539, -22863840, -14813421, 13716513, -6477756}"
      }
    ],
    "fe_fffb4": [
      {
        "file": "src/crypto/crypto-ops-data.c",
        "line": 848,
        "value": "{-21786234, -12173074, 21573800, 4524538, -4645904, 16204591, 8012863, -8444712, 3212926, 6885324}"
      }
    ],
    "P_TYPE": [
      {
        "file": "src/crypto/groestl.c",
        "line": 14,
        "value": "0"
      }
    ],
    "Q_TYPE": [
      {
        "file": "src/crypto/groestl.c",
        "line": 15,
        "value": "1"
      }
    ],
    "BILB": [
      {
        "file": "src/crypto/groestl.c",
        "line": 271,
        "value": "ctx->bits_in_last_byte"
      }
    ],
    "ROWS": [
      {
        "file": "src/crypto/groestl.h",
        "line": 16,
        "value": "8"
      }
    ],
    "LENGTHFIELDLEN": [
      {
        "file": "src/crypto/groestl.h",
        "line": 17,
        "value": "ROWS"
      }
    ],
    "COLS512": [
      {
        "file": "src/crypto/groestl.h",
        "line": 18,
        "value": "8"
      }
    ],
    "SIZE512": [
      {
        "file": "src/crypto/groestl.h",
        "line": 20,
        "value": "(ROWS*COLS512)"
      }
    ],
    "ROUNDS512": [
      {
        "file": "src/crypto/groestl.h",
        "line": 22,
        "value": "10"
      }
    ],
    "HASH_BIT_LEN": [
      {
        "file": "src/crypto/groestl.h",
        "line": 23,
        "value": "256"
      }
    ],
    "HASH_DATA_AREA": [
      {
        "file": "src/crypto/keccak.c",
        "line": 82,
        "value": "136"
      }
    ],
    "KECCAK_ROUNDS": [
      {
        "file": "src/crypto/keccak.h",
        "line": 11,
        "value": "24"
      }
    ],
    "OAES_RKEY_LEN": [
      {
        "file": "src/crypto/oaes_lib.c",
        "line": 63,
        "value": "4"
      }
    ],
    "OAES_COL_LEN": [
      {
        "file": "src/crypto/oaes_lib.c",
        "line": 64,
        "value": "4"
      }
    ],
    "OAES_ROUND_BASE": [
      {
        "file": "src/crypto/oaes_lib.c",
        "line": 65,
        "value": "7"
      }
    ],
    "OAES_FLAG_PAD": [
      {
        "file": "src/crypto/oaes_lib.c",
        "line": 68,
        "value": "0x01"
      }
    ],
    "OAES_VERSION": [
      {
        "file": "src/crypto/oaes_lib.h",
        "line": 55,
        "value": "\"0.8.1\""
      }
    ],
    "OAES_BLOCK_SIZE": [
      {
        "file": "src/crypto/oaes_lib.h",
        "line": 56,
        "value": "16"
      }
    ],
    "OAES_OPTION_NONE": [
      {
        "file": "src/crypto/oaes_lib.h",
        "line": 82,
        "value": "0"
      }
    ],
    "OAES_OPTION_ECB": [
      {
        "file": "src/crypto/oaes_lib.h",
        "line": 84,
        "value": "1"
      }
    ],
    "OAES_OPTION_CBC": [
      {
        "file": "src/crypto/oaes_lib.h",
        "line": 88,
        "value": "2"
      }
    ],
    "OAES_OPTION_STEP_ON": [
      {
        "file": "src/crypto/oaes_lib.h",
        "line": 98,
        "value": "4"
      }
    ],
    "OAES_OPTION_STEP_OFF": [
      {
        "file": "src/crypto/oaes_lib.h",
        "line": 100,
        "value": "8"
      }
    ],
    "SKEIN_PORT_CODE": [
      {
        "file": "src/crypto/skein.c",
        "line": 11,
        "value": "/* instantiate any code in skein_port.h */"
      }
    ],
    "DISABLE_UNUSED": [
      {
        "file": "src/crypto/skein.c",
        "line": 17,
        "value": "0"
      }
    ],
    "SKEIN_256_NIST_MAX_HASHBITS": [
      {
        "file": "src/crypto/skein.c",
        "line": 20,
        "value": "(0)"
      }
    ],
    "SKEIN_512_NIST_MAX_HASHBITS": [
      {
        "file": "src/crypto/skein.c",
        "line": 24,
        "value": "(512)"
      }
    ],
    "SKEIN_MODIFIER_WORDS": [
      {
        "file": "src/crypto/skein.c",
        "line": 27,
        "value": "( 2)          /* number of modifier (tweak) words */"
      }
    ],
    "SKEIN_256_STATE_WORDS": [
      {
        "file": "src/crypto/skein.c",
        "line": 29,
        "value": "( 4)"
      }
    ],
    "SKEIN_512_STATE_WORDS": [
      {
        "file": "src/crypto/skein.c",
        "line": 30,
        "value": "( 8)"
      }
    ],
    "SKEIN1024_STATE_WORDS": [
      {
        "file": "src/crypto/skein.c",
        "line": 31,
        "value": "(16)"
      }
    ],
    "SKEIN_MAX_STATE_WORDS": [
      {
        "file": "src/crypto/skein.c",
        "line": 32,
        "value": "(16)"
      }
    ],
    "SKEIN_256_STATE_BYTES": [
      {
        "file": "src/crypto/skein.c",
        "line": 34,
        "value": "( 8*SKEIN_256_STATE_WORDS)"
      }
    ],
    "SKEIN_512_STATE_BYTES": [
      {
        "file": "src/crypto/skein.c",
        "line": 35,
        "value": "( 8*SKEIN_512_STATE_WORDS)"
      }
    ],
    "SKEIN1024_STATE_BYTES": [
      {
        "file": "src/crypto/skein.c",
        "line": 36,
        "value": "( 8*SKEIN1024_STATE_WORDS)"
      }
    ],
    "SKEIN_256_STATE_BITS": [
      {
        "file": "src/crypto/skein.c",
        "line": 38,
        "value": "(64*SKEIN_256_STATE_WORDS)"
      }
    ],
    "SKEIN_512_STATE_BITS": [
      {
        "file": "src/crypto/skein.c",
        "line": 39,
        "value": "(64*SKEIN_512_STATE_WORDS)"
      }
    ],
    "SKEIN1024_STATE_BITS": [
      {
        "file": "src/crypto/skein.c",
        "line": 40,
        "value": "(64*SKEIN1024_STATE_WORDS)"
      }
    ],
    "SKEIN_256_BLOCK_BYTES": [
      {
        "file": "src/crypto/skein.c",
        "line": 42,
        "value": "( 8*SKEIN_256_STATE_WORDS)"
      }
    ],
    "SKEIN_512_BLOCK_BYTES": [
      {
        "file": "src/crypto/skein.c",
        "line": 43,
        "value": "( 8*SKEIN_512_STATE_WORDS)"
      }
    ],
    "SKEIN1024_BLOCK_BYTES": [
      {
        "file": "src/crypto/skein.c",
        "line": 44,
        "value": "( 8*SKEIN1024_STATE_WORDS)"
      }
    ],
    "SKEIN_RND_SPECIAL": [
      {
        "file": "src/crypto/skein.c",
        "line": 46,
        "value": "(1000u)"
      }
    ],
    "SKEIN_RND_KEY_INITIAL": [
      {
        "file": "src/crypto/skein.c",
        "line": 47,
        "value": "(SKEIN_RND_SPECIAL+0u)"
      }
    ],
    "SKEIN_RND_KEY_INJECT": [
      {
        "file": "src/crypto/skein.c",
        "line": 48,
        "value": "(SKEIN_RND_SPECIAL+1u)"
      }
    ],
    "SKEIN_RND_FEED_FWD": [
      {
        "file": "src/crypto/skein.c",
        "line": 49,
        "value": "(SKEIN_RND_SPECIAL+2u)"
      }
    ],
    "SKEIN_TREE_HASH": [
      {
        "file": "src/crypto/skein.c",
        "line": 126,
        "value": "(1)"
      }
    ],
    "SKEIN_T1_POS_TREE_LVL": [
      {
        "file": "src/crypto/skein.c",
        "line": 147,
        "value": "SKEIN_T1_BIT(112)       /* bits 112..118: level in hash tree       */"
      }
    ],
    "SKEIN_T1_POS_BIT_PAD": [
      {
        "file": "src/crypto/skein.c",
        "line": 148,
        "value": "SKEIN_T1_BIT(119)       /* bit  119     : partial final input byte */"
      }
    ],
    "SKEIN_T1_POS_BLK_TYPE": [
      {
        "file": "src/crypto/skein.c",
        "line": 149,
        "value": "SKEIN_T1_BIT(120)       /* bits 120..125: type field               */"
      }
    ],
    "SKEIN_T1_POS_FIRST": [
      {
        "file": "src/crypto/skein.c",
        "line": 150,
        "value": "SKEIN_T1_BIT(126)       /* bits 126     : first block flag         */"
      }
    ],
    "SKEIN_T1_POS_FINAL": [
      {
        "file": "src/crypto/skein.c",
        "line": 151,
        "value": "SKEIN_T1_BIT(127)       /* bit  127     : final block flag         */"
      }
    ],
    "SKEIN_T1_FLAG_FIRST": [
      {
        "file": "src/crypto/skein.c",
        "line": 154,
        "value": "(((u64b_t)  1 ) << SKEIN_T1_POS_FIRST)"
      }
    ],
    "SKEIN_T1_FLAG_FINAL": [
      {
        "file": "src/crypto/skein.c",
        "line": 155,
        "value": "(((u64b_t)  1 ) << SKEIN_T1_POS_FINAL)"
      }
    ],
    "SKEIN_T1_FLAG_BIT_PAD": [
      {
        "file": "src/crypto/skein.c",
        "line": 156,
        "value": "(((u64b_t)  1 ) << SKEIN_T1_POS_BIT_PAD)"
      }
    ],
    "SKEIN_T1_TREE_LVL_MASK": [
      {
        "file": "src/crypto/skein.c",
        "line": 159,
        "value": "(((u64b_t)0x7F) << SKEIN_T1_POS_TREE_LVL)"
      }
    ],
    "SKEIN_BLK_TYPE_KEY": [
      {
        "file": "src/crypto/skein.c",
        "line": 163,
        "value": "( 0)                    /* key, for MAC and KDF */"
      }
    ],
    "SKEIN_BLK_TYPE_CFG": [
      {
        "file": "src/crypto/skein.c",
        "line": 164,
        "value": "( 4)                    /* configuration block */"
      }
    ],
    "SKEIN_BLK_TYPE_PERS": [
      {
        "file": "src/crypto/skein.c",
        "line": 165,
        "value": "( 8)                    /* personalization string */"
      }
    ],
    "SKEIN_BLK_TYPE_PK": [
      {
        "file": "src/crypto/skein.c",
        "line": 166,
        "value": "(12)                    /* public key (for digital signature hashing) */"
      }
    ],
    "SKEIN_BLK_TYPE_KDF": [
      {
        "file": "src/crypto/skein.c",
        "line": 167,
        "value": "(16)                    /* key identifier for KDF */"
      }
    ],
    "SKEIN_BLK_TYPE_NONCE": [
      {
        "file": "src/crypto/skein.c",
        "line": 168,
        "value": "(20)                    /* nonce for PRNG */"
      }
    ],
    "SKEIN_BLK_TYPE_MSG": [
      {
        "file": "src/crypto/skein.c",
        "line": 169,
        "value": "(48)                    /* message processing */"
      }
    ],
    "SKEIN_BLK_TYPE_OUT": [
      {
        "file": "src/crypto/skein.c",
        "line": 170,
        "value": "(63)                    /* output stage */"
      }
    ],
    "SKEIN_BLK_TYPE_MASK": [
      {
        "file": "src/crypto/skein.c",
        "line": 171,
        "value": "(63)                    /* bit field mask */"
      }
    ],
    "SKEIN_T1_BLK_TYPE_KEY": [
      {
        "file": "src/crypto/skein.c",
        "line": 174,
        "value": "SKEIN_T1_BLK_TYPE(KEY)  /* key, for MAC and KDF */"
      }
    ],
    "SKEIN_T1_BLK_TYPE_CFG": [
      {
        "file": "src/crypto/skein.c",
        "line": 175,
        "value": "SKEIN_T1_BLK_TYPE(CFG)  /* configuration block */"
      }
    ],
    "SKEIN_T1_BLK_TYPE_PERS": [
      {
        "file": "src/crypto/skein.c",
        "line": 176,
        "value": "SKEIN_T1_BLK_TYPE(PERS) /* personalization string */"
      }
    ],
    "SKEIN_T1_BLK_TYPE_PK": [
      {
        "file": "src/crypto/skein.c",
        "line": 177,
        "value": "SKEIN_T1_BLK_TYPE(PK)   /* public key (for digital signature hashing) */"
      }
    ],
    "SKEIN_T1_BLK_TYPE_KDF": [
      {
        "file": "src/crypto/skein.c",
        "line": 178,
        "value": "SKEIN_T1_BLK_TYPE(KDF)  /* key identifier for KDF */"
      }
    ],
    "SKEIN_T1_BLK_TYPE_NONCE": [
      {
        "file": "src/crypto/skein.c",
        "line": 179,
        "value": "SKEIN_T1_BLK_TYPE(NONCE)/* nonce for PRNG */"
      }
    ],
    "SKEIN_T1_BLK_TYPE_MSG": [
      {
        "file": "src/crypto/skein.c",
        "line": 180,
        "value": "SKEIN_T1_BLK_TYPE(MSG)  /* message processing */"
      }
    ],
    "SKEIN_T1_BLK_TYPE_OUT": [
      {
        "file": "src/crypto/skein.c",
        "line": 181,
        "value": "SKEIN_T1_BLK_TYPE(OUT)  /* output stage */"
      }
    ],
    "SKEIN_T1_BLK_TYPE_MASK": [
      {
        "file": "src/crypto/skein.c",
        "line": 182,
        "value": "SKEIN_T1_BLK_TYPE(MASK) /* field bit mask */"
      }
    ],
    "SKEIN_T1_BLK_TYPE_CFG_FINAL": [
      {
        "file": "src/crypto/skein.c",
        "line": 184,
        "value": "(SKEIN_T1_BLK_TYPE_CFG | SKEIN_T1_FLAG_FINAL)"
      }
    ],
    "SKEIN_T1_BLK_TYPE_OUT_FINAL": [
      {
        "file": "src/crypto/skein.c",
        "line": 185,
        "value": "(SKEIN_T1_BLK_TYPE_OUT | SKEIN_T1_FLAG_FINAL)"
      }
    ],
    "SKEIN_VERSION": [
      {
        "file": "src/crypto/skein.c",
        "line": 187,
        "value": "(1)"
      }
    ],
    "SKEIN_ID_STRING_LE": [
      {
        "file": "src/crypto/skein.c",
        "line": 190,
        "value": "(0x33414853)            /* \"SHA3\" (little-endian)*/"
      }
    ],
    "SKEIN_SCHEMA_VER": [
      {
        "file": "src/crypto/skein.c",
        "line": 194,
        "value": "SKEIN_MK_64(SKEIN_VERSION,SKEIN_ID_STRING_LE)"
      }
    ],
    "SKEIN_KS_PARITY": [
      {
        "file": "src/crypto/skein.c",
        "line": 195,
        "value": "SKEIN_MK_64(0x1BD11BDA,0xA9FC1A22)"
      }
    ],
    "SKEIN_CFG_STR_LEN": [
      {
        "file": "src/crypto/skein.c",
        "line": 197,
        "value": "(4*8)"
      }
    ],
    "SKEIN_CFG_TREE_LEAF_SIZE_POS": [
      {
        "file": "src/crypto/skein.c",
        "line": 200,
        "value": "( 0)"
      }
    ],
    "SKEIN_CFG_TREE_NODE_SIZE_POS": [
      {
        "file": "src/crypto/skein.c",
        "line": 201,
        "value": "( 8)"
      }
    ],
    "SKEIN_CFG_TREE_MAX_LEVEL_POS": [
      {
        "file": "src/crypto/skein.c",
        "line": 202,
        "value": "(16)"
      }
    ],
    "SKEIN_CFG_TREE_LEAF_SIZE_MSK": [
      {
        "file": "src/crypto/skein.c",
        "line": 204,
        "value": "(((u64b_t) 0xFF) << SKEIN_CFG_TREE_LEAF_SIZE_POS)"
      }
    ],
    "SKEIN_CFG_TREE_NODE_SIZE_MSK": [
      {
        "file": "src/crypto/skein.c",
        "line": 205,
        "value": "(((u64b_t) 0xFF) << SKEIN_CFG_TREE_NODE_SIZE_POS)"
      }
    ],
    "SKEIN_CFG_TREE_MAX_LEVEL_MSK": [
      {
        "file": "src/crypto/skein.c",
        "line": 206,
        "value": "(((u64b_t) 0xFF) << SKEIN_CFG_TREE_MAX_LEVEL_POS)"
      }
    ],
    "SKEIN_CFG_TREE_INFO_SEQUENTIAL": [
      {
        "file": "src/crypto/skein.c",
        "line": 213,
        "value": "SKEIN_CFG_TREE_INFO(0,0,0) /* use as treeInfo in InitExt() call for sequential processing */"
      }
    ],
    "SKEIN_256_ROUNDS_TOTAL": [
      {
        "file": "src/crypto/skein.c",
        "line": 306,
        "value": "(72)          /* number of rounds for the different block sizes */"
      },
      {
        "file": "src/crypto/skein.c",
        "line": 310,
        "value": "(8*((((SKEIN_ROUNDS/100) + 5) % 10) + 5))"
      }
    ],
    "SKEIN_512_ROUNDS_TOTAL": [
      {
        "file": "src/crypto/skein.c",
        "line": 307,
        "value": "(72)"
      },
      {
        "file": "src/crypto/skein.c",
        "line": 311,
        "value": "(8*((((SKEIN_ROUNDS/ 10) + 5) % 10) + 5))"
      }
    ],
    "SKEIN1024_ROUNDS_TOTAL": [
      {
        "file": "src/crypto/skein.c",
        "line": 308,
        "value": "(80)"
      },
      {
        "file": "src/crypto/skein.c",
        "line": 312,
        "value": "(8*((((SKEIN_ROUNDS    ) + 5) % 10) + 5))"
      }
    ],
    "MK_64": [
      {
        "file": "src/crypto/skein.c",
        "line": 330,
        "value": "SKEIN_MK_64"
      }
    ],
    "SKEIN_USE_ASM": [
      {
        "file": "src/crypto/skein.c",
        "line": 511,
        "value": "(0)                     /* default is all C code (no ASM) */"
      }
    ],
    "SKEIN_LOOP": [
      {
        "file": "src/crypto/skein.c",
        "line": 515,
        "value": "001                          /* default: unroll 256 and 512, but not 1024 */"
      }
    ],
    "BLK_BITS": [
      {
        "file": "src/crypto/skein.c",
        "line": 518,
        "value": "(WCNT*64)               /* some useful definitions for code here */"
      }
    ],
    "KW_TWK_BASE": [
      {
        "file": "src/crypto/skein.c",
        "line": 519,
        "value": "(0)"
      }
    ],
    "KW_KEY_BASE": [
      {
        "file": "src/crypto/skein.c",
        "line": 520,
        "value": "(3)"
      }
    ],
    "ks": [
      {
        "file": "src/crypto/skein.c",
        "line": 521,
        "value": "(kw + KW_KEY_BASE)"
      }
    ],
    "ts": [
      {
        "file": "src/crypto/skein.c",
        "line": 522,
        "value": "(kw + KW_TWK_BASE)"
      }
    ],
    "RCNT": [
      {
        "file": "src/crypto/skein.c",
        "line": 539,
        "value": "(SKEIN_256_ROUNDS_TOTAL/8)"
      },
      {
        "file": "src/crypto/skein.c",
        "line": 724,
        "value": "(SKEIN_512_ROUNDS_TOTAL/8)"
      },
      {
        "file": "src/crypto/skein.c",
        "line": 932,
        "value": "(SKEIN1024_ROUNDS_TOTAL/8)"
      }
    ],
    "SKEIN_UNROLL_256": [
      {
        "file": "src/crypto/skein.c",
        "line": 542,
        "value": "(((SKEIN_LOOP)/100)%10)"
      },
      {
        "file": "src/crypto/skein.c",
        "line": 544,
        "value": "(0)"
      }
    ],
    "SKEIN_UNROLL_512": [
      {
        "file": "src/crypto/skein.c",
        "line": 727,
        "value": "(((SKEIN_LOOP)/10)%10)"
      },
      {
        "file": "src/crypto/skein.c",
        "line": 729,
        "value": "(0)"
      }
    ],
    "SKEIN_UNROLL_1024": [
      {
        "file": "src/crypto/skein.c",
        "line": 935,
        "value": "((SKEIN_LOOP)%10)"
      },
      {
        "file": "src/crypto/skein.c",
        "line": 937,
        "value": "(0)"
      }
    ],
    "_SKEIN_H_": [
      {
        "file": "src/crypto/skein.h",
        "line": 2,
        "value": "1"
      }
    ],
    "IS_BIG_ENDIAN": [
      {
        "file": "src/crypto/skein_port.h",
        "line": 91,
        "value": "4321 /* byte 0 is most significant (mc68k) */"
      }
    ],
    "IS_LITTLE_ENDIAN": [
      {
        "file": "src/crypto/skein_port.h",
        "line": 92,
        "value": "1234 /* byte 0 is least significant (i386) */"
      }
    ],
    "SKEIN_NEED_SWAP": [
      {
        "file": "src/crypto/skein_port.h",
        "line": 118,
        "value": "(1)"
      },
      {
        "file": "src/crypto/skein_port.h",
        "line": 121,
        "value": "(0)"
      }
    ],
    "MEMORY": [
      {
        "file": "src/crypto/slow-hash.c",
        "line": 47,
        "value": "(1 << 21) // 2MB scratchpad"
      }
    ],
    "AES_KEY_SIZE": [
      {
        "file": "src/crypto/slow-hash.c",
        "line": 50,
        "value": "32"
      }
    ],
    "INIT_SIZE_BLK": [
      {
        "file": "src/crypto/slow-hash.c",
        "line": 51,
        "value": "8"
      }
    ],
    "INIT_SIZE_BYTE": [
      {
        "file": "src/crypto/slow-hash.c",
        "line": 52,
        "value": "(INIT_SIZE_BLK * AES_BLOCK_SIZE)"
      }
    ],
    "tmp": [
      {
        "file": "src/crypto/slow-hash.c",
        "line": 60,
        "value": "((const uint8_t*)(p))[11]"
      }
    ],
    "table": [
      {
        "file": "src/crypto/slow-hash.c",
        "line": 61,
        "value": "0x75310"
      }
    ],
    "index": [
      {
        "file": "src/crypto/slow-hash.c",
        "line": 62,
        "value": "(((tmp >> 3) & 6) | (tmp & 1)) << 1"
      }
    ],
    "NONCE_POINTER": [
      {
        "file": "src/crypto/slow-hash.c",
        "line": 79,
        "value": "(((const uint8_t*)data)+35)"
      }
    ],
    "chunk1": [
      {
        "file": "src/crypto/slow-hash.c",
        "line": 123,
        "value": "(light ? _mm_load_si128((__m128i *)((base_ptr) + ((offset) ^ 0x30))) : _mm_load_si128((__m128i *)((base_ptr) + ((offset) ^ 0x10))))"
      },
      {
        "file": "src/crypto/slow-hash.c",
        "line": 134,
        "value": "(light ? vld1q_u64(U64((base_ptr) + ((offset) ^ 0x30))) : vld1q_u64(U64((base_ptr) + ((offset) ^ 0x10))))"
      }
    ],
    "chunk2": [
      {
        "file": "src/crypto/slow-hash.c",
        "line": 124,
        "value": "_mm_load_si128((__m128i *)((base_ptr) + ((offset) ^ 0x20)))"
      },
      {
        "file": "src/crypto/slow-hash.c",
        "line": 135,
        "value": "vld1q_u64(U64((base_ptr) + ((offset) ^ 0x20)))"
      }
    ],
    "chunk3": [
      {
        "file": "src/crypto/slow-hash.c",
        "line": 125,
        "value": "(light ? _mm_load_si128((__m128i *)((base_ptr) + ((offset) ^ 0x10))) : _mm_load_si128((__m128i *)((base_ptr) + ((offset) ^ 0x30))))"
      },
      {
        "file": "src/crypto/slow-hash.c",
        "line": 136,
        "value": "(light ? vld1q_u64(U64((base_ptr) + ((offset) ^ 0x10))) : vld1q_u64(U64((base_ptr) + ((offset) ^ 0x30))))"
      }
    ],
    "dividend": [
      {
        "file": "src/crypto/slow-hash.c",
        "line": 170,
        "value": "((uint64_t*)(ptr))[1]"
      }
    ],
    "divisor": [
      {
        "file": "src/crypto/slow-hash.c",
        "line": 171,
        "value": "(((uint64_t*)(ptr))[0] + (uint32_t)(sqrt_result << 1)) | 0x80000001UL"
      }
    ],
    "INLINE": [
      {
        "file": "src/crypto/slow-hash.c",
        "line": 231,
        "value": "__inline"
      },
      {
        "file": "src/crypto/slow-hash.c",
        "line": 239,
        "value": "inline"
      },
      {
        "file": "src/crypto/slow-hash.c",
        "line": 247,
        "value": "inline"
      },
      {
        "file": "src/crypto/slow-hash.c",
        "line": 852,
        "value": "inline"
      }
    ],
    "RDATA_ALIGN16": [
      {
        "file": "src/crypto/slow-hash.c",
        "line": 233,
        "value": "__declspec(align(16))"
      },
      {
        "file": "src/crypto/slow-hash.c",
        "line": 241,
        "value": "__attribute__ ((aligned(16)))"
      },
      {
        "file": "src/crypto/slow-hash.c",
        "line": 249,
        "value": "__attribute__ ((aligned(16)))"
      },
      {
        "file": "src/crypto/slow-hash.c",
        "line": 850,
        "value": "__attribute__ ((aligned(16)))"
      }
    ],
    "STATIC": [
      {
        "file": "src/crypto/slow-hash.c",
        "line": 238,
        "value": "static"
      },
      {
        "file": "src/crypto/slow-hash.c",
        "line": 246,
        "value": "static"
      },
      {
        "file": "src/crypto/slow-hash.c",
        "line": 851,
        "value": "static"
      },
      {
        "file": "src/crypto/slow-hash.c",
        "line": 855,
        "value": "static"
      }
    ],
    "ASM": [
      {
        "file": "src/crypto/slow-hash.c",
        "line": 254,
        "value": "__asm__"
      },
      {
        "file": "src/crypto/slow-hash.c",
        "line": 256,
        "value": "__asm__"
      },
      {
        "file": "src/crypto/slow-hash.c",
        "line": 258,
        "value": "__asm"
      }
    ],
    "TOTALBLOCKS": [
      {
        "file": "src/crypto/slow-hash.c",
        "line": 261,
        "value": "(MEMORY / AES_BLOCK_SIZE)"
      },
      {
        "file": "src/crypto/slow-hash.c",
        "line": 887,
        "value": "(MEMORY / AES_BLOCK_SIZE)"
      }
    ],
    "THREADV": [
      {
        "file": "src/crypto/slow-hash.c",
        "line": 316,
        "value": "__declspec(thread)"
      },
      {
        "file": "src/crypto/slow-hash.c",
        "line": 318,
        "value": "__thread"
      }
    ],
    "SHORT": [
      {
        "file": "src/crypto/slow-hash.c",
        "line": 1175,
        "value": "uint32_t"
      }
    ],
    "LONG": [
      {
        "file": "src/crypto/slow-hash.c",
        "line": 1176,
        "value": "uint64_t"
      }
    ],
    "SAES_WPOLY": [
      {
        "file": "src/crypto/soft_aes.hpp",
        "line": 56,
        "value": "0x011b"
      }
    ],
    "FORCE_INLINE": [
      {
        "file": "src/crypto/sse2neon.h",
        "line": 69,
        "value": "static inline __attribute__((always_inline))"
      },
      {
        "file": "src/crypto/sse2neon.h",
        "line": 78,
        "value": "static inline"
      }
    ],
    "_mm_load_ps1": [
      {
        "file": "src/crypto/sse2neon.h",
        "line": 494,
        "value": "_mm_load1_ps"
      }
    ],
    "movemask": [
      {
        "file": "src/crypto/sse2neon.h",
        "line": 687,
        "value": "{1, 2, 4, 8}"
      }
    ],
    "_mm_ucomilt_ss": [
      {
        "file": "src/crypto/sse2neon.h",
        "line": 2248,
        "value": "_mm_comilt_ss"
      }
    ],
    "_mm_ucomile_ss": [
      {
        "file": "src/crypto/sse2neon.h",
        "line": 2249,
        "value": "_mm_comile_ss"
      }
    ],
    "_mm_ucomigt_ss": [
      {
        "file": "src/crypto/sse2neon.h",
        "line": 2250,
        "value": "_mm_comigt_ss"
      }
    ],
    "_mm_ucomige_ss": [
      {
        "file": "src/crypto/sse2neon.h",
        "line": 2251,
        "value": "_mm_comige_ss"
      }
    ],
    "_mm_ucomieq_ss": [
      {
        "file": "src/crypto/sse2neon.h",
        "line": 2252,
        "value": "_mm_comieq_ss"
      }
    ],
    "_mm_ucomineq_ss": [
      {
        "file": "src/crypto/sse2neon.h",
        "line": 2253,
        "value": "_mm_comineq_ss"
      }
    ],
    "exp_double_bias": [
      {
        "file": "src/crypto/variant2_int_sqrt.h",
        "line": 9,
        "value": "_mm_set_epi64x(0, 1023ULL << 52)"
      }
    ],
    "b": [
      {
        "file": "src/crypto/variant2_int_sqrt.h",
        "line": 53,
        "value": "(n < r + bit)"
      },
      {
        "file": "src/crypto/variant2_int_sqrt.h",
        "line": 143,
        "value": "r & 1"
      }
    ],
    "n_next": [
      {
        "file": "src/crypto/variant2_int_sqrt.h",
        "line": 54,
        "value": "n - (r + bit)"
      }
    ],
    "r_next": [
      {
        "file": "src/crypto/variant2_int_sqrt.h",
        "line": 55,
        "value": "r + bit * 2"
      }
    ],
    "s": [
      {
        "file": "src/crypto/variant2_int_sqrt.h",
        "line": 142,
        "value": "r >> 1"
      }
    ],
    "r2": [
      {
        "file": "src/crypto/variant2_int_sqrt.h",
        "line": 144,
        "value": "(uint64_t)(s) * (s + b) + (r << 32)"
      }
    ]
  }
}